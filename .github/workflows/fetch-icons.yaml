###
#
# Regularly create a pull request with up-to-date icons
#
# This workflow has access to secrets and
# therefore will not run from a fork.
#
###

name: Fetch Icons

on:
  workflow_dispatch:
  schedule:
#            ┌───────────── minute (0 - 59)
#            │ ┌───────────── hour (0 - 23)
#            │ │ ┌───────────── day of the month (1 - 31)
#            │ │ │ ┌───────────── month (1 - 12 or JAN-DEC)
#            │ │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)
#            │ │ │ │ │
    - cron: '0 0 * * 0'  # the job will run every Sunday at 0:00

jobs:
  fetch:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'swisspost'

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup
        uses: swisspost/design-system/.github/actions/setup-pnpm@main

      - name: Get Date
        id: current-date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Create Branch
        id: current-branch
        run: |
          git checkout -b $BRANCH_NAME
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
        env:
          BRANCH_NAME: ${{ steps.current-date.outputs.date }}-update-icons

      - name: Install icons & dependencies
        run: pnpm --filter design-system-icons... install

      - name: Fetch Icons
        run: pnpm --filter design-system-icons fetchSVGs
        env:
          CEN_USERNAME: ${{ secrets.CEN_USERNAME }}
          CEN_PASSWORD: ${{ secrets.CEN_PASSWORD }}
          CEN_URL: ${{ secrets.CEN_URL }}

      - name: Create Changeset
        run: |
          echo ---                                       > $CHANGESET
          echo "'@swisspost/design-system-icons': patch" >> $CHANGESET
          echo ---                                       >> $CHANGESET
          echo                                           >> $CHANGESET
          echo Updated icon SVGs.                        >> $CHANGESET
          echo                                           >> $CHANGESET
        env:
          CHANGESET: ./.changeset/${{ steps.current-branch.outputs.branch }}.md

      - name: Commit Changes
        run: |
          git config --global user.name github-actions[bot]
          git config --global user.email github-actions@github.com
          git add .
          git commit -am "chore(icons): :point_up: update icon SVGs"
          git push -u origin ${{ steps.current-branch.outputs.branch }}

      - name: Get Changes
        id: changed-files
        uses: tj-actions/changed-files@v35
        with:
          files: ./packages/icons/public/post-icons/**

      - name: Exit if no changes
        if: steps.changed-files.outputs.any_modified == 'false'
        run: |
          git checkout main
          git push origin --delete ${{ steps.current-branch.outputs.branch }}

      - name: Write PR Body
        id: pr-body
        if: steps.changed-files.outputs.any_modified != 'false'
        run: |
          # write the PR body as a Markdown file so that it is multi-lined and properly formatted
          # the file is only used when creating the PR but is never committed

          # create the file by first writing a title
          echo "# Design system icons are now up to date!"                                              > $PR_BODY_FILE

          # set file path as workflow step output
          echo "file=$PR_BODY_FILE" >> $GITHUB_OUTPUT

          # group all modified, renamed and copied files into a single list counting as updated files
          UPDATED_ICONS=("${MODIFIED_ICONS[@]}" "${RENAMED_ICONS[@]}" "${COPIED_ICONS[@]}")

          # declare all PR body sections in an indexed array (-a) to control their order
          # declare the list of files corresponding to each section in an associative array (-A)
          declare -a sections;            declare -A changes
          sections+=( "Icons Added" );    changes["Added icons"]=$ADDED_ICONS
          sections+=( "Icons Updated" );  changes["Updated icons"]=$UPDATED_ICONS
          sections+=( "Icons Deleted" );  changes["Deleted icons"]=$DELETED_ICONS

          # for each section with changes, add a heading to the PR body file
          for section in "${sections[@]}"; do
            section_changes=changes[$section]
            if [[ ${section_changes} != '' ]]; then
              echo "## $section"                                                                       >> $PR_BODY_FILE

              # list the name of the first 15 icons of the section
              for file in ${section_changes:0:15}; do
                # get the icon name from its path
                icon=$(echo $file | sed 's/^packages\/icons\/public\/post-icons\///' | sed 's/\.svg$//')
                # then add the icon name to the PR body file as a list item
                if [[ $icon != '' ]]; then
                  echo "- $icon"                                                                       >> $PR_BODY_FILE
                fi
              done

              # if there are more than 15 icons in the section, displays the number of icons remaining
              count=${#section_changes[@]}
              if [[ $count > 15 ]]; then
                echo "- ... and $(($count - 15)) more"                                                 >> $PR_BODY_FILE
              fi
            fi
          done
        env:
          PR_BODY_FILE: pr-body.md
          ADDED_ICONS: ${{ steps.changed-files.outputs.added_files }}
          MODIFIED_ICONS: ${{ steps.changed-files.outputs.modified_files }}
          RENAMED_ICONS: ${{ steps.changed-files.outputs.renamed_files }}
          COPIED_ICONS: ${{ steps.changed-files.outputs.copied_files }}
          DELETED_ICONS: ${{ steps.changed-files.outputs.deleted_files }}

      - name: MOCK - Create PR
        if: steps.changed-files.outputs.any_modified != 'false'
        run: cat ${{ steps.pr-body.outputs.file }}
