###
#
# Regularly create a pull request with up-to-date icons
#
# This workflow has access to secrets and
# therefore will not run from a fork.
#
# The schedule event can be delayed during periods of high loads of GitHub Actions workflow runs.
# High load times include the start of every hour. If the load is sufficiently high enough, some queued jobs may be dropped.
# To decrease the chance of delay, schedule your workflow to run at a different time of the hour.
# Source: https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#schedule
#
###

name: Fetch Icons

on:
  workflow_dispatch:
  schedule:
    #        ┌───────────── minute (0 - 59)
    #        │  ┌───────────── hour (0 - 23)
    #        │  │ ┌───────────── day of the month (1 - 31)
    #        │  │ │ ┌───────────── month (1 - 12 or JAN-DEC)
    #        │  │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)
    #        │  │ │ │ │
    - cron: '15 0 * * 0' # the job will run every Sunday at 0:15

jobs:
  fetch:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'swisspost'

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0

      - name: Setup
        uses: ./.github/actions/setup-pnpm

      - name: Get Date
        id: current-date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Create Branch
        id: current-branch
        run: |
          git checkout -b $BRANCH_NAME origin/icons-workflow
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
        env:
          BRANCH_NAME: ${{ steps.current-date.outputs.date }}-update-icons

      - name: Install icons & dependencies
        run: pnpm --filter design-system-icons... --filter design-system-styles... install

      - name: Fetch Icons
        run: pnpm --filter design-system-icons fetchSVGs
        env:
          CEN_USERNAME: ${{ secrets.CEN_USERNAME }}
          CEN_PASSWORD: ${{ secrets.CEN_PASSWORD }}
          CEN_URL_ICONSET_POST: ${{ secrets.CEN_URL_ICONSET_POST }}
          CEN_URL_ICONSET_UI: ${{ secrets.CEN_URL_ICONSET_UI }}

      - name: Build styles
        run: pnpm --filter design-system-styles... build

      - name: Commit Changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -am "chore(icons): update icon SVGs"
          git push -u origin ${{ steps.current-branch.outputs.branch }}

      - name: Get Changes
        id: changed-files
        uses: step-security/changed-files@3dbe17c78367e7d60f00d78ae6781a35be47b4a1
        with:
          files: ./packages/icons/src/icons/ui/*.svg

      - name: New Step
        id: changed-icons
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        env:
          ADDED_FILES: ${{ steps.changed-files.outputs.added_files }}
          MODIFIED_FILES: ${{ steps.changed-files.outputs.modified_files }}
          RENAMED_FILES: ${{ steps.changed-files.outputs.renamed_files }}
          COPIED_FILES: ${{ steps.changed-files.outputs.copied_files }}
          DELETED_FILES: ${{ steps.changed-files.outputs.deleted_files }}
        with:
          script: |
            const path = require('path')
            const { ADDED_FILES, MODIFIED_FILES, RENAMED_FILES, COPIED_FILES, DELETED_FILES } = process.env

            function getIcons(files) {
              const icons = new Map()
              files.split(' ').forEach(file => {
                const chunks = path.basename(file, path.extname(file)).split('_')
                const icon = chunks[0]
                const size = chunks[chunks.length - 1]
                const variant = chunks.includes('Solid') ? 'solid' : 'line'

                const details = icons.get(icon) || { sizes: new Set(), variants: new Set() }
                details.sizes.add(size)
                details.variants.add(variant)

                icons.set(icon, details)
              })

              return Array.from(icons.entries())
                .map(([icon, { sizes, variants }]) => {
                  const allVariants = Array.from(variants).sort().join(' & ')
                  const allSizes = Array.from(sizes)
                    .sort()
                    .join(', ')
                    .replace(/, ([^,]*)$/, ', and $1')
                  return `- \`${icon}\` (${allVariants}): ${allSizes}px`
                })
                .join('\n')
            }

            const result = {}

            if (DELETED_FILES) {
              result.deleted_icons = getIcons(DELETED_FILES)
            }

            if (ADDED_FILES) {
              result.added_icons = getIcons(ADDED_FILES)
            }

            if (MODIFIED_FILES || RENAMED_FILES || COPIED_FILES) {
              result.updated_icons = getIcons([...MODIFIED_FILES, ...RENAMED_FILES, ...COPIED_FILES].join(' '))
            }

            console.log(result)

            return result;

      - name: Get result
        run: |
          echo $DELETED_ICONS
          echo $ADDED_ICONS
          echo $UPDATED_ICONS
        env:
          DELETED_ICONS: ${{ steps.changed-icons.outputs.result.deleted_icons }}
          ADDED_ICONS: ${{ steps.changed-icons.outputs.result.added_icons }}
          UPDATED_ICONS: ${{ steps.changed-icons.outputs.result.updated_icons }}
