name: Deploy Documentation Preview
on:
  workflow_run:
    workflows: ['Build Documentation']
    types: [completed]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  deploy:
    name: Deploy Documentation Preview
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@8edcb1bdb4e267140fa742c62e395cd74f332709

      - name: Setup pnpm & node
        uses: ./.github/actions/setup-pnpm

      - name: Setup netlify-cli
        uses: ./.github/actions/setup-netlify-cli

      - name: Download build artifacts
        uses: ./.github/actions/artifact-download
        id: build
        with:
          name: design-system-documentation
          folder: build-output

      - name: Create preview message
        uses: ./.github/actions/preview/message/create
        with:
          access-token: ${{ secrets.SWISSPOSTDEVS_ACCESS_TOKEN }}
          issue-number: ${{ steps.build.outputs.id }}

      - name: Get and validate netlify config
        run: |
          if [[ ! -f "${{ steps.build.outputs.folder }}/netlify.config.json" ]]; then
              echo "Error: Netlify config file missing"
              exit 1
          fi

          CONFIG_CONTENT=$(cat "${{ steps.build.outputs.folder }}/netlify.config.json")

          node -e "
          try {
            const config = JSON.parse(process.argv[1]);
            const { siteId, siteUrl } = config;

            if (!siteId || !siteUrl) {
              console.error('Error: Missing siteId or siteUrl in netlify config');
              process.exit(1);
            }

            if (!/^[a-zA-Z0-9-]+\$/.test(siteId)) {
              console.error('Error: Invalid site ID format.');
              process.exit(1);
            }

            if (!/^[a-zA-Z0-9.-]+\$/.test(siteUrl)) {
              console.error('Error: Invalid site URL format.');
              process.exit(1);
            }

          // Export environment variables for subsequent workflow steps
          // These console.log outputs get redirected to GITHUB_ENV via >> operator
          console.log('SITE_ID=' + siteId);
          console.log('SITE_URL=' + siteUrl);

          } catch (error) {
            console.error('JSON parsing error:', error.message);
            process.exit(1);
          }
          " "$CONFIG_CONTENT" >> $GITHUB_ENV
      - name: Remove netlify.config.json from artifact folder
        run: rm ${{ steps.build.outputs.folder }}/netlify.config.json

      - name: Create URL alias
        env:
          BUILD_ID: ${{ steps.build.outputs.id }}
        run: |
          url_alias=$(echo "preview-$BUILD_ID" | iconv -t ascii//TRANSLIT | sed -E 's/[~\^]+//g' | sed -E 's/[^a-zA-Z0-9]+/-/g' | sed -E 's/^-+\|-+$//g' | sed -E 's/^-+//g' | sed -E 's/-+$//g' | tr A-Z a-z)
          echo "URL_ALIAS=$url_alias" >> $GITHUB_ENV

          preview_url="https://${url_alias}--${SITE_URL}?devModeEnabled=true"
          echo "PREVIEW_URL=$preview_url" >> $GITHUB_ENV

      - name: Deploy Documentation Preview
        id: deploy
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ env.SITE_ID }}
          URL_ALIAS: ${{ env.URL_ALIAS }}
          FOLDER: ${{ steps.build.outputs.folder }}
        run: |
          netlify deploy --filter @swisspost/design-system-documentation --dir "$FOLDER" --alias "$URL_ALIAS"
          echo "site-url=$PREVIEW_URL" >> $GITHUB_OUTPUT

      - name: Update preview message
        uses: ./.github/actions/preview/message/update
        with:
          access-token: ${{ secrets.SWISSPOSTDEVS_ACCESS_TOKEN }}
          issue-number: ${{ steps.build.outputs.id }}
          preview-url: ${{ steps.deploy.outputs.site-url }}

      - name: Create Summary
        env:
          SITE_ID: ${{ env.SITE_ID }}
          SITE_URL: ${{ steps.deploy.outputs.site-url }}
        run: |
          echo "# Deployed Documentation Preview" >> $GITHUB_STEP_SUMMARY
          echo "- SiteId: <code>${SITE_ID}</code>" >> $GITHUB_STEP_SUMMARY
          echo "- SiteUrl: ${SITE_URL}" >> $GITHUB_STEP_SUMMARY
