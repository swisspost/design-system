name: Build Tokens
on:
  pull_request:
    types: [opened, synchronize, edited, reopened]
    paths:
      - 'packages/tokens/**'

jobs:
  build:
    name: Build Tokens
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup-pnpm

      - name: Install dependencies
        run: pnpm --filter design-system-tokens... install

      - name: Build tokens & dependencies
        run: pnpm --filter design-system-tokens... build

      - name: Create Summary
        id: summary
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs')
            const path = require('path')

            const inputFileNames = fs.readdirSync('packages/tokens/tokensstudio-generated')
            const inputFiles = inputFileNames.map(fileName => ({
              type: path.extname(fileName).replace(/^\./, ''),
              name: fileName,
              content: fs.readFileSync(`packages/tokens/tokensstudio-generated/${fileName}`, 'utf8')
            }))

            const outputOrder = [
              'index.scss',
              'core.scss',
              'scheme.scss',
              'device.scss',
              'channel.scss',
              'theme.scss',
              'components.scss',
            ]
            const outputFileAndDirNames = fs.readdirSync('packages/tokens/dist')
            const outputDirNames = outputFileAndDirNames.filter(fileOrDir => fs.lstatSync(`packages/tokens/dist/${fileOrDir}`).isDirectory())
            const outputFileNames = outputFileAndDirNames.filter(fileOrDir => fs.lstatSync(`packages/tokens/dist/${fileOrDir}`).isFile())
            const getFiles = (fileNames, dirName) => {
              const dirPath = dirName ? `${dirName}/` : ''
              return fileNames
                .map(fileName => ({
                  type: path.extname(fileName).replace(/^\./, ''),
                  name: `${dirPath}${fileName}`,
                  content: fs.readFileSync(`packages/tokens/dist/${dirPath}${fileName}`, 'utf8')
                }))
                .map(({ type, name, content }) => {
                  if (type === 'scss') content = content.replaceAll('\n\n', '\n&nbsp;\n').replaceAll('$', '&#36;').replaceAll('  ', '&nbsp;&nbsp;')
                  return { type, name, content }
                })
                .sort((a, b) => (outputOrder.includes(a.name) ? outputOrder.indexOf(a.name) : 1000) - (outputOrder.includes(b.name) ? outputOrder.indexOf(b.name) : 1000))
            }

            const outputFiles = [
              ...outputDirNames.flatMap(dirName => getFiles(fs.readdirSync(`packages/tokens/dist/${dirName}`), dirName)),
              ...getFiles(outputFileNames),
            ]

            return `# Token Build
            ## Input
            ${inputFiles.map(({ type, name, content }) => `<details>
              <summary><code>${name}</code></summary>
              <pre lang="${type}">${content}</pre>
            </details>`).join('\n')}

            ## Output
            ${outputFiles.map(({ type, name, content }) => `<details>
              <summary><code>${name}</code></summary>
              <pre lang="${type}">${content}</pre>
            </details>`).join('\n')}
            `

      - name: Output Summary
        run: echo -e ${{ steps.summary.outputs.result }} >> $GITHUB_STEP_SUMMARY
