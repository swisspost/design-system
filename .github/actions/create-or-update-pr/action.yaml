name: Create or Update PR
description: Checks if a PR exists and create it otherwise

inputs:
  access-token:
    description: The access token to use for creating the PR
    required: true
  head:
    description: Name of the branch containing the changes
    required: true
    type: string
  base:
    description: Name of the base branch
    required: false
    default: main
    type: string
  title:
    description: Title of the PR if one must be created
    required: true
    type: string
  body:
    description: Body of the PR if a new one must be created. Used if 'body-file' is not provided.
    required: false
    type: string
    default: ""
  body-file:
    description: Path to a file containing the body of the PR. Takes precedence over 'body'.
    required: false
    type: string

runs:
  using: composite
  steps:
    - name: Get Branch
      id: branch
      shell: bash
      run: |
        BRANCH_LIST=$(git ls-remote origin "${{ inputs.head }}")
        [[ -n $BRANCH_LIST ]] && BRANCH_EXISTS=true || BRANCH_EXISTS=false
        echo "exists=$BRANCH_EXISTS" >> $GITHUB_OUTPUT

    - name: Create Branch
      if: steps.branch.outputs.exists == 'false'
      shell: bash
      run: |
        git checkout -b ${{ inputs.head }} origin/${{ inputs.base }}
        git push --set-upstream origin ${{ inputs.head }}

    - name: Checkout Branch
      if: steps.branch.outputs.exists == 'true'
      shell: bash
      run: git checkout ${{ inputs.head }}

    - name: Get PR
      id: pr
      shell: bash
      run: |
        PR_LIST=$(gh pr list --head "${{ inputs.head }}")
        [[ -n $PR_LIST ]] && PR_EXISTS=true || PR_EXISTS=false
        echo "exists=$PR_EXISTS" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ inputs.access-token }}

    - name: Create PR
      if: steps.pr.outputs.exists == 'false'
      shell: bash
      run: |
        if [[ -n "${{ inputs.body-file }}" ]]; then
          BODY_ARG="--body-file \"${{ inputs.body-file }}\""
        else
          BODY_ARG="--body \"${{ inputs.body }}\""
        fi
        gh pr create --title "${{ inputs.title }}" ${BODY_ARG} --base ${{ inputs.base }}
      env:
        GITHUB_TOKEN: ${{ inputs.access-token }}
