import StyleDictionary from 'style-dictionary';
import { register } from '@tokens-studio/sd-transforms';
import { FILE_HEADER } from './constants.js';

register(StyleDictionary);

/**
 * @function StyleDictionary.registerFileHeader()
 * Defined a custom StyleDictionary file header.
 *
 * swisspost/file-header:
 * Used to define a custom default file header for all output files, generated by StyleDictionary.
 */
StyleDictionary.registerFileHeader({
  name: 'swisspost/file-header',
  fileHeader: () => {
    return FILE_HEADER;
  },
});

/**
 * @function StyleDictionary.registerPreprocessor()
 * Defines a custom StyleDictionary preprocessor.
 *
 * swisspost/box-shadow-keep-refs-workaround:
 * Used to keep the references in the box-shadow token values, which otherwise would be resolved with the actual values.
 * This is a known bug in the current StyleDictionary version: https://github.com/amzn/style-dictionary/issues/1318.
 */

StyleDictionary.registerPreprocessor({
  name: 'swisspost/box-shadow-keep-refs-workaround',
  preprocessor: dictionary => {
    traverse(dictionary);

    function traverse(context) {
      Object.entries(context).forEach(([key, value]) => {
        const usesDtcg = context[key].$type && context[key].$value;
        const isToken = context[key][usesDtcg ? '$type' : 'type'] !== undefined;

        if (isToken) {
          const tokenType = context[key][usesDtcg ? '$type' : 'type'];
          const tokenValue = context[key][usesDtcg ? '$value' : 'value'];

          if (tokenType === 'shadow' && typeof tokenValue === 'string') {
            context[key].$extensions[
              'studio.tokens'
            ].boxShadowKeepRefsWorkaroundValue = `${tokenValue.replace(/[{}]/g, match =>
              match === '{' ? '[[' : ']]',
            )}`;
          }
        } else if (typeof context[key] === 'object') {
          traverse(value);
        }
      });
    }

    return dictionary;
  },
});

export default StyleDictionary;
