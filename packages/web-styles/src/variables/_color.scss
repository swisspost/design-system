@use 'sass:map';
@use 'sass:list';
@use '../functions/color' as color-fn;

/**
 * Colors used by the post style guide
 */

// The one and only
$yellow: #fc0;

// Grayscale
$white: #fff;
$gray-10: hsl(0, 0%, 90%);
$gray-20: hsl(0, 0%, 80%);
$gray-40: hsl(0, 0%, 60%);
$gray-60: hsl(0, 0%, 40%);
$gray-80: hsl(0, 0%, 20%);
$black: #000;

$gray-background: #f4f3f1;
$gray-background-light: #faf9f8;

// Accent colors
$nightblue-dark: #004976;
$nightblue-bright: #0076a8;
$petrol-dark: #006d68;
$petrol-bright: #00968f;
$coral-dark: #9e2a2f;
$coral-bright: #e03c31;
$purple-dark: #80276c;
$purple-bright: #c5299b;
$olive-dark: #716135;
$olive-bright: #aa9d2e;
$aubergine-dark: #523178;
$aubergine-bright: #7566a0;

// Contextual colors
$success: #2c911c;
$success-text: #255e1c;
$error: #a51728;
$error-text: #8f0d1c;
$warning: #f49e00;

/**
 * Maps. Allow maps to have custom colors from the project
 * by always merging into a default empty map
 */

$grays: () !default;
$grays: map.merge(
  $grays,
  (
    '10': $gray-10,
    '20': $gray-20,
    '40': $gray-40,
    '60': $gray-60,
    '80': $gray-80,
  )
);

$contextual-colors: () !default;
$contextual-colors: map.merge(
  $contextual-colors,
  (
    'success': $success,
    'info': $yellow,
    'warning': $warning,
    'danger': $error,
  )
);

$accent-colors: () !default;
$accent-colors: map.merge(
  $accent-colors,
  (
    'nightblue': $nightblue-dark,
    'nightblue-bright': $nightblue-bright,
    'petrol': $petrol-dark,
    'petrol-bright': $petrol-bright,
    'coral': $coral-dark,
    'coral-bright': $coral-bright,
    'olive': $olive-dark,
    'olive-bright': $olive-bright,
    'purple': $purple-dark,
    'purple-bright': $purple-bright,
    'aubergine': $aubergine-dark,
    'aubergine-bright': $aubergine-bright,
  )
);

// List of possible background colors with some synonyms for easier usage
$background-colors: () !default;
$background-colors: map.merge(
  $background-colors,
  (
    'yellow': $yellow,
    'light': $gray-background-light,
    'gray': $gray-background,
    'dark': $gray-80,
    'primary': $gray-80,
    'white': $white,
  )
);

// Merge with the other lists
$background-colors: map.merge($background-colors, $contextual-colors);
$background-colors: map.merge($background-colors, $accent-colors);

// One list to rule them all
$colors: () !default;
$colors: map.merge(
  (
    'black': $black,
  ),
  $grays
);
$colors: map.merge($background-colors, $colors);

// Compile lists of backgrounds, used in the :is selector mixins at mixins/color
$all-backgrounds: () !default;
$dark-backgrounds: () !default;
@each $colorname, $color in $background-colors {
  $classname: '.bg-#{$colorname}';

  $all-backgrounds: list.append($all-backgrounds, $classname, $separator: comma);

  @if (color-fn.get-contrast-color($color) != #000) {
    $dark-backgrounds: list.append($dark-backgrounds, $classname, $separator: comma);
  }
}
