@forward '../variables/options';

@use '../lic/bootstrap-license';
@use '../themes/bootstrap/overrides' as *;

@use '../variables/components/nav';
@use '../variables/spacing';
@use '../variables/commons';
@use '../variables/color';
@use '../mixins/color' as color-mx;
@use '../mixins/utilities';

.tabs-wrapper {
  position: relative;
  padding-top: spacing.$spacer;
  border: 0;
  background-color: color.$gray-background-light;

  // Create a line that lies below the active but above the passive elements
  // This way hover works smoothly with the background color
  &::after {
    content: '';
    position: absolute;
    bottom: 0;
    width: 100%;
    height: 1px;
    background-color: nav.$nav-tabs-border-color;
  }

  // Small hack to save a lot of code and provide a lot of flexibility to tabs coloring
  .tabs {
    background-color: transparent !important;
  }
}

.tabs {
  flex-wrap: nowrap;
  overflow-x: auto;

  /* prevent scroll chaining on x scroll */
  overscroll-behavior-x: contain;
  white-space: nowrap;

  // Scrolling fix, make the tabs scroll a little more so the right most tab is not
  // flush with the window border
  &::after {
    content: '';
    display: block;
    flex: 1 0 auto;
    width: nav.$nav-link-padding-x;
  }

  .tab-title {
    position: relative;
    box-sizing: border-box;
    padding: nav.$nav-link-padding;
    transition: background-color 100ms;
    border-right: 1px solid transparent;
    border-left: 1px solid transparent;
    outline-color: currentColor;
    opacity: 0.7;
    color: var(--text-color);

    // Tabs with backgrounds
    @include color-mx.has-background() {
      &:not(.active) {
        &:hover {
          background-color: rgba(nav.$nav-tabs-link-active-bg, 0.2);
        }

        &:focus-visible {
          background-color: rgba(nav.$nav-tabs-link-active-bg, 0.2);
        }
      }

      &.active {
        &:focus-visible {
          &::after {
            background-color: rgba(nav.$nav-tabs-link-active-bg, 0.2);
          }
        }
      }
    }

    /* stylelint-disable-next-line order/order */
    @include utilities.high-contrast-mode() {
      opacity: 1;

      &:focus,
      &:focus-within,
      &:focus-visible {
        border-radius: commons.$border-radius;
        outline: 2px solid highlight;
        // used for showing full outline
        outline-offset: -(spacing.$size-micro);
      }

      &.active {
        color: highlight;
      }
    }

    &:focus {
      opacity: 0.7;
      background-color: unset;
      color: var(--text-color);
    }

    &:hover {
      opacity: 1;
      background-color: nav.$nav-tabs-link-active-bg;
      color: var(--text-color);
    }

    // same styles as focus, can't use placeholder here because focus-visible can't be described outside of the support condition
    &:focus-visible {
      outline: transparent;
      opacity: 1;
      background-color: nav.$nav-tabs-link-active-bg;
      color: var(--text-color);

      &::after {
        content: '';
        display: block;
        position: absolute;
        top: $nav-tabs-focus-box-shadow-width;
        right: $nav-tabs-focus-box-shadow-width - 1px;
        bottom: 0;
        left: $nav-tabs-focus-box-shadow-width - 1px;
        box-shadow: nav.$nav-tabs-focus-box-shadow;
      }
    }

    &.active {
      z-index: 1; // Lift above the line and make focus visible all around
      border-right-color: nav.$nav-tabs-border-color;
      border-left-color: nav.$nav-tabs-border-color;
      opacity: 1;
      background-color: nav.$nav-tabs-link-active-bg;
      color: var(--text-color);
      font-weight: 700;

      // Create a line that does not suffer from border corner mitering
      &::before {
        content: '';
        display: block;
        position: absolute;
        top: 0;
        right: -1px;
        left: -1px;
        height: 4px;
        background-color: nav.$nav-tabs-link-active-border-color;
      }
    }
  }
}

.tab-content {
  padding-top: spacing.$spacer;
  padding-bottom: spacing.$spacer;
}

// Careful, this generates a lot of code
@each $key, $color in color.$background-colors {
  .bg-#{$key} {
    .tabs-wrapper {
      background-color: $color;
    }

    .tab-title {
      background-color: $color;

      &.active {
        background-color: $color;
      }
    }

    .nav-item {
      background-color: $color;
    }
  }
}

[class*='bg-'] .tab-title.active {
  &:focus {
    &::after {
      background-color: rgba(255, 255, 255, 0.2);
    }
  }

  // write supports for selectors this way: https://stackoverflow.com/a/62666132
  // need to include * otherwise it throws build error
  @supports #{'\selector(*:focus-visible)'} {
    &:focus {
      &::after {
        background-color: unset;
      }
    }

    // same styles as focus, can't use placeholder here because focus-visible can't be described outside of the support condition
    &:focus-visible {
      &::after {
        background-color: rgba(255, 255, 255, 0.2);
      }
    }
  }
}
