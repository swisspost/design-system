/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
        "write": (text: string) => Promise<void>;
    }
    /**
     * @class PostIcon - representing a stencil component
     * @param name - The name/id of the icon (e.g. 1000, 1001, ...).
     * @param base - The base path, where the icons are located (must be a public url).
     * @param flipH - When set to `true`, the icon will be flipped horizontally.
     * @param flipV - When set to `true`, the icon will be flipped vertically.
     * @param scale - The `number` for the css `scale` transformation.
     * @param rotate - The `number` of degree for the css `rotate` transformation.
     * @param animation - The name of the animation (`cylon`, `cylon-vertical`, `spin`, `spin-reverse`, `fade`, `throb`).
     * @exports {class} PostIcon - Which will be processed to a custom web-component on build.
     * @see  : https://jsdoc.app/ and https://en.wikipedia.org/wiki/JSDoc
     */
    interface PostIcon {
        "animation"?: string;
        "base"?: string;
        "flipH"?: boolean;
        "flipV"?: boolean;
        "name": string;
        "rotate"?: number;
        "scale"?: number;
    }
}
export interface MyComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyComponentElement;
}
declare global {
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    /**
     * @class PostIcon - representing a stencil component
     * @param name - The name/id of the icon (e.g. 1000, 1001, ...).
     * @param base - The base path, where the icons are located (must be a public url).
     * @param flipH - When set to `true`, the icon will be flipped horizontally.
     * @param flipV - When set to `true`, the icon will be flipped vertically.
     * @param scale - The `number` for the css `scale` transformation.
     * @param rotate - The `number` of degree for the css `rotate` transformation.
     * @param animation - The name of the animation (`cylon`, `cylon-vertical`, `spin`, `spin-reverse`, `fade`, `throb`).
     * @exports {class} PostIcon - Which will be processed to a custom web-component on build.
     * @see  : https://jsdoc.app/ and https://en.wikipedia.org/wiki/JSDoc
     */
    interface HTMLPostIconElement extends Components.PostIcon, HTMLStencilElement {
    }
    var HTMLPostIconElement: {
        prototype: HTMLPostIconElement;
        new (): HTMLPostIconElement;
    };
    interface HTMLElementTagNameMap {
        "my-component": HTMLMyComponentElement;
        "post-icon": HTMLPostIconElement;
    }
}
declare namespace LocalJSX {
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
        /**
          * This event is fired randomly
         */
        "onSomeevent"?: (event: MyComponentCustomEvent<string>) => void;
    }
    /**
     * @class PostIcon - representing a stencil component
     * @param name - The name/id of the icon (e.g. 1000, 1001, ...).
     * @param base - The base path, where the icons are located (must be a public url).
     * @param flipH - When set to `true`, the icon will be flipped horizontally.
     * @param flipV - When set to `true`, the icon will be flipped vertically.
     * @param scale - The `number` for the css `scale` transformation.
     * @param rotate - The `number` of degree for the css `rotate` transformation.
     * @param animation - The name of the animation (`cylon`, `cylon-vertical`, `spin`, `spin-reverse`, `fade`, `throb`).
     * @exports {class} PostIcon - Which will be processed to a custom web-component on build.
     * @see  : https://jsdoc.app/ and https://en.wikipedia.org/wiki/JSDoc
     */
    interface PostIcon {
        "animation"?: string;
        "base"?: string;
        "flipH"?: boolean;
        "flipV"?: boolean;
        "name"?: string;
        "rotate"?: number;
        "scale"?: number;
    }
    interface IntrinsicElements {
        "my-component": MyComponent;
        "post-icon": PostIcon;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            /**
             * @class PostIcon - representing a stencil component
             * @param name - The name/id of the icon (e.g. 1000, 1001, ...).
             * @param base - The base path, where the icons are located (must be a public url).
             * @param flipH - When set to `true`, the icon will be flipped horizontally.
             * @param flipV - When set to `true`, the icon will be flipped vertically.
             * @param scale - The `number` for the css `scale` transformation.
             * @param rotate - The `number` of degree for the css `rotate` transformation.
             * @param animation - The name of the animation (`cylon`, `cylon-vertical`, `spin`, `spin-reverse`, `fade`, `throb`).
             * @exports {class} PostIcon - Which will be processed to a custom web-component on build.
             * @see  : https://jsdoc.app/ and https://en.wikipedia.org/wiki/JSDoc
             */
            "post-icon": LocalJSX.PostIcon & JSXBase.HTMLAttributes<HTMLPostIconElement>;
        }
    }
}
