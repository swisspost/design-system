/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface PostCollapsible {
        /**
          * If `true`, the element is initially collapsed otherwise it is displayed.
         */
        "collapsed"?: boolean;
        /**
          * Defines the hierarchical level of the collapsible header within the headings structure.
         */
        "headingLevel"?: number;
        /**
          * Triggers the collapse programmatically.
         */
        "toggle": (open?: boolean) => Promise<boolean>;
    }
    /**
     * @class PostIcon - representing a stencil component
     */
    interface PostIcon {
        /**
          * The name of the animation.
         */
        "animation"?: Animation | null;
        /**
          * The base path, where the icons are located (must be a public url).<br/>Leave this field empty to use the default cdn url.
         */
        "base"?: string | null;
        /**
          * When set to `true`, the icon will be flipped horizontally.
         */
        "flipH"?: boolean;
        /**
          * When set to `true`, the icon will be flipped vertically.
         */
        "flipV"?: boolean;
        /**
          * The name/id of the icon (e.g. 1000, 1001, ...).
         */
        "name": string;
        /**
          * The number of degree for the css rotate transformation.
         */
        "rotate"?: number | null;
        /**
          * The number for the css scale transformation.
         */
        "scale"?: number | null;
    }
    interface PostTabHeader {
        /**
          * Activates the tab programmatically.
         */
        "activate": () => Promise<void>;
        /**
          * If `true`, the header is active and its corresponding panel is visible
         */
        "active": boolean;
        /**
          * Deactivates the tab programmatically.
         */
        "deactivate": () => Promise<void>;
    }
    interface PostTabPanel {
        /**
          * Hides the tab panel programmatically.
         */
        "hide": () => Promise<void>;
        /**
          * Shows the tab panel programmatically.
         */
        "show": () => Promise<void>;
    }
    interface PostTabs {
    }
}
export interface PostTabHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPostTabHeaderElement;
}
export interface PostTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPostTabsElement;
}
declare global {
    interface HTMLPostCollapsibleElement extends Components.PostCollapsible, HTMLStencilElement {
    }
    var HTMLPostCollapsibleElement: {
        prototype: HTMLPostCollapsibleElement;
        new (): HTMLPostCollapsibleElement;
    };
    /**
     * @class PostIcon - representing a stencil component
     */
    interface HTMLPostIconElement extends Components.PostIcon, HTMLStencilElement {
    }
    var HTMLPostIconElement: {
        prototype: HTMLPostIconElement;
        new (): HTMLPostIconElement;
    };
    interface HTMLPostTabHeaderElement extends Components.PostTabHeader, HTMLStencilElement {
    }
    var HTMLPostTabHeaderElement: {
        prototype: HTMLPostTabHeaderElement;
        new (): HTMLPostTabHeaderElement;
    };
    interface HTMLPostTabPanelElement extends Components.PostTabPanel, HTMLStencilElement {
    }
    var HTMLPostTabPanelElement: {
        prototype: HTMLPostTabPanelElement;
        new (): HTMLPostTabPanelElement;
    };
    interface HTMLPostTabsElement extends Components.PostTabs, HTMLStencilElement {
    }
    var HTMLPostTabsElement: {
        prototype: HTMLPostTabsElement;
        new (): HTMLPostTabsElement;
    };
    interface HTMLElementTagNameMap {
        "post-collapsible": HTMLPostCollapsibleElement;
        "post-icon": HTMLPostIconElement;
        "post-tab-header": HTMLPostTabHeaderElement;
        "post-tab-panel": HTMLPostTabPanelElement;
        "post-tabs": HTMLPostTabsElement;
    }
}
declare namespace LocalJSX {
    interface PostCollapsible {
        /**
          * If `true`, the element is initially collapsed otherwise it is displayed.
         */
        "collapsed"?: boolean;
        /**
          * Defines the hierarchical level of the collapsible header within the headings structure.
         */
        "headingLevel"?: number;
    }
    /**
     * @class PostIcon - representing a stencil component
     */
    interface PostIcon {
        /**
          * The name of the animation.
         */
        "animation"?: Animation | null;
        /**
          * The base path, where the icons are located (must be a public url).<br/>Leave this field empty to use the default cdn url.
         */
        "base"?: string | null;
        /**
          * When set to `true`, the icon will be flipped horizontally.
         */
        "flipH"?: boolean;
        /**
          * When set to `true`, the icon will be flipped vertically.
         */
        "flipV"?: boolean;
        /**
          * The name/id of the icon (e.g. 1000, 1001, ...).
         */
        "name": string;
        /**
          * The number of degree for the css rotate transformation.
         */
        "rotate"?: number | null;
        /**
          * The number for the css scale transformation.
         */
        "scale"?: number | null;
    }
    interface PostTabHeader {
        /**
          * If `true`, the header is active and its corresponding panel is visible
         */
        "active"?: boolean;
        /**
          * An event emitted whenever the tab header becomes active. The payload is the index of the tab.
         */
        "onActivated"?: (event: PostTabHeaderCustomEvent<number>) => void;
        /**
          * An event emitted whenever the tab header becomes inactive. The payload is the index of the tab.
         */
        "onDeactivated"?: (event: PostTabHeaderCustomEvent<number>) => void;
    }
    interface PostTabPanel {
    }
    interface PostTabs {
        /**
          * An event emitted after the active nav changes. The payload is the index of the newly active tab.
         */
        "onTabChange"?: (event: PostTabsCustomEvent<number>) => void;
    }
    interface IntrinsicElements {
        "post-collapsible": PostCollapsible;
        "post-icon": PostIcon;
        "post-tab-header": PostTabHeader;
        "post-tab-panel": PostTabPanel;
        "post-tabs": PostTabs;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "post-collapsible": LocalJSX.PostCollapsible & JSXBase.HTMLAttributes<HTMLPostCollapsibleElement>;
            /**
             * @class PostIcon - representing a stencil component
             */
            "post-icon": LocalJSX.PostIcon & JSXBase.HTMLAttributes<HTMLPostIconElement>;
            "post-tab-header": LocalJSX.PostTabHeader & JSXBase.HTMLAttributes<HTMLPostTabHeaderElement>;
            "post-tab-panel": LocalJSX.PostTabPanel & JSXBase.HTMLAttributes<HTMLPostTabPanelElement>;
            "post-tabs": LocalJSX.PostTabs & JSXBase.HTMLAttributes<HTMLPostTabsElement>;
        }
    }
}
