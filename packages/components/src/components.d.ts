/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { HeadingLevel } from "./types/index";
import { AlertType } from "./components/post-alert/alert-types";
import { Placement } from "@floating-ui/dom";
export { HeadingLevel } from "./types/index";
export { AlertType } from "./components/post-alert/alert-types";
export { Placement } from "@floating-ui/dom";
export namespace Components {
    interface PostAccordion {
        /**
          * Collapses all `post-accordion-item`.
         */
        "collapseAll": () => Promise<void>;
        /**
          * Expands all `post-accordion-item`.  If `multiple="true"` is not set and all items are closed, it will open the first one. Otherwise, it will keep the opened one.
         */
        "expandAll": () => Promise<void>;
        /**
          * Defines the hierarchical level of the `post-accordion-item` headers within the headings structure.
         */
        "headingLevel": HeadingLevel;
        /**
          * If `true`, multiple `post-accordion-item` can be open at the same time.
         */
        "multiple": boolean;
        /**
          * Toggles the `post-accordion-item` with the given id.
         */
        "toggle": (id: string) => Promise<void>;
    }
    interface PostAccordionItem {
        /**
          * If `true`, the element is collapsed otherwise it is displayed.
         */
        "collapsed"?: boolean;
        /**
          * Defines the hierarchical level of the accordion item header within the headings structure.
          * @deprecated set the `heading-level` property on the parent `post-accordion` instead.
         */
        "headingLevel"?: HeadingLevel;
        /**
          * Triggers the collapse programmatically.
         */
        "toggle": (force?: boolean) => Promise<boolean>;
    }
    interface PostAlert {
        /**
          * Triggers alert dismissal programmatically (same as clicking on the close button (×)).
         */
        "dismiss": () => Promise<void>;
        /**
          * The label to use for the close button of a dismissible alert.
         */
        "dismissLabel": string;
        /**
          * If `true`, a close button (×) is displayed and the alert can be dismissed by the user.
         */
        "dismissible": boolean;
        /**
          * If `true`, the alert is positioned at the bottom of the window, from edge to edge.
         */
        "fixed": boolean;
        /**
          * The icon to display in the alert. By default, the icon depends on the alert type.  If `none`, no icon is displayed.
         */
        "icon": string;
        /**
          * The type of the alert.
         */
        "type": AlertType;
    }
    interface PostAvatar {
        /**
          * Defines the users email address associated with a gravatar profile picture.
         */
        "email"?: string;
        /**
          * Defines the users firstname.
         */
        "firstname": string;
        /**
          * Defines the users lastname.
         */
        "lastname"?: string;
        /**
          * Defines the company internal userId.<div className="mb-1 alert alert-warning alert-sm">Can only be used on post.ch domains!</div>
         */
        "userid"?: string;
    }
    interface PostBreadcrumbItem {
        /**
          * The optional URL to which the breadcrumb item will link.
         */
        "url"?: string | URL;
    }
    /**
     * @class PostCardControl - representing a stencil component
     */
    interface PostCardControl {
        /**
          * Defines the `checked` attribute of the control. If `true`, the control is selected at its value will be included in the forms' data.
         */
        "checked": boolean;
        /**
          * Defines the description in the control-label.
         */
        "description": string;
        /**
          * Defines the `disabled` attribute of the control. If `true`, the user can not interact with the control and the controls value will not be included in the forms' data.
         */
        "disabled": boolean;
        /**
          * A hidden public method to reset the group controls `checked` state to `false`.
         */
        "groupReset": () => Promise<void>;
        /**
          * Defines the icon `name` inside the card. <span className="alert alert-sm alert-info">If not set the icon will not show up.</span>
         */
        "icon": string;
        /**
          * Defines the text in the control-label.
         */
        "label": string;
        /**
          * Defines the `name` attribute of the control. <span className="alert alert-sm alert-info">This is a required property, when the control should participate in a native `form`. If not specified, a native `form` will never contain this controls value.</span> <span className="alert alert-sm alert-info">This is a required property, when the control is used with type `radio`.</span>
         */
        "name": string;
        /**
          * A public method to reset the controls `checked` and `validity` state. The validity state is set to `null`, so it's neither valid nor invalid.
         */
        "reset": () => Promise<void>;
        /**
          * Defines the `type` attribute of the control.
         */
        "type": 'checkbox' | 'radio';
        /**
          * Defines the validation `validity` of the control. To reset validity to an undefined state, simply remove the attribute from the control.
         */
        "validity": null | 'true' | 'false';
        /**
          * Defines the `value` attribute of the control. <span className="alert alert-sm alert-info">This is a required property, when the control is used with type `radio`.</span>
         */
        "value": string;
    }
    interface PostCollapsible {
        /**
          * If `true`, the element is collapsed otherwise it is displayed.
         */
        "collapsed"?: boolean;
        /**
          * Triggers the collapse programmatically.  If there is a collapsing transition running already, it will be reversed.
         */
        "toggle": (open?: boolean) => Promise<boolean>;
    }
    interface PostCollapsibleTrigger {
        /**
          * Link the trigger to a post-collapsible with this id
         */
        "for": string;
        /**
          * Update the "aria-controls" and "aria-expanded" attributes on the trigger button
         */
        "update": () => Promise<void>;
    }
    /**
     * @class PostIcon - representing a stencil component
     */
    interface PostIcon {
        /**
          * The name of the animation.
         */
        "animation"?: Animation | null;
        /**
          * The base path, where the icons are located (must be a public url).<br/>Leave this field empty to use the default cdn url.
         */
        "base"?: string | null;
        /**
          * When set to `true`, the icon will be flipped horizontally.
         */
        "flipH"?: boolean;
        /**
          * When set to `true`, the icon will be flipped vertically.
         */
        "flipV"?: boolean;
        /**
          * The name/id of the icon (e.g. 1000, 1001, ...).
         */
        "name": string;
        /**
          * The number of degree for the css rotate transformation.
         */
        "rotate"?: number | null;
        /**
          * The number for the css scale transformation.
         */
        "scale"?: number | null;
    }
    interface PostLanguageOption {
        /**
          * If set to `true`, the language option is considered the current language for the page.
         */
        "active": boolean;
        /**
          * The ISO 639 language code, formatted according to [RFC 5646 (also known as BCP 47)](https://datatracker.ietf.org/doc/html/rfc5646). For example, "de".
         */
        "code": string;
        /**
          * The full name of the language. For example, "Deutsch".
         */
        "name": string;
        /**
          * Selects the language option programmatically.
         */
        "select": () => Promise<void>;
        /**
          * The URL used for the href attribute of the internal anchor. This field is optional; if not provided, a button will be used internally instead of an anchor.
         */
        "url": string;
    }
    interface PostList {
        /**
          * The list can become horizontal by setting `horizontal="true"` or just `horizontal`
         */
        "horizontal": boolean;
        /**
          * If `true`, the list title will be hidden. Otherwise, it will be displayed.`
         */
        "titleHidden": boolean;
    }
    interface PostListItem {
    }
    interface PostLogo {
        /**
          * The URL to which the user is redirected upon clicking the logo.
         */
        "url": string | URL;
    }
    interface PostPopover {
        /**
          * Show a little indicator arrow
         */
        "arrow"?: boolean;
        /**
          * Define the caption of the close button for assistive technology
         */
        "closeButtonCaption": string;
        /**
          * Programmatically hide this popover
         */
        "hide": () => Promise<void>;
        /**
          * Defines the placement of the popover according to the floating-ui options available at https://floating-ui.com/docs/computePosition#placement. Popoverss are automatically flipped to the opposite side if there is not enough available space and are shifted towards the viewport if they would overlap edge boundaries.
         */
        "placement"?: Placement;
        /**
          * Programmatically display the popover
          * @param target An element with [data-popover-target="id"] where the popover should be shown
         */
        "show": (target: HTMLElement) => Promise<void>;
        /**
          * Toggle popover display
          * @param target An element with [data-popover-target="id"] where the popover should be anchored to
          * @param force Pass true to always show or false to always hide
         */
        "toggle": (target: HTMLElement, force?: boolean) => Promise<void>;
    }
    interface PostPopovercontainer {
        /**
          * Wheter or not to display a little pointer arrow
         */
        "arrow"?: boolean;
        /**
          * Gap between the edge of the page and the popover
         */
        "edgeGap"?: number;
        /**
          * Programmatically hide this tooltip
         */
        "hide": () => Promise<void>;
        /**
          * Defines the placement of the tooltip according to the floating-ui options available at https://floating-ui.com/docs/computePosition#placement. Tooltips are automatically flipped to the opposite side if there is not enough available space and are shifted towards the viewport if they would overlap edge boundaries.
         */
        "placement"?: Placement;
        /**
          * Programmatically display the tooltip
          * @param target An element with [data-tooltip-target="id"] where the tooltip should be shown
         */
        "show": (target: HTMLElement) => Promise<void>;
        /**
          * Toggle tooltip display
          * @param target An element with [data-tooltip-target="id"] where the tooltip should be shown
          * @param force Pass true to always show or false to always hide
         */
        "toggle": (target: HTMLElement, force?: boolean) => Promise<boolean>;
    }
    interface PostRating {
        /**
          * Defines the rating that the component should show.
         */
        "currentRating": number;
        /**
          * Defines a hidden label for the component.
         */
        "label": string;
        /**
          * Defines if the component is readonly or not. This usually should be used together with the `currentRating` property.
         */
        "readonly": boolean;
        /**
          * Defines the total amount of stars rendered in the component.
         */
        "stars": number;
    }
    interface PostTabHeader {
        /**
          * The name of the panel controlled by the tab header.
         */
        "panel": HTMLPostTabPanelElement['name'];
    }
    interface PostTabPanel {
        /**
          * The name of the panel, used to associate it with a tab header.
         */
        "name": string;
    }
    interface PostTabs {
        /**
          * The name of the panel that is initially shown. If not specified, it defaults to the panel associated with the first tab.  **Changing this value after initialization has no effect.**
         */
        "activePanel": HTMLPostTabPanelElement['name'];
        /**
          * Shows the panel with the given name and selects its associated tab. Any other panel that was previously shown becomes hidden and its associated tab is unselected.
         */
        "show": (panelName: string) => Promise<void>;
    }
    interface PostTag {
        /**
          * Defines the icon `name` inside of the component. <span className="alert alert-sm alert-info">If not set the icon will not show up.</span> To learn which icons are available, please visit our <a href="/?path=/docs/5704bdc4-c5b5-45e6-b123-c54d01fce2f1--docs">icon library</a>.
         */
        "icon": null | string;
        /**
          * Defines the size of the component.
         */
        "size": null | 'sm';
        /**
          * Defines the color variant of the component.
         */
        "variant": 'white' | 'info' | 'success' | 'error' | 'warning' | 'yellow';
    }
    interface PostTooltip {
        /**
          * Wheter or not to display a little pointer arrow
         */
        "arrow"?: boolean;
        /**
          * If `true`, the tooltip is displayed a few milliseconds after it is triggered
         */
        "delayed": boolean;
        /**
          * Programmatically hide this tooltip
         */
        "hide": () => Promise<void>;
        /**
          * Defines the placement of the tooltip according to the floating-ui options available at https://floating-ui.com/docs/computePosition#placement. Tooltips are automatically flipped to the opposite side if there is not enough available space and are shifted towards the viewport if they would overlap edge boundaries.
         */
        "placement"?: Placement;
        /**
          * Programmatically display the tooltip
          * @param target An element with [data-tooltip-target="id"] where the tooltip should be shown
          * @param triggeredByFocus A boolean indicating if the tooltip was triggered by a focus event.
         */
        "show": (target: HTMLElement, triggeredByFocus?: boolean) => Promise<void>;
        /**
          * Toggle tooltip display
          * @param target An element with [data-tooltip-target="id"] where the tooltip should be shown
          * @param force Pass true to always show or false to always hide
         */
        "toggle": (target: HTMLElement, force?: boolean) => Promise<void>;
    }
}
export interface PostAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPostAlertElement;
}
export interface PostCardControlCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPostCardControlElement;
}
export interface PostCollapsibleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPostCollapsibleElement;
}
export interface PostLanguageOptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPostLanguageOptionElement;
}
export interface PostPopovercontainerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPostPopovercontainerElement;
}
export interface PostRatingCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPostRatingElement;
}
export interface PostTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPostTabsElement;
}
declare global {
    interface HTMLPostAccordionElement extends Components.PostAccordion, HTMLStencilElement {
    }
    var HTMLPostAccordionElement: {
        prototype: HTMLPostAccordionElement;
        new (): HTMLPostAccordionElement;
    };
    interface HTMLPostAccordionItemElement extends Components.PostAccordionItem, HTMLStencilElement {
    }
    var HTMLPostAccordionItemElement: {
        prototype: HTMLPostAccordionItemElement;
        new (): HTMLPostAccordionItemElement;
    };
    interface HTMLPostAlertElementEventMap {
        "postDismissed": void;
    }
    interface HTMLPostAlertElement extends Components.PostAlert, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPostAlertElementEventMap>(type: K, listener: (this: HTMLPostAlertElement, ev: PostAlertCustomEvent<HTMLPostAlertElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPostAlertElementEventMap>(type: K, listener: (this: HTMLPostAlertElement, ev: PostAlertCustomEvent<HTMLPostAlertElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPostAlertElement: {
        prototype: HTMLPostAlertElement;
        new (): HTMLPostAlertElement;
    };
    interface HTMLPostAvatarElement extends Components.PostAvatar, HTMLStencilElement {
    }
    var HTMLPostAvatarElement: {
        prototype: HTMLPostAvatarElement;
        new (): HTMLPostAvatarElement;
    };
    interface HTMLPostBreadcrumbItemElement extends Components.PostBreadcrumbItem, HTMLStencilElement {
    }
    var HTMLPostBreadcrumbItemElement: {
        prototype: HTMLPostBreadcrumbItemElement;
        new (): HTMLPostBreadcrumbItemElement;
    };
    interface HTMLPostCardControlElementEventMap {
        "postInput": { state: boolean; value: string };
        "postChange": { state: boolean; value: string };
    }
    /**
     * @class PostCardControl - representing a stencil component
     */
    interface HTMLPostCardControlElement extends Components.PostCardControl, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPostCardControlElementEventMap>(type: K, listener: (this: HTMLPostCardControlElement, ev: PostCardControlCustomEvent<HTMLPostCardControlElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPostCardControlElementEventMap>(type: K, listener: (this: HTMLPostCardControlElement, ev: PostCardControlCustomEvent<HTMLPostCardControlElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPostCardControlElement: {
        prototype: HTMLPostCardControlElement;
        new (): HTMLPostCardControlElement;
    };
    interface HTMLPostCollapsibleElementEventMap {
        "postToggle": boolean;
    }
    interface HTMLPostCollapsibleElement extends Components.PostCollapsible, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPostCollapsibleElementEventMap>(type: K, listener: (this: HTMLPostCollapsibleElement, ev: PostCollapsibleCustomEvent<HTMLPostCollapsibleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPostCollapsibleElementEventMap>(type: K, listener: (this: HTMLPostCollapsibleElement, ev: PostCollapsibleCustomEvent<HTMLPostCollapsibleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPostCollapsibleElement: {
        prototype: HTMLPostCollapsibleElement;
        new (): HTMLPostCollapsibleElement;
    };
    interface HTMLPostCollapsibleTriggerElement extends Components.PostCollapsibleTrigger, HTMLStencilElement {
    }
    var HTMLPostCollapsibleTriggerElement: {
        prototype: HTMLPostCollapsibleTriggerElement;
        new (): HTMLPostCollapsibleTriggerElement;
    };
    /**
     * @class PostIcon - representing a stencil component
     */
    interface HTMLPostIconElement extends Components.PostIcon, HTMLStencilElement {
    }
    var HTMLPostIconElement: {
        prototype: HTMLPostIconElement;
        new (): HTMLPostIconElement;
    };
    interface HTMLPostLanguageOptionElementEventMap {
        "postChange": string;
    }
    interface HTMLPostLanguageOptionElement extends Components.PostLanguageOption, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPostLanguageOptionElementEventMap>(type: K, listener: (this: HTMLPostLanguageOptionElement, ev: PostLanguageOptionCustomEvent<HTMLPostLanguageOptionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPostLanguageOptionElementEventMap>(type: K, listener: (this: HTMLPostLanguageOptionElement, ev: PostLanguageOptionCustomEvent<HTMLPostLanguageOptionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPostLanguageOptionElement: {
        prototype: HTMLPostLanguageOptionElement;
        new (): HTMLPostLanguageOptionElement;
    };
    interface HTMLPostListElement extends Components.PostList, HTMLStencilElement {
    }
    var HTMLPostListElement: {
        prototype: HTMLPostListElement;
        new (): HTMLPostListElement;
    };
    interface HTMLPostListItemElement extends Components.PostListItem, HTMLStencilElement {
    }
    var HTMLPostListItemElement: {
        prototype: HTMLPostListItemElement;
        new (): HTMLPostListItemElement;
    };
    interface HTMLPostLogoElement extends Components.PostLogo, HTMLStencilElement {
    }
    var HTMLPostLogoElement: {
        prototype: HTMLPostLogoElement;
        new (): HTMLPostLogoElement;
    };
    interface HTMLPostPopoverElement extends Components.PostPopover, HTMLStencilElement {
    }
    var HTMLPostPopoverElement: {
        prototype: HTMLPostPopoverElement;
        new (): HTMLPostPopoverElement;
    };
    interface HTMLPostPopovercontainerElementEventMap {
        "postToggle": boolean;
    }
    interface HTMLPostPopovercontainerElement extends Components.PostPopovercontainer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPostPopovercontainerElementEventMap>(type: K, listener: (this: HTMLPostPopovercontainerElement, ev: PostPopovercontainerCustomEvent<HTMLPostPopovercontainerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPostPopovercontainerElementEventMap>(type: K, listener: (this: HTMLPostPopovercontainerElement, ev: PostPopovercontainerCustomEvent<HTMLPostPopovercontainerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPostPopovercontainerElement: {
        prototype: HTMLPostPopovercontainerElement;
        new (): HTMLPostPopovercontainerElement;
    };
    interface HTMLPostRatingElementEventMap {
        "postInput": { value: number };
        "postChange": { value: number };
    }
    interface HTMLPostRatingElement extends Components.PostRating, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPostRatingElementEventMap>(type: K, listener: (this: HTMLPostRatingElement, ev: PostRatingCustomEvent<HTMLPostRatingElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPostRatingElementEventMap>(type: K, listener: (this: HTMLPostRatingElement, ev: PostRatingCustomEvent<HTMLPostRatingElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPostRatingElement: {
        prototype: HTMLPostRatingElement;
        new (): HTMLPostRatingElement;
    };
    interface HTMLPostTabHeaderElement extends Components.PostTabHeader, HTMLStencilElement {
    }
    var HTMLPostTabHeaderElement: {
        prototype: HTMLPostTabHeaderElement;
        new (): HTMLPostTabHeaderElement;
    };
    interface HTMLPostTabPanelElement extends Components.PostTabPanel, HTMLStencilElement {
    }
    var HTMLPostTabPanelElement: {
        prototype: HTMLPostTabPanelElement;
        new (): HTMLPostTabPanelElement;
    };
    interface HTMLPostTabsElementEventMap {
        "postChange": HTMLPostTabPanelElement['name'];
    }
    interface HTMLPostTabsElement extends Components.PostTabs, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPostTabsElementEventMap>(type: K, listener: (this: HTMLPostTabsElement, ev: PostTabsCustomEvent<HTMLPostTabsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPostTabsElementEventMap>(type: K, listener: (this: HTMLPostTabsElement, ev: PostTabsCustomEvent<HTMLPostTabsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPostTabsElement: {
        prototype: HTMLPostTabsElement;
        new (): HTMLPostTabsElement;
    };
    interface HTMLPostTagElement extends Components.PostTag, HTMLStencilElement {
    }
    var HTMLPostTagElement: {
        prototype: HTMLPostTagElement;
        new (): HTMLPostTagElement;
    };
    interface HTMLPostTooltipElement extends Components.PostTooltip, HTMLStencilElement {
    }
    var HTMLPostTooltipElement: {
        prototype: HTMLPostTooltipElement;
        new (): HTMLPostTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "post-accordion": HTMLPostAccordionElement;
        "post-accordion-item": HTMLPostAccordionItemElement;
        "post-alert": HTMLPostAlertElement;
        "post-avatar": HTMLPostAvatarElement;
        "post-breadcrumb-item": HTMLPostBreadcrumbItemElement;
        "post-card-control": HTMLPostCardControlElement;
        "post-collapsible": HTMLPostCollapsibleElement;
        "post-collapsible-trigger": HTMLPostCollapsibleTriggerElement;
        "post-icon": HTMLPostIconElement;
        "post-language-option": HTMLPostLanguageOptionElement;
        "post-list": HTMLPostListElement;
        "post-list-item": HTMLPostListItemElement;
        "post-logo": HTMLPostLogoElement;
        "post-popover": HTMLPostPopoverElement;
        "post-popovercontainer": HTMLPostPopovercontainerElement;
        "post-rating": HTMLPostRatingElement;
        "post-tab-header": HTMLPostTabHeaderElement;
        "post-tab-panel": HTMLPostTabPanelElement;
        "post-tabs": HTMLPostTabsElement;
        "post-tag": HTMLPostTagElement;
        "post-tooltip": HTMLPostTooltipElement;
    }
}
declare namespace LocalJSX {
    interface PostAccordion {
        /**
          * Defines the hierarchical level of the `post-accordion-item` headers within the headings structure.
         */
        "headingLevel": HeadingLevel;
        /**
          * If `true`, multiple `post-accordion-item` can be open at the same time.
         */
        "multiple"?: boolean;
    }
    interface PostAccordionItem {
        /**
          * If `true`, the element is collapsed otherwise it is displayed.
         */
        "collapsed"?: boolean;
        /**
          * Defines the hierarchical level of the accordion item header within the headings structure.
          * @deprecated set the `heading-level` property on the parent `post-accordion` instead.
         */
        "headingLevel"?: HeadingLevel;
    }
    interface PostAlert {
        /**
          * The label to use for the close button of a dismissible alert.
         */
        "dismissLabel"?: string;
        /**
          * If `true`, a close button (×) is displayed and the alert can be dismissed by the user.
         */
        "dismissible"?: boolean;
        /**
          * If `true`, the alert is positioned at the bottom of the window, from edge to edge.
         */
        "fixed"?: boolean;
        /**
          * The icon to display in the alert. By default, the icon depends on the alert type.  If `none`, no icon is displayed.
         */
        "icon"?: string;
        /**
          * An event emitted when the alert element is dismissed, after the transition. It has no payload and only relevant for dismissible alerts.
         */
        "onPostDismissed"?: (event: PostAlertCustomEvent<void>) => void;
        /**
          * The type of the alert.
         */
        "type"?: AlertType;
    }
    interface PostAvatar {
        /**
          * Defines the users email address associated with a gravatar profile picture.
         */
        "email"?: string;
        /**
          * Defines the users firstname.
         */
        "firstname": string;
        /**
          * Defines the users lastname.
         */
        "lastname"?: string;
        /**
          * Defines the company internal userId.<div className="mb-1 alert alert-warning alert-sm">Can only be used on post.ch domains!</div>
         */
        "userid"?: string;
    }
    interface PostBreadcrumbItem {
        /**
          * The optional URL to which the breadcrumb item will link.
         */
        "url"?: string | URL;
    }
    /**
     * @class PostCardControl - representing a stencil component
     */
    interface PostCardControl {
        /**
          * Defines the `checked` attribute of the control. If `true`, the control is selected at its value will be included in the forms' data.
         */
        "checked"?: boolean;
        /**
          * Defines the description in the control-label.
         */
        "description"?: string;
        /**
          * Defines the `disabled` attribute of the control. If `true`, the user can not interact with the control and the controls value will not be included in the forms' data.
         */
        "disabled"?: boolean;
        /**
          * Defines the icon `name` inside the card. <span className="alert alert-sm alert-info">If not set the icon will not show up.</span>
         */
        "icon"?: string;
        /**
          * Defines the text in the control-label.
         */
        "label": string;
        /**
          * Defines the `name` attribute of the control. <span className="alert alert-sm alert-info">This is a required property, when the control should participate in a native `form`. If not specified, a native `form` will never contain this controls value.</span> <span className="alert alert-sm alert-info">This is a required property, when the control is used with type `radio`.</span>
         */
        "name"?: string;
        /**
          * An event emitted whenever the components checked state is toggled. The event payload (emitted under `event.detail.state`) is a boolean: `true` if the component is checked, `false` if it is unchecked. <span className="alert alert-sm alert-info">If the component is used with type `radio`, it will only emit this event, when the checked state is changing to `true`.</span>
         */
        "onPostChange"?: (event: PostCardControlCustomEvent<{ state: boolean; value: string }>) => void;
        /**
          * An event emitted whenever the components checked state is toggled. The event payload (emitted under `event.detail.state`) is a boolean: `true` if the component is checked, `false` if it is unchecked.
         */
        "onPostInput"?: (event: PostCardControlCustomEvent<{ state: boolean; value: string }>) => void;
        /**
          * Defines the `type` attribute of the control.
         */
        "type": 'checkbox' | 'radio';
        /**
          * Defines the validation `validity` of the control. To reset validity to an undefined state, simply remove the attribute from the control.
         */
        "validity"?: null | 'true' | 'false';
        /**
          * Defines the `value` attribute of the control. <span className="alert alert-sm alert-info">This is a required property, when the control is used with type `radio`.</span>
         */
        "value"?: string;
    }
    interface PostCollapsible {
        /**
          * If `true`, the element is collapsed otherwise it is displayed.
         */
        "collapsed"?: boolean;
        /**
          * An event emitted when the collapse element is shown or hidden, before the transition.  The event payload is a boolean: `true` if the collapsible was opened, `false` if it was closed.
         */
        "onPostToggle"?: (event: PostCollapsibleCustomEvent<boolean>) => void;
    }
    interface PostCollapsibleTrigger {
        /**
          * Link the trigger to a post-collapsible with this id
         */
        "for"?: string;
    }
    /**
     * @class PostIcon - representing a stencil component
     */
    interface PostIcon {
        /**
          * The name of the animation.
         */
        "animation"?: Animation | null;
        /**
          * The base path, where the icons are located (must be a public url).<br/>Leave this field empty to use the default cdn url.
         */
        "base"?: string | null;
        /**
          * When set to `true`, the icon will be flipped horizontally.
         */
        "flipH"?: boolean;
        /**
          * When set to `true`, the icon will be flipped vertically.
         */
        "flipV"?: boolean;
        /**
          * The name/id of the icon (e.g. 1000, 1001, ...).
         */
        "name": string;
        /**
          * The number of degree for the css rotate transformation.
         */
        "rotate"?: number | null;
        /**
          * The number for the css scale transformation.
         */
        "scale"?: number | null;
    }
    interface PostLanguageOption {
        /**
          * If set to `true`, the language option is considered the current language for the page.
         */
        "active"?: boolean;
        /**
          * The ISO 639 language code, formatted according to [RFC 5646 (also known as BCP 47)](https://datatracker.ietf.org/doc/html/rfc5646). For example, "de".
         */
        "code": string;
        /**
          * The full name of the language. For example, "Deutsch".
         */
        "name"?: string;
        /**
          * An event emitted when the language option is clicked. The payload is the ISO 639 code of the language.
         */
        "onPostChange"?: (event: PostLanguageOptionCustomEvent<string>) => void;
        /**
          * The URL used for the href attribute of the internal anchor. This field is optional; if not provided, a button will be used internally instead of an anchor.
         */
        "url"?: string;
    }
    interface PostList {
        /**
          * The list can become horizontal by setting `horizontal="true"` or just `horizontal`
         */
        "horizontal"?: boolean;
        /**
          * If `true`, the list title will be hidden. Otherwise, it will be displayed.`
         */
        "titleHidden"?: boolean;
    }
    interface PostListItem {
    }
    interface PostLogo {
        /**
          * The URL to which the user is redirected upon clicking the logo.
         */
        "url"?: string | URL;
    }
    interface PostPopover {
        /**
          * Show a little indicator arrow
         */
        "arrow"?: boolean;
        /**
          * Define the caption of the close button for assistive technology
         */
        "closeButtonCaption": string;
        /**
          * Defines the placement of the popover according to the floating-ui options available at https://floating-ui.com/docs/computePosition#placement. Popoverss are automatically flipped to the opposite side if there is not enough available space and are shifted towards the viewport if they would overlap edge boundaries.
         */
        "placement"?: Placement;
    }
    interface PostPopovercontainer {
        /**
          * Wheter or not to display a little pointer arrow
         */
        "arrow"?: boolean;
        /**
          * Gap between the edge of the page and the popover
         */
        "edgeGap"?: number;
        /**
          * Fires whenever the popover gets shown or hidden, passing the new state in event.details as a boolean
         */
        "onPostToggle"?: (event: PostPopovercontainerCustomEvent<boolean>) => void;
        /**
          * Defines the placement of the tooltip according to the floating-ui options available at https://floating-ui.com/docs/computePosition#placement. Tooltips are automatically flipped to the opposite side if there is not enough available space and are shifted towards the viewport if they would overlap edge boundaries.
         */
        "placement"?: Placement;
    }
    interface PostRating {
        /**
          * Defines the rating that the component should show.
         */
        "currentRating"?: number;
        /**
          * Defines a hidden label for the component.
         */
        "label"?: string;
        /**
          * An event emitted whenever the component's value has changed (on blur). The event payload can be used like so: `event.detail.value`.
         */
        "onPostChange"?: (event: PostRatingCustomEvent<{ value: number }>) => void;
        /**
          * An event emitted whenever the component's value has changed (on input). The event payload can be used like so: `event.detail.value`.
         */
        "onPostInput"?: (event: PostRatingCustomEvent<{ value: number }>) => void;
        /**
          * Defines if the component is readonly or not. This usually should be used together with the `currentRating` property.
         */
        "readonly"?: boolean;
        /**
          * Defines the total amount of stars rendered in the component.
         */
        "stars"?: number;
    }
    interface PostTabHeader {
        /**
          * The name of the panel controlled by the tab header.
         */
        "panel"?: HTMLPostTabPanelElement['name'];
    }
    interface PostTabPanel {
        /**
          * The name of the panel, used to associate it with a tab header.
         */
        "name"?: string;
    }
    interface PostTabs {
        /**
          * The name of the panel that is initially shown. If not specified, it defaults to the panel associated with the first tab.  **Changing this value after initialization has no effect.**
         */
        "activePanel"?: HTMLPostTabPanelElement['name'];
        /**
          * An event emitted after the active tab changes, when the fade in transition of its associated panel is finished. The payload is the name of the newly shown panel.
         */
        "onPostChange"?: (event: PostTabsCustomEvent<HTMLPostTabPanelElement['name']>) => void;
    }
    interface PostTag {
        /**
          * Defines the icon `name` inside of the component. <span className="alert alert-sm alert-info">If not set the icon will not show up.</span> To learn which icons are available, please visit our <a href="/?path=/docs/5704bdc4-c5b5-45e6-b123-c54d01fce2f1--docs">icon library</a>.
         */
        "icon"?: null | string;
        /**
          * Defines the size of the component.
         */
        "size"?: null | 'sm';
        /**
          * Defines the color variant of the component.
         */
        "variant"?: 'white' | 'info' | 'success' | 'error' | 'warning' | 'yellow';
    }
    interface PostTooltip {
        /**
          * Wheter or not to display a little pointer arrow
         */
        "arrow"?: boolean;
        /**
          * If `true`, the tooltip is displayed a few milliseconds after it is triggered
         */
        "delayed"?: boolean;
        /**
          * Defines the placement of the tooltip according to the floating-ui options available at https://floating-ui.com/docs/computePosition#placement. Tooltips are automatically flipped to the opposite side if there is not enough available space and are shifted towards the viewport if they would overlap edge boundaries.
         */
        "placement"?: Placement;
    }
    interface IntrinsicElements {
        "post-accordion": PostAccordion;
        "post-accordion-item": PostAccordionItem;
        "post-alert": PostAlert;
        "post-avatar": PostAvatar;
        "post-breadcrumb-item": PostBreadcrumbItem;
        "post-card-control": PostCardControl;
        "post-collapsible": PostCollapsible;
        "post-collapsible-trigger": PostCollapsibleTrigger;
        "post-icon": PostIcon;
        "post-language-option": PostLanguageOption;
        "post-list": PostList;
        "post-list-item": PostListItem;
        "post-logo": PostLogo;
        "post-popover": PostPopover;
        "post-popovercontainer": PostPopovercontainer;
        "post-rating": PostRating;
        "post-tab-header": PostTabHeader;
        "post-tab-panel": PostTabPanel;
        "post-tabs": PostTabs;
        "post-tag": PostTag;
        "post-tooltip": PostTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "post-accordion": LocalJSX.PostAccordion & JSXBase.HTMLAttributes<HTMLPostAccordionElement>;
            "post-accordion-item": LocalJSX.PostAccordionItem & JSXBase.HTMLAttributes<HTMLPostAccordionItemElement>;
            "post-alert": LocalJSX.PostAlert & JSXBase.HTMLAttributes<HTMLPostAlertElement>;
            "post-avatar": LocalJSX.PostAvatar & JSXBase.HTMLAttributes<HTMLPostAvatarElement>;
            "post-breadcrumb-item": LocalJSX.PostBreadcrumbItem & JSXBase.HTMLAttributes<HTMLPostBreadcrumbItemElement>;
            /**
             * @class PostCardControl - representing a stencil component
             */
            "post-card-control": LocalJSX.PostCardControl & JSXBase.HTMLAttributes<HTMLPostCardControlElement>;
            "post-collapsible": LocalJSX.PostCollapsible & JSXBase.HTMLAttributes<HTMLPostCollapsibleElement>;
            "post-collapsible-trigger": LocalJSX.PostCollapsibleTrigger & JSXBase.HTMLAttributes<HTMLPostCollapsibleTriggerElement>;
            /**
             * @class PostIcon - representing a stencil component
             */
            "post-icon": LocalJSX.PostIcon & JSXBase.HTMLAttributes<HTMLPostIconElement>;
            "post-language-option": LocalJSX.PostLanguageOption & JSXBase.HTMLAttributes<HTMLPostLanguageOptionElement>;
            "post-list": LocalJSX.PostList & JSXBase.HTMLAttributes<HTMLPostListElement>;
            "post-list-item": LocalJSX.PostListItem & JSXBase.HTMLAttributes<HTMLPostListItemElement>;
            "post-logo": LocalJSX.PostLogo & JSXBase.HTMLAttributes<HTMLPostLogoElement>;
            "post-popover": LocalJSX.PostPopover & JSXBase.HTMLAttributes<HTMLPostPopoverElement>;
            "post-popovercontainer": LocalJSX.PostPopovercontainer & JSXBase.HTMLAttributes<HTMLPostPopovercontainerElement>;
            "post-rating": LocalJSX.PostRating & JSXBase.HTMLAttributes<HTMLPostRatingElement>;
            "post-tab-header": LocalJSX.PostTabHeader & JSXBase.HTMLAttributes<HTMLPostTabHeaderElement>;
            "post-tab-panel": LocalJSX.PostTabPanel & JSXBase.HTMLAttributes<HTMLPostTabPanelElement>;
            "post-tabs": LocalJSX.PostTabs & JSXBase.HTMLAttributes<HTMLPostTabsElement>;
            "post-tag": LocalJSX.PostTag & JSXBase.HTMLAttributes<HTMLPostTagElement>;
            "post-tooltip": LocalJSX.PostTooltip & JSXBase.HTMLAttributes<HTMLPostTooltipElement>;
        }
    }
}
