@use '@swisspost/design-system-styles/core' as post;
@use '@swisspost/design-system-styles/components/form-check';

:host {
  display: flex;
  width: 100%;
}

:host-context(fieldset) {
  &:host(:not(:last-child)) {
    .card-control {
      margin-bottom: post.$size-regular;
    }
  }
}

.card-control {
  --post-card-control-border-color: #{post.$gray-60};
  --post-card-control-bg: #{post.$white};
  --post-card-control-color: #{post.$gray-80};
  --post-card-control-input-border-color: #{post.$gray-80};
  --post-card-control-input-bg: #{post.$white};

  flex-basis: 100%;
  display: grid;
  grid-template: 'input label icon' 'input content icon' / min-content auto min-content;
  gap: 0 post.$size-mini;
  padding: post.$size-regular;
  background-color: var(--post-card-control-bg);
  border: post.$size-line solid var(--post-card-control-border-color);
  border-radius: post.$border-radius;
  color: var(--post-card-control-color);

  cursor: pointer;
  transition: background-color 100ms linear, border-color 100ms linear;

  .card-control--input {
    grid-area: input;
    margin: post.$size-micro 0;
    background-color: var(--post-card-control-input-bg);
    border-color: var(--post-card-control-input-border-color) !important;
    color: var(--post-card-control-input-border-color) !important;
    cursor: inherit;
    transition: border-color 100ms ease-in-out;

    &:focus,
    &:focus-visible {
      box-shadow: none;
    }
  }

  .card-control--label {
    grid-area: label;
    margin: post.$size-micro 0;
    padding: 0;
    color: inherit !important;
    pointer-events: none;
    transition-duration: 100ms;
  }

  .card-control--description {
    grid-area: label;
    font-size: 0.75rem;
  }

  .card-control--content {
    grid-area: content;
  }

  .card-control--icon {
    grid-area: icon;
    width: post.$size-big;
    height: post.$size-big;
    pointer-events: none;

    > slot {
      > * {
        width: 100%;
        height: 100%;
      }
    }
  }

  &:not(.is-disabled) {
    // order matters!
    // because we only overwrite the props, which need to be different from one selector to the other.

    &.is-checked {
      --post-card-control-border-color: #{post.$black};
      --post-card-control-bg: #{post.$yellow};
    }

    &.is-invalid {
      --post-card-control-border-color: #{post.$danger};
      --post-card-control-color: #{post.$danger};
      --post-card-control-input-border-color: #{post.$danger};
    }

    &:hover {
      --post-card-control-border-color: #{post.$gray-80};
      --post-card-control-bg: #{post.$gray-60};
      --post-card-control-color: #{post.$white};
      --post-card-control-input-border-color: #{post.$black};
    }
  }

  // show focus even if is-disabled, because aria-disabled allows focus at any moment
  &.is-focused {
    &:where(:has(.card-control--input:focus-visible)) {
      outline-offset: post.$input-focus-outline-thickness;
      outline: post.$input-focus-outline-thickness solid post.$outline-color;
    }
  }

  &.is-disabled {
    --post-card-control-border-color: #{post.$gray-60};
    --post-card-control-bg: transparent;
    --post-card-control-color: #{post.$gray-60};
    --post-card-control-input-border-color: #{post.$gray-60};
    --post-card-control-input-bg: transparent;

    border-style: dashed;
    text-decoration: line-through;
    cursor: default;

    .card-control--input {
      border-style: dashed;
    }
  }

  :host-context(:is(#{post.$dark-backgrounds})) & {
    --post-card-control-border-color: #{post.$white};
    --post-card-control-bg: transparent;
    --post-card-control-color: #{post.$white};
    --post-card-control-input-border-color: #{post.$white};
    --post-card-control-input-bg: transparent;

    &:not(.is-disabled) {
      // order matters!
      // because we only overwrite the props, which need to be different from one selector to the other.

      &.is-checked {
        --post-card-control-border-color: #{post.$yellow};
        --post-card-control-bg: #{post.$yellow};
        --post-card-control-color: #{post.$gray-80};
        --post-card-control-input-border-color: #{post.$gray-80};
        --post-card-control-input-bg: #{post.$white};

        &.is-invalid {
          --post-card-control-bg: #{post.$yellow};
        }
      }

      &.is-invalid {
        --post-card-control-border-color: #{post.$danger};
        --post-card-control-bg: #{post.$error-background};
        --post-card-control-color: #{post.$danger};
        --post-card-control-input-border-color: #{post.$danger};
        --post-card-control-input-bg: #{post.$white};
      }

      &:hover {
        --post-card-control-border-color: #{post.$black};
        --post-card-control-bg: #{post.$gray-20};
        --post-card-control-color: #{post.$black};
        --post-card-control-input-border-color: #{post.$black};
        --post-card-control-input-bg: #{post.$white};
      }
    }

    // show focus even if is-disabled, because aria-disabled allows focus at any moment
    &.is-focused {
      &:where(:has(.card-control--input:focus-visible)) {
        outline-color: post.$white;
      }
    }

    // TODO: update white alpha colors with design-system alpha colors, once they are defined
    &.is-disabled {
      --post-card-control-border-color: #{#{rgba(post.$white, 0.8)}};
      --post-card-control-bg: transparent;
      --post-card-control-color: #{#{rgba(post.$white, 0.8)}};
      --post-card-control-input-border-color: #{#{rgba(post.$white, 0.8)}};
      --post-card-control-input-bg: transparent;
    }
  }
}

// remove as soon as all browser support :host-context()
// https://caniuse.com/?search=%3Ahost-context()
:host(:not(:last-child)) {
  .card-control[data-host-context*='fieldset'] {
    margin-bottom: post.$size-regular;
  }
}

@each $bg in post.$dark-backgrounds {
  .card-control[data-host-context*='#{$bg}'] {
    --post-card-control-border-color: #{post.$white};
    --post-card-control-bg: transparent;
    --post-card-control-color: #{post.$white};
    --post-card-control-input-border-color: #{post.$white};
    --post-card-control-input-bg: transparent;

    &:not(.is-disabled) {
      // order matters!
      // because we only overwrite the props, which need to be different from one selector to the other.

      &.is-checked {
        --post-card-control-border-color: #{post.$yellow};
        --post-card-control-bg: #{post.$yellow};
        --post-card-control-color: #{post.$gray-80};
        --post-card-control-input-border-color: #{post.$gray-80};
        --post-card-control-input-bg: #{post.$white};

        &.is-invalid {
          --post-card-control-bg: #{post.$yellow};
        }
      }

      &.is-invalid {
        --post-card-control-border-color: #{post.$danger};
        --post-card-control-bg: #{post.$error-background};
        --post-card-control-color: #{post.$danger};
        --post-card-control-input-border-color: #{post.$danger};
        --post-card-control-input-bg: #{post.$white};
      }

      &:hover {
        --post-card-control-border-color: #{post.$black};
        --post-card-control-bg: #{post.$gray-20};
        --post-card-control-color: #{post.$black};
        --post-card-control-input-border-color: #{post.$black};
        --post-card-control-input-bg: #{post.$white};
      }
    }

    // show focus even if is-disabled, because aria-disabled allows focus at any moment
    &.is-focused {
      &:where(:has(.card-control--input:focus-visible)) {
        outline-color: post.$white;
      }
    }

    // TODO: update white alpha colors with design-system alpha colors, once they are defined
    &.is-disabled {
      --post-card-control-border-color: #{#{rgba(post.$white, 0.8)}};
      --post-card-control-bg: transparent;
      --post-card-control-color: #{#{rgba(post.$white, 0.8)}};
      --post-card-control-input-border-color: #{#{rgba(post.$white, 0.8)}};
      --post-card-control-input-bg: transparent;
    }
  }
}
