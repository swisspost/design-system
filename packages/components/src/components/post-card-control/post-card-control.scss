@use 'sass:list';
@use 'sass:math';
@use '@swisspost/design-system-styles/core' as post;
@use '@swisspost/design-system-styles/components/form-check';
@use '@swisspost/design-system-styles/components/checkbox';
@use '@swisspost/design-system-styles/components/radio-button';
@use '@swisspost/design-system-styles/tokens/utilities';
@use '@swisspost/design-system-styles/functions/tokens';
@use '@swisspost/design-system-styles/tokens/elements';

tokens.$default-map: utilities.$post-spacing;

/*
* There are a whole bunch of !important statements in this file.
* They are necessary and should not be removed, because we need to override the .form-check styles here.
*/

:host {
  // remove as soon as all browser support :host-context()
  // https://caniuse.com/?search=%3Ahost-context()
  --post-card-control-bg-context: #{post.$backgrounds};

  display: flex;
  width: 100%;
}

:host-context(fieldset) {
  &:host(:not(:last-child)) {
    .card-control {
      margin-block-end: tokens.get('utility-gap-16');
    }
  }
}

.card-control {
  --post-card-control-border-color: #{post.$gray-60};
  --post-card-control-bg: #{post.$white};
  --post-card-control-color: #{post.$gray-80};
  --post-card-control-input-border-color: #{post.$gray-80};
  --post-card-control-input-bg: #{post.$white};

  flex-basis: 100%;
  display: grid;
  grid-template: 'input label icon' 'input content content' / min-content auto min-content;
  align-items: center;
  gap: 0 tokens.get('utility-gap-8');
  margin: 0;
  padding: tokens.get('utility-gap-12');
  background-color: var(--post-card-control-bg);
  border: tokens.get('utility-gap-2') solid var(--post-card-control-border-color);
  border-radius: post.$border-radius;
  color: var(--post-card-control-color) !important;
  cursor: pointer;

  .card-control--input {
    grid-area: input;
    margin: tokens.get('utility-gap-4') 0;
    background-color: var(--post-card-control-input-bg) !important;
    border-color: var(--post-card-control-input-border-color) !important;
    color: var(--post-card-control-input-border-color) !important;
    cursor: inherit;
    transition: none;

    @include post.focus-style-none();

    &:hover:not([disabled]),
    &:hover:not([disabled]) ~ label.form-check-label {
      color: post.$black;
      background-color: transparent;
    }

    &:focus,
    &:focus-visible {
      box-shadow: none;
    }

    @include post.high-contrast-mode() {
      &::after {
        forced-color-adjust: none;
        border-color: transparent;
      }
    }
  }

  .card-control--label {
    grid-area: label;
    margin: tokens.get('utility-gap-4') 0;
    padding: 0 !important;
    color: tokens.get('body-color', elements.$post-body) !important;
    pointer-events: none;
    transition: none;

    &:not(:has(+ .card-control--icon)) {
      grid-area: 1 / label / 1 / icon;
    }
  }

  .card-control--description {
    grid-area: label;
    font-size: 0.75rem;
  }

  .card-control--content {
    grid-area: content;
  }

  .card-control--icon {
    grid-area: icon;
    width: tokens.get('utility-gap-32');
    height: tokens.get('utility-gap-32');
    pointer-events: none;

    > slot {
      > * {
        width: 100%;
        height: 100%;
      }
    }
  }

  &:not(.is-disabled) {
    // order matters!
    // because we only overwrite the props, which need to be different from one selector to the other.

    &.is-checked {
      --post-card-control-border-color: #{post.$black};
      --post-card-control-bg: #{post.$yellow};

      @include post.high-contrast-mode() {
        --post-card-control-border-color: FieldText;
        --post-card-control-bg: SelectedItem;
        --post-card-control-color: SelectedItemText;
        --post-card-control-input-border-color: SelectedItemText;
        --post-card-control-input-bg: SelectedItem;

        .card-control--input {
          &::after {
            background-color: var(--post-card-control-color) !important;
          }
        }
      }
    }

    &.is-invalid {
      --post-card-control-border-color: #{post.$error};
      --post-card-control-color: #{post.$error};
      --post-card-control-input-border-color: #{post.$error};
    }

    &:hover {
      --post-card-control-border-color: #{post.$gray-80};
      --post-card-control-bg: #{post.$gray-60};
      --post-card-control-color: #{post.$white};
      --post-card-control-input-border-color: #{post.$black};

      @include post.high-contrast-mode() {
        --post-card-control-border-color: Highlight;
        --post-card-control-bg: Field;
        --post-card-control-color: FieldText;
        --post-card-control-input-border-color: Highlight;
        --post-card-control-input-bg: Field;

        .card-control--input {
          &::after {
            color: FieldText;
          }
        }
      }
    }
  }

  // show focus even if is-disabled, because aria-disabled allows focus at any moment
  &.is-focused {
    &:where(:has(.card-control--input:focus-visible)) {
      outline-offset: post.$input-focus-outline-thickness;
      outline: post.$input-focus-outline-thickness solid post.$outline-color;
    }
  }

  &.is-disabled {
    --post-card-control-border-color: #{post.$gray-60};
    --post-card-control-bg: transparent;
    --post-card-control-color: #{post.$gray-60};
    --post-card-control-input-border-color: #{post.$gray-60};
    --post-card-control-input-bg: transparent;

    border-style: dashed;
    cursor: default;

    .card-control--input {
      padding: post.$form-check-input-border-width;
      border-style: dashed;
    }
  }

  @include post.high-contrast-mode() {
    --post-card-control-border-color: FieldText;
    --post-card-control-bg: Field;
    --post-card-control-color: FieldText;
    --post-card-control-input-border-color: FieldText;
    --post-card-control-input-bg: Field;

    outline: tokens.get('utility-gap-2') solid Field;
    outline-offset: calc(tokens.get('utility-gap-2') * -2);

    .card-control--input {
      outline: tokens.get('utility-gap-2') solid Field;

      // selector needed to override the .form-check styles
      &[type] {
        background-color: Field !important;
      }

      &::after {
        border-color: Field !important;
      }
    }

    .card-control--label,
    .card-control--content {
      background-color: var(--post-card-control-bg) !important;
    }

    &:not(.is-disabled) {
      &.is-checked {
        --post-card-control-border-color: FieldText;
        --post-card-control-bg: SelectedItem;
        --post-card-control-color: SelectedItemText;
        --post-card-control-input-border-color: FieldText;

        .card-control--input {
          &::after {
            background-color: FieldText !important;
          }
        }
      }

      &:hover {
        --post-card-control-border-color: Highlight;
        --post-card-control-bg: Field;
        --post-card-control-color: FieldText;
        --post-card-control-input-border-color: Highlight;
      }
    }

    &.is-disabled {
      --post-card-control-border-color: GrayText;
      --post-card-control-bg: Field;
      --post-card-control-color: FieldText;
      --post-card-control-input-border-color: GrayText;
      --post-card-control-input-bg: Field;

      .card-control--input {
        background-image: url('#{post.$form-check-input-disabled-background-url-hcm-lg}');

        &[type='radio'] {
          background-image: url('#{post.$form-check-input-radio-disabled-background-url-hcm}');
        }
      }

      &.is-checked {
        --post-card-control-bg: SelectedItem;
        --post-card-control-color: SelectedItemText;

        position: relative;
        background-color: Field;

        &::before {
          display: block;
          content: '';
          position: absolute;
          inset: tokens.get('utility-gap-2');
          background-color: SelectedItem;
          z-index: 1;
        }

        > * {
          position: relative;
          z-index: 2;
        }

        .card-control--input {
          &::after {
            background-color: FieldText !important;
          }
        }
      }
    }

    @include post.high-contrast-mode() {
      --post-card-control-border-color: GrayText;
      --post-card-control-color: GrayText;
      --post-card-control-input-border-color: GrayText;

      &.is-checked {
        --post-card-control-input-bg: field;

        position: relative;

        &::before {
          display: block;
          content: '';
          position: absolute;
          inset: tokens.get('utility-gap-2');
          border-radius: calc(tokens.get('utility-gap-2') * 0.5);
          background-color: SelectedItem;
        }

        > * {
          position: relative;
        }

        .card-control--input {
          outline: tokens.get('utility-gap-2') solid Field;
        }
      }
    }
  }

  :host-context(:is(#{post.$dark-backgrounds})) & {
    --post-card-control-border-color: #{post.$white};
    --post-card-control-bg: transparent;
    --post-card-control-color: #{post.$white};
    --post-card-control-input-border-color: #{post.$white};
    --post-card-control-input-bg: transparent;

    &:not(.is-disabled) {
      // order matters!
      // because we only overwrite the props, which need to be different from one selector to the other.

      &.is-checked {
        --post-card-control-border-color: #{post.$yellow};
        --post-card-control-bg: #{post.$yellow};
        --post-card-control-color: #{post.$gray-80};
        --post-card-control-input-border-color: #{post.$gray-80};
        --post-card-control-input-bg: #{post.$white};
      }

      &.is-invalid {
        --post-card-control-border-color: #{post.$error};
        --post-card-control-bg: #{post.$error-background};
        --post-card-control-color: #{post.$error};
        --post-card-control-input-border-color: #{post.$error};
        --post-card-control-input-bg: #{post.$white};

        &:where(.is-checked) {
          --post-card-control-bg: #{post.$yellow};
        }
      }

      &:hover {
        --post-card-control-border-color: #{post.$black};
        --post-card-control-bg: #{post.$gray-20};
        --post-card-control-color: #{post.$black};
        --post-card-control-input-border-color: #{post.$black};
        --post-card-control-input-bg: #{post.$white};

        @include post.high-contrast-mode() {
          --post-card-control-border-color: Highlight;
          --post-card-control-bg: Field;
          --post-card-control-color: FieldText;
          --post-card-control-input-border-color: Highlight;
          --post-card-control-input-bg: Field;
        }
      }
    }

    // show focus even if is-disabled, because aria-disabled allows focus at any moment
    &.is-focused {
      &:where(:has(.card-control--input:focus-visible)) {
        outline-color: post.$white;
      }
    }

    &.is-disabled {
      --post-card-control-border-color: post.$white-alpha-80;
      --post-card-control-bg: transparent;
      --post-card-control-color: post.$white-alpha-80;
      --post-card-control-input-border-color: post.$white-alpha-80;
      --post-card-control-input-bg: transparent;

      @include post.high-contrast-mode() {
        --post-card-control-border-color: GrayText;
        --post-card-control-color: GrayText;
        --post-card-control-input-border-color: GrayText;

        &.is-checked {
          --post-card-control-input-bg: Field;
        }
      }
    }

    @include post.high-contrast-mode() {
      --post-card-control-border-color: FieldText;
      --post-card-control-bg: Field;
      --post-card-control-color: FieldText;
      --post-card-control-input-border-color: FieldText;
      --post-card-control-input-bg: Field;

      &:not(.is-disabled) {
        &.is-checked {
          --post-card-control-border-color: FieldText;
          --post-card-control-bg: SelectedItem;
          --post-card-control-color: SelectedItemText;
          --post-card-control-input-border-color: FieldText;
        }

        &:hover {
          --post-card-control-border-color: Highlight;
          --post-card-control-bg: Field;
          --post-card-control-color: FieldText;
          --post-card-control-input-border-color: Highlight;
        }
      }

      &.is-disabled {
        --post-card-control-border-color: GrayText;
        --post-card-control-bg: Field;
        --post-card-control-color: FieldText;
        --post-card-control-input-border-color: GrayText;
        --post-card-control-input-bg: Field;

        &.is-checked {
          --post-card-control-bg: SelectedItem;
          --post-card-control-color: SelectedItemText;
        }
      }
    }
  }
}

// remove as soon as all browser support :host-context()
// https://caniuse.com/?search=%3Ahost-context()
:host(:not([data-context])) {
  display: none;
}

:host([data-context*='fieldset']:not(:last-child)) {
  .card-control {
    margin-block-end: tokens.get('utility-gap-16');
  }
}

$dark-bg-context: ();
@each $bg in post.$dark-backgrounds {
  $dark-bg-context: list.append($dark-bg-context, "[data-context*='#{$bg}']", $separator: comma);
}
:host(:is(#{$dark-bg-context})) {
  .card-control {
    --post-card-control-border-color: #{post.$white};
    --post-card-control-bg: transparent;
    --post-card-control-color: #{post.$white};
    --post-card-control-input-border-color: #{post.$white};
    --post-card-control-input-bg: transparent;

    &:not(.is-disabled) {
      // order matters!
      // because we only overwrite the props, which need to be different from one selector to the other.

      &.is-checked {
        --post-card-control-border-color: #{post.$yellow};
        --post-card-control-bg: #{post.$yellow};
        --post-card-control-color: #{post.$gray-80};
        --post-card-control-input-border-color: #{post.$gray-80};
        --post-card-control-input-bg: #{post.$white};
      }

      &.is-invalid {
        --post-card-control-border-color: #{post.$error};
        --post-card-control-bg: #{post.$error-background};
        --post-card-control-color: #{post.$error};
        --post-card-control-input-border-color: #{post.$error};
        --post-card-control-input-bg: #{post.$white};

        &:where(.is-checked) {
          --post-card-control-bg: #{post.$yellow};
        }
      }

      &:hover {
        --post-card-control-border-color: #{post.$black};
        --post-card-control-bg: #{post.$gray-20};
        --post-card-control-color: #{post.$black};
        --post-card-control-input-border-color: #{post.$black};
        --post-card-control-input-bg: #{post.$white};

        @include post.high-contrast-mode() {
          --post-card-control-border-color: Highlight;
          --post-card-control-bg: Field;
          --post-card-control-color: FieldText;
          --post-card-control-input-border-color: Highlight;
          --post-card-control-input-bg: Field;
        }
      }
    }

    // show focus even if is-disabled, because aria-disabled allows focus at any moment
    &.is-focused {
      &:where(:has(.card-control--input:focus-visible)) {
        outline-color: post.$white;
      }
    }

    &.is-disabled {
      --post-card-control-border-color: post.$white-alpha-80;
      --post-card-control-bg: transparent;
      --post-card-control-color: post.$white-alpha-80;
      --post-card-control-input-border-color: post.$white-alpha-80;
      --post-card-control-input-bg: transparent;

      @include post.high-contrast-mode() {
        --post-card-control-border-color: GrayText;
        --post-card-control-color: GrayText;
        --post-card-control-input-border-color: GrayText;

        &.is-checked {
          --post-card-control-input-bg: Field;
        }
      }
    }

    @include post.high-contrast-mode() {
      --post-card-control-border-color: FieldText;
      --post-card-control-bg: Field;
      --post-card-control-color: FieldText;
      --post-card-control-input-border-color: FieldText;
      --post-card-control-input-bg: Field;

      &:not(.is-disabled) {
        &.is-checked {
          --post-card-control-border-color: FieldText;
          --post-card-control-bg: SelectedItem;
          --post-card-control-color: SelectedItemText;
          --post-card-control-input-border-color: FieldText;
        }

        &:hover {
          --post-card-control-border-color: Highlight;
          --post-card-control-bg: Field;
          --post-card-control-color: FieldText;
          --post-card-control-input-border-color: Highlight;
        }
      }

      &.is-disabled {
        --post-card-control-border-color: GrayText;
        --post-card-control-bg: Field;
        --post-card-control-color: FieldText;
        --post-card-control-input-border-color: GrayText;
        --post-card-control-input-bg: Field;

        &.is-checked {
          --post-card-control-bg: SelectedItem;
          --post-card-control-color: SelectedItemText;
        }
      }
    }
  }
}
