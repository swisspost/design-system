@use "sass:map";
@use 'sass:selector';
@use 'sass:string';
@use "@swisspost/design-system-styles/variables/breakpoints";

@mixin min($point) {
  @media (min-width: map.get(breakpoints.$grid-breakpoints, $point)) {
    @content;
  }
}

@mixin max($point) {
  @media (max-width: map.get(breakpoints.$grid-breakpoints, $point) - 0.02px) {
    @content;
  }
}

@mixin between($pointA, $pointB) {
  @media (min-width: map.get(breakpoints.$grid-breakpoints, $pointA)) and (max-width: map.get(breakpoints.$grid-breakpoints, $pointB) - 0.02px) {
    @content;
  }
}

@mixin reset-visually-hidden() {
  position: static;
  width: auto;
  height: auto;
  margin: auto;
  overflow: visible;
  clip: auto;
  visibility: visible;
}

@mixin container-padding() {
  @include max(rg) {
    padding-right: 16px;
    padding-left: 16px;
  }

  @include between(rg, lg) {
    padding-right: 32px;
    padding-left: 32px;
  }

  @include min(lg) {
    padding-right: 40px;
    padding-left: 40px;
  }
}

@mixin set-custom-property($var, $value) {
  @if (type-of($value) == 'map') {
    @include _responsive-custom-property($var, $value);
  } @else {
    @include _custom-property($var, $value);
  }
}

@mixin _responsive-custom-property($var, $values) {
  $previous-value: null;
  @each $breakpoint, $value in $values {
    @if($value == $previous-value) {
      // no styles
    } @else if($breakpoint == xs) {
      @include _custom-property($var, $value);
    } @else {
      @include min($breakpoint) {
        @include _custom-property($var, $value);
      }
    }

    $previous-value: $value;
  }
}

@mixin _custom-property($var, $value) {
  $is-root: selector.is-superselector(&, ':root');
  #{$var}: if($is-root, $value, var(#{string.insert($var, "post-", 3)}, $value));
}
