@use 'sass:map';
@use '../tokens/utilities_formatted';

@use '../variables/sizing' as *;
@use '../variables/type';

/*
  Utilities are generated with our utility API using bellow $utilities map.

  The utility map contains a keyed list of utility groups which accept the following options:

  | Option            | Type     | Default value | Description                                                                                                                                                                                                                              |
  |-------------------|----------|---------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
  | property          | Required | –             | Name of the property, this can be a string or an array of strings (e.g., horizontal paddings or margins).                                                                                                                                |
  | values            | Required | –             | List of values, or a map if you don’t want the class name to be the same as the value. If null is used as map key, class is not prepended to the class name.                                                                             |
  | class             | Optional | null          | Name of the generated class. If not provided and property is an array of strings, class will default to the first element of the property array. If not provided and property is a string, the values keys are used for the class names. |
  | css-var           | Optional | false         | Boolean to generate CSS variables instead of CSS rules.                                                                                                                                                                                  |
  | css-variable-name | Optional | null          | Custom un-prefixed name for the CSS variable inside the ruleset.                                                                                                                                                                         |
  | local-vars        | Optional | null          | Map of local CSS variables to generate in addition to the CSS rules.                                                                                                                                                                     |
  | state             | Optional | null          | List of pseudo-class variants (e.g., :hover or :focus) to generate.                                                                                                                                                                      |
  | responsive        | Optional | false         | Boolean indicating if responsive classes should be generated.                                                                                                                                                                            |

  Our API is based on bootstrap utility API, more information is available here: https://getbootstrap.com/docs/5.3/utilities/api/
*/

$position-values: (
  0: 0,
  50: 50%,
  100: 100%,
);

$utilities: (
  'grid-gutter': (
    responsive: true,
    property: --post-grid-gutter-x --post-grid-gutter-y,
    class: g,
    values: utilities_formatted.$gap,
  ),
  'grid-gutter-x': (
    responsive: true,
    property: --post-grid-gutter-x,
    class: gx,
    values: utilities_formatted.$gap,
  ),
  'grid-gutter-y': (
    responsive: true,
    property: --post-grid-gutter-y,
    class: gy,
    values: utilities_formatted.$gap,
  ),
  'width': (
    responsive: true,
    property: width,
    class: w,
    values: map.merge(utilities_formatted.$gap, $post-percentage-sizes),
  ),
  'height': (
    responsive: true,
    property: height,
    class: h,
    values: map.merge(utilities_formatted.$gap, $post-percentage-sizes),
  ),
  'max-width': (
    responsive: true,
    property: max-width,
    class: max-w,
    values: map.merge(utilities_formatted.$gap, $post-percentage-sizes),
  ),
  'max-height': (
    responsive: true,
    property: max-height,
    class: max-h,
    values: map.merge(utilities_formatted.$gap, $post-percentage-sizes),
  ),
  'min-width': (
    responsive: true,
    property: min-width,
    class: min-w,
    values: map.merge(utilities_formatted.$gap, $post-percentage-sizes),
  ),
  'min-height': (
    responsive: true,
    property: min-height,
    class: min-h,
    values: map.merge(utilities_formatted.$gap, $post-percentage-sizes),
  ),
  'viewport-width': (
    responsive: true,
    property: width,
    class: vw,
    values: (
      0: 0,
      25: 25vw,
      33: 25vw,
      50: 50vw,
      66: 66vw,
      75: 75vw,
      100: 100vw,
    ),
  ),
  'viewport-height': (
    responsive: true,
    property: height,
    class: vh,
    values: (
      0: 0,
      25: 25vh,
      33: 33vh,
      50: 50vh,
      66: 66vh,
      75: 75vh,
      100: 100vh,
    ),
  ),
  'min-viewport-width': (
    responsive: true,
    property: min-width,
    class: min-vw,
    values: (
      0: 0,
      25: 25vw,
      33: 25vw,
      50: 50vw,
      66: 66vw,
      75: 75vw,
      100: 100vw,
    ),
  ),
  'min-viewport-height': (
    responsive: true,
    property: min-height,
    class: min-vh,
    values: (
      0: 0,
      25: 25vh,
      33: 33vh,
      50: 50vh,
      66: 66vh,
      75: 75vh,
      100: 100vh,
    ),
  ),
  'max-viewport-width': (
    responsive: true,
    property: max-width,
    class: max-vw,
    values: (
      0: 0,
      25: 25vw,
      33: 25vw,
      50: 50vw,
      66: 66vw,
      75: 75vw,
      100: 100vw,
    ),
  ),
  'max-viewport-height': (
    responsive: true,
    property: max-height,
    class: max-vh,
    values: (
      0: 0,
      25: 25vh,
      33: 33vh,
      50: 50vh,
      66: 66vh,
      75: 75vh,
      100: 100vh,
    ),
  ),
  'align': (
    property: vertical-align,
    class: align,
    values: baseline top middle bottom text-bottom text-top,
  ),
  'float': (
    responsive: true,
    property: float,
    values: (
      start: inline-start,
      end: inline-end,
      none: none,
    ),
  ),
  'opacity': (
    property: opacity,
    values: (
      0: 0,
      25: 0.25,
      50: 0.5,
      75: 0.75,
      100: 1,
    ),
  ),
  'margin': (
    responsive: true,
    property: margin,
    class: m,
    values: utilities_formatted.$margin,
  ),
  'margin-x': (
    responsive: true,
    property: margin-right margin-left,
    class: mx,
    values: utilities_formatted.$margin,
  ),
  'margin-y': (
    responsive: true,
    property: margin-top margin-bottom,
    class: my,
    values: utilities_formatted.$margin,
  ),
  'margin-top': (
    responsive: true,
    property: margin-top,
    class: mt,
    values: utilities_formatted.$margin,
  ),
  'margin-end': (
    responsive: true,
    property: margin-right,
    class: me,
    values: utilities_formatted.$margin,
  ),
  'margin-bottom': (
    responsive: true,
    property: margin-bottom,
    class: mb,
    values: utilities_formatted.$margin,
  ),
  'margin-start': (
    responsive: true,
    property: margin-left,
    class: ms,
    values: utilities_formatted.$margin,
  ),
  'padding': (
    responsive: true,
    property: padding,
    class: p,
    values: utilities_formatted.$padding,
  ),
  'padding-x': (
    responsive: true,
    property: padding-right padding-left,
    class: px,
    values: utilities_formatted.$padding,
  ),
  'padding-y': (
    responsive: true,
    property: padding-top padding-bottom,
    class: py,
    values: utilities_formatted.$padding,
  ),
  'padding-top': (
    responsive: true,
    property: padding-top,
    class: pt,
    values: utilities_formatted.$padding,
  ),
  'padding-end': (
    responsive: true,
    property: padding-right,
    class: pe,
    values: utilities_formatted.$padding,
  ),
  'padding-bottom': (
    responsive: true,
    property: padding-bottom,
    class: pb,
    values: utilities_formatted.$padding,
  ),
  'padding-start': (
    responsive: true,
    property: padding-left,
    class: ps,
    values: utilities_formatted.$padding,
  ),
  'gap': (
    responsive: true,
    property: gap,
    class: gap,
    values: utilities_formatted.$gap,
  ),
  'row-gap': (
    responsive: true,
    property: row-gap,
    class: row-gap,
    values: utilities_formatted.$gap,
  ),
  'column-gap': (
    responsive: true,
    property: column-gap,
    class: column-gap,
    values: utilities_formatted.$gap,
  ),
  'flex': (
    responsive: true,
    property: flex,
    values: (
      fill: 1 1 auto,
    ),
  ),
  'flex-direction': (
    responsive: true,
    property: flex-direction,
    class: flex,
    values: row column row-reverse column-reverse,
  ),
  'flex-grow': (
    responsive: true,
    property: flex-grow,
    class: flex,
    values: (
      grow-0: 0,
      grow-1: 1,
    ),
  ),
  'flex-shrink': (
    responsive: true,
    property: flex-shrink,
    class: flex,
    values: (
      shrink-0: 0,
      shrink-1: 1,
    ),
  ),
  'flex-wrap': (
    responsive: true,
    property: flex-wrap,
    class: flex,
    values: wrap nowrap wrap-reverse,
  ),
  'justify-content': (
    responsive: true,
    property: justify-content,
    values: (
      start: flex-start,
      end: flex-end,
      center: center,
      between: space-between,
      around: space-around,
      evenly: space-evenly,
    ),
  ),
  'align-items': (
    responsive: true,
    property: align-items,
    values: (
      start: flex-start,
      end: flex-end,
      center: center,
      baseline: baseline,
      stretch: stretch,
    ),
  ),
  'align-content': (
    responsive: true,
    property: align-content,
    values: (
      start: flex-start,
      end: flex-end,
      center: center,
      between: space-between,
      around: space-around,
      stretch: stretch,
    ),
  ),
  'align-self': (
    responsive: true,
    property: align-self,
    values: (
      auto: auto,
      start: flex-start,
      end: flex-end,
      center: center,
      baseline: baseline,
      stretch: stretch,
    ),
  ),
  'order': (
    responsive: true,
    property: order,
    values: (
      first: -1,
      0: 0,
      1: 1,
      2: 2,
      3: 3,
      4: 4,
      5: 5,
      last: 6,
    ),
  ),
  'display': (
    responsive: true,
    print: true,
    property: display,
    class: d,
    values: inline inline-block block grid inline-grid table table-row table-cell flex inline-flex
      none,
  ),
  'position': (
    property: position,
    values: static relative absolute fixed sticky,
  ),
  'top': (
    property: top,
    values: $position-values,
  ),
  'bottom': (
    property: bottom,
    values: $position-values,
  ),
  'start': (
    property: left,
    class: start,
    values: $position-values,
  ),
  'end': (
    property: right,
    class: end,
    values: $position-values,
  ),
  'translate-middle': (
    property: transform,
    class: translate-middle,
    values: (
      null: translate(-50%, -50%),
      x: translateX(-50%),
      y: translateY(-50%),
    ),
  ),
  'overflow': (
    property: overflow,
    values: auto hidden visible scroll,
  ),
  'overflow-x': (
    property: overflow-x,
    values: auto hidden visible scroll,
  ),
  'overflow-y': (
    property: overflow-y,
    values: auto hidden visible scroll,
  ),
  'font-family': (
    property: font-family,
    class: font,
    values: (
      'sans-serif': type.$font-family-sans-serif,
    ),
  ),
  'font-style': (
    property: font-style,
    class: fst,
    values: italic normal,
  ),
  'font-weight': (
    property: font-weight,
    class: fw,
    values: (
      black: type.$font-weight-black,
      bold: type.$font-weight-bold,
      normal: type.$font-weight-normal,
    ),
  ),
  'line-height': (
    property: line-height,
    class: lh,
    values: (
      1: type.$line-height-1,
      sm: type.$line-height-sm,
      lg: type.$line-height-lg,
    ),
  ),
  'text-align': (
    responsive: true,
    property: text-align,
    class: text,
    values: (
      start: left,
      end: right,
      center: center,
    ),
  ),
  'text-decoration': (
    property: text-decoration,
    values: none underline line-through,
  ),
  'text-transform': (
    property: text-transform,
    class: text,
    values: lowercase uppercase capitalize,
  ),
  'white-space': (
    property: white-space,
    class: text,
    values: (
      wrap: normal,
      nowrap: nowrap,
    ),
  ),
  'word-wrap': (
    property: word-wrap word-break,
    class: text,
    values: (
      break: break-word,
    ),
    rtl: false,
  ),
  'elevation': (
    property: box-shadow,
    values: utilities_formatted.$elevation,
    class: elevation,
  ),
);

/* IMPORTANT: When adding new utilities here, please ensure to remove the corresponding bootstrap utilities in `src/themes/bootstrap/_utilities.scss`. */
