@forward './../variables/options';

@use '../variables/color';
@use '../variables/commons';
@use '../variables/type';
@use '../variables/spacing';
@use '../variables/animation';
@use '../variables/components/form-check';
@use '../mixins/color' as color-mx;
@use '../mixins/icons' as icons-mx;
@use '../mixins/utilities' as utility-mx;
@use '../tokens/components' as components;
@use '../functions/tokens' as tokens;

tokens.$default-map: components.$post-switch;

.form-check {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  margin-bottom: form-check.$form-check-margin-bottom;

  // Focus styles
  &:has(.form-check-input[type='radio']):focus-within {
    @include utility-mx.focus-style(
      $offset: tokens.get('radio-button', 'focus-outline-offset', components.$post-radio-button),
      $width: tokens.get('radio-button', 'focus-border-width', components.$post-radio-button),
      $color: tokens.get('radio-button', 'focus-stroke', components.$post-radio-button),
      $style: tokens.get('radio-button', 'focus-border-style', components.$post-radio-button)
    ) {
      color: tokens.get('radio-button', 'selected-fg', components.$post-radio-button);
      background-color: tokens.get('radio-button', 'selected-bg', components.$post-radio-button);
      border-radius: tokens.get(
        'radio-button',
        'focus-border-radius',
        components.$post-radio-button
      );
      border-color: tokens.get('radio-button', 'selected-stroke', components.$post-radio-button);
    }
  }
  &:has(.form-check-input[type='checkbox']):focus-within {
    @include utility-mx.focus-style(
      $offset: tokens.get('checkbox', 'focus-outline-offset', components.$post-checkbox),
      $width: tokens.get('checkbox', 'focus-border-width', components.$post-checkbox),
      $color: tokens.get('checkbox', 'focus-stroke', components.$post-checkbox),
      $style: tokens.get('checkbox', 'focus-border-style', components.$post-checkbox)
    ) {
      color: tokens.get('checkbox', 'selected-fg', components.$post-checkbox);
      background-color: tokens.get('checkbox', 'selected-bg', components.$post-checkbox);
      border-radius: tokens.get('checkbox', 'focus-border-radius', components.$post-checkbox);
      border-color: tokens.get('checkbox', 'selected-stroke', components.$post-checkbox);
    }
  }

  &-inline {
    display: inline-flex;
    &:not(:last-of-type) {
      margin-right: form-check.$form-check-inline-margin-right;
    }
  }

  // Shared styles for both radio and checkbox
  &-input,
  &-label {
    transition: color #{animation.$transition-base-timing};

    @include utility-mx.high-contrast-mode {
      transition: none;
    }
  }

  &-input {
    &:not([disabled]),
    &:not([disabled]) ~ .form-check-label {
      cursor: pointer;
    }

    @include utility-mx.focus-style-none();
    display: inline-flex;
    flex: 0 auto;
    appearance: none;
    background: transparent;

    @include utility-mx.high-contrast-mode {
      border-color: FieldText;
    }

    &::after {
      content: '';
      display: block;
    }

    // Radio button specific styles
    &[type='radio'] {
      display: flex;
      justify-content: center;
      align-items: center;
      height: tokens.get('radio-button', 'icon-ring', components.$post-radio-button);
      width: tokens.get('radio-button', 'icon-ring', components.$post-radio-button);
      border: tokens.get('radio-button', 'icon-border-width', components.$post-radio-button)
        tokens.get('radio-button', 'icon-border-style-default', components.$post-radio-button)
        tokens.get('radio-button', 'enabled-stroke', components.$post-radio-button);
      padding-block: tokens.get(
        'radio-button',
        'icon-padding-block-inner',
        components.$post-radio-button
      );
      padding-inline: tokens.get(
        'radio-button',
        'icon-padding-inline-inner',
        components.$post-radio-button
      );
      margin-block: tokens.get(
        'radio-button',
        'icon-padding-block-container',
        components.$post-radio-button
      );
      border-radius: tokens.get(
        'radio-button',
        'icon-border-radius-round',
        components.$post-radio-button
      );

      color: tokens.get('radio-button', 'enabled-fg', components.$post-radio-button);
      background-color: tokens.get('radio-button', 'enabled-bg', components.$post-radio-button);

      & + .form-check-label {
        flex: 1;

        padding-block: tokens.get(
          'radio-button',
          'label-padding-block',
          components.$post-radio-button
        );

        :not(.form-switch, .radio-button-card) > & {
          padding-inline-start: tokens.get(
            'radio-button',
            'gap-inline-text-start',
            components.$post-radio-button
          );
        }
      }

      &:hover:not([disabled]),
      &:hover:not([disabled]) ~ .form-check-label {
        color: tokens.get('radio-button', 'hover-fg', components.$post-radio-button);
        background-color: tokens.get('radio-button', 'hover-bg', components.$post-radio-button);
        border-color: tokens.get('radio-button', 'hover-stroke', components.$post-radio-button);

        &::after {
          background-color: tokens.get('radio-button', 'hover-fg', components.$post-radio-button);
        }

        @include utility-mx.high-contrast-mode() {
          border-color: Highlight;
        }
      }

      &:checked::after {
        background-color: tokens.get('radio-button', 'enabled-fg', components.$post-radio-button);
        width: tokens.get('radio-button', 'icon-dot', components.$post-radio-button);
        height: tokens.get('radio-button', 'icon-dot', components.$post-radio-button);
        border-radius: inherit;

        @include utility-mx.high-contrast-mode {
          background-color: SelectedItem;
          border-color: Canvas;
        }
      }

      &[disabled] {
        background-color: tokens.get('radio-button', 'disabled-bg', components.$post-radio-button);
        border: tokens.get('radio-button', 'icon-border-width', components.$post-radio-button)
          tokens.get('radio-button', 'icon-border-style-disabled', components.$post-radio-button)
          tokens.get('radio-button', 'disabled-stroke', components.$post-radio-button);

        @include color-mx.on-dark-background {
          border: tokens.get('radio-button', 'icon-border-width', components.$post-radio-button)
            tokens.get('radio-button', 'icon-border-style-disabled', components.$post-radio-button)
            color.$white-alpha-80;
        }
        @include utility-mx.high-contrast-mode {
          border: tokens.get('radio-button', 'icon-border-width', components.$post-radio-button)
            tokens.get('radio-button', 'icon-border-style-disabled', components.$post-radio-button)
            GrayText;
        }
      }

      &[disabled],
      &[disabled] ~ .form-check-label {
        color: tokens.get('radio-button', 'disabled-fg', components.$post-radio-button);
        background-color: tokens.get('radio-button', 'disabled-bg', components.$post-radio-button);

        @include color-mx.on-dark-background() {
          color: color.$white-alpha-80;
        }
      }
    }

    // Checkbox specific styles
    &[type='checkbox'] {
      height: tokens.get('checkbox', 'icon-size', components.$post-checkbox);
      width: tokens.get('checkbox', 'icon-size', components.$post-checkbox);
      border: tokens.get('checkbox', 'icon-border-width', components.$post-checkbox) solid
        tokens.get('checkbox', 'enabled-stroke', components.$post-checkbox);
      border-radius: tokens.get('checkbox', 'border-radius', components.$post-checkbox);
      padding: tokens.get('checkbox', 'icon-padding-container', components.$post-checkbox);

      color: tokens.get('checkbox', 'enabled-fg', components.$post-checkbox);
      background-color: tokens.get('checkbox', 'enabled-bg', components.$post-checkbox);

      & + .form-check-label {
        flex: 1;
        padding-block: tokens.get('checkbox', 'label-padding-block', components.$post-checkbox);
        :not(.form-switch, .checkbox-button-card) > & {
          padding-inline-start: tokens.get(
            'checkbox',
            'gap-inline-text-start',
            components.$post-checkbox
          );
        }
      }
      &::after {
        flex: 1;
      }
      &:hover:not([disabled]),
      &:hover:not([disabled]) ~ .form-check-label {
        color: tokens.get('checkbox', 'hover-fg', components.$post-checkbox);
        background-color: tokens.get('checkbox', 'hover-bg', components.$post-checkbox);
        border-color: tokens.get('checkbox', 'hover-stroke', components.$post-checkbox);

        @include utility-mx.high-contrast-mode() {
          border-color: Highlight;
        }
      }

      &:checked::after {
        @include icons-mx.icon(2105);
      }

      &:indeterminate::after {
        @include icons-mx.icon(2039);
      }

      &:checked,
      &:indeterminate {
        @include utility-mx.high-contrast-mode {
          background-color: SelectedItem !important;
          color: SelectedItemText !important;
        }
      }

      &[disabled] {
        background-color: tokens.get('checkbox', 'disabled-bg', components.$post-checkbox);
        border: tokens.get('checkbox', 'icon-border-width', components.$post-checkbox)
          tokens.get('checkbox', 'border-style-disabled', components.$post-checkbox)
          tokens.get('checkbox', 'disabled-stroke', components.$post-checkbox);

        @include color-mx.on-dark-background {
          border: tokens.get('checkbox', 'icon-border-width', components.$post-checkbox)
            tokens.get('checkbox', 'border-style-disabled', components.$post-checkbox)
            color.$white-alpha-80;
        }
        @include utility-mx.high-contrast-mode {
          border: tokens.get('checkbox', 'icon-border-width', components.$post-checkbox)
            tokens.get('checkbox', 'border-style-disabled', components.$post-checkbox) GrayText;
        }
      }

      &[disabled],
      &[disabled] ~ .form-check-label {
        color: tokens.get('checkbox', 'disabled-fg', components.$post-checkbox);
        background-color: tokens.get('checkbox', 'disabled-bg', components.$post-checkbox);

        @include color-mx.on-dark-background() {
          color: color.$white-alpha-80;
        }
      }
    }

    // Shared disabled styles
    &[disabled] {
      &[type='checkbox'],
      &[type='radio'] {
        @include utility-mx.high-contrast-mode {
          border-color: GrayText !important;
        }
      }

      &[type='checkbox'] {
        &:checked,
        &:indeterminate {
          @include utility-mx.high-contrast-mode {
            background-color: Field !important;
            color: GrayText !important;
          }
        }
      }

      &[type='radio'] {
        &:checked::after {
          @include utility-mx.high-contrast-mode {
            background-color: GrayText;
          }
        }
      }
    }
  }
}

.form-switch {
  .form-check-input {
    height: form-check.$form-switch-height;
    width: form-check.$form-switch-width;
    border: 0;
    border-radius: form-check.$form-switch-width;
    background-image: form-check.$form-switch-background-image;
    background-size: 2 * form-check.$form-switch-width;
    background-position-x: 0;
    transition:
      background-color animation.$transition-base-timing,
      background-position animation.$transition-base-timing;

    &::after {
      max-width: form-check.$form-switch-height;
      background-color: form-check.$form-switch-color;
      border: form-check.$form-check-input-border-width solid form-check.$form-switch-border-color;
      border-radius: 50%;
      transition: transform animation.$transition-base-timing;
    }

    &:checked {
      background-position-x: form-check.$form-switch-width;

      &::after {
        @include icons-mx.remove-icon;
        background-color: form-check.$form-switch-color;
        border-color: form-check.$form-switch-checked-border-color;
        transform: translateX(2rem);
      }
    }

    @include utility-mx.high-contrast-mode {
      transition: none;
      border: form-check.$form-check-input-border-width solid CanvasText;

      &:checked {
        background-color: SelectedItem !important;
      }

      &::after,
      &:checked::after {
        max-width: calc(
          form-check.$form-switch-height - (form-check.$form-check-input-border-width * 2)
        );
        border-color: Canvas;
        background-color: CanvasText;
      }
    }

    &[disabled] {
      background: form-check.$form-switch-disabled-bg;

      &::after {
        border-color: form-check.$form-switch-disabled-border-color;
      }

      @include utility-mx.high-contrast-mode {
        &::after {
          border-color: Field;
        }

        &:checked {
          background-color: GrayText !important;
        }
      }
    }
  }

  &:hover > .form-check-input:not([disabled]) {
    background-color: rgba(var(--post-contrast-color-rgb), 0.1);

    @include utility-mx.high-contrast-mode {
      border-color: Highlight;
    }
  }

  .form-check-label {
    padding-top: form-check.$form-switch-label-padding-top;

    &.order-first {
      flex: 0 auto;
      padding-inline-end: form-check.$form-switch-column-gap;
    }

    &:not(.order-first) {
      padding-inline-start: form-check.$form-switch-column-gap;
    }
  }
}
