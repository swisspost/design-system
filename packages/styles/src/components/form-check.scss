@forward './../variables/options';

@use '../variables/color';
@use '../variables/commons';
@use '../variables/type';
@use '../variables/spacing';
@use '../variables/animation';
@use '../variables/components/form-check';
@use '../mixins/color' as color-mx;
@use '../mixins/icons' as icons-mx;
@use '../mixins/utilities' as utility-mx;
@use '../tokens/components' as components;
@use '../functions/tokens' as tokens;

tokens.$default-map: components.$post-switch;

.form-check {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  &[type='radio'] {
    row-gap: tokens.get('radio-button', 'gap-block-group', components.$post-radio-button);
    padding-block: tokens.get('radio-button', 'padding-block-text', components.$post-radio-button);

    @include utility-mx.focus-style(
      // $offset: tokens.get('radio-button', 'focus-border-offset', components.$post-radio-button),
      $width: tokens.get('radio-button', 'focus-border-width', components.$post-radio-button),
      $color: tokens.get('radio-button', 'focus-stroke', components.$post-radio-button),
      // $style: tokens.get('radio-button', 'focus-border-style', components.$post-radio-button)
    ) {
      color: tokens.get('radio-button', 'selected-fg', components.$post-radio-button);
      background-color: tokens.get('radio-button', 'selected-bg', components.$post-radio-button);
      border-radius: tokens.get(
        'radio-button',
        'border-radius-round',
        components.$post-radio-button
      );
      .form-check-input[type='radio'] {
        border-color: tokens.get('radio-button', 'selected-stroke', components.$post-radio-button);
      }
    }
  }

  &[type='checkbox'] {
    row-gap: tokens.get('checkbox', 'gap-block-group', components.$post-checkbox);
    padding-block: tokens.get('checkbox', 'padding-block-text', components.$post-checkbox);
    @include utility-mx.focus-style(
      // $offset: tokens.get('checkbox', 'focus-border-offset', components.$post-checkbox),
      $width: tokens.get('checkbox', 'focus-border-width', components.$post-checkbox),
      $color: tokens.get('checkbox', 'focus-stroke', components.$post-checkbox),
      // $style: tokens.get('checkbox', 'focus-border-style', components.$post-checkbox)
    ) {
      color: tokens.get('checkbox', 'selected-fg', components.$post-checkbox);
      background-color: tokens.get('checkbox', 'selected-bg', components.$post-checkbox);
      border-radius: tokens.get('checkbox', 'border-radius', components.$post-checkbox);
      .form-check-input[type='radio'] {
        border-color: tokens.get('checkbox', 'selected-stroke', components.$post-checkbox);
      }
    }
  }
  margin-bottom: form-check.$form-check-margin-bottom;

  &-inline {
    display: inline-flex;
  }

  &-inline:not(:last-of-type) {
    margin-right: form-check.$form-check-inline-margin-right;
  }

  &-input,
  &-label {
    &[type='radio'] {
      color: tokens.get('radio-button', 'enabled-fg', components.$post-radio-button);
      background-color: tokens.get('radio-button', 'enabled-bg', components.$post-radio-button);
    }

    &[type='checkbox'] {
      color: tokens.get('checkbox', 'enabled-fg', components.$post-checkbox);
      background-color: tokens.get('checkbox', 'enabled-bg', components.$post-checkbox);
    }
    transition: color #{animation.$transition-base-timing};

    @include utility-mx.high-contrast-mode {
      transition: none;
    }

    &:hover:not([disabled]),
    &:hover:not([disabled]) ~ &-label {
      &[type='radio'] {
        color: tokens.get('radio-button', 'hover-fg', components.$post-radio-button);
        background-color: tokens.get('radio-button', 'hover-bg', components.$post-radio-button);
        border-color: tokens.get('radio-button', 'hover-stroke', components.$post-radio-button);
      }

      &[type='checkbox'] {
        color: tokens.get('checkbox', 'hover-fg', components.$post-checkbox);
        background-color: tokens.get('checkbox', 'hover-bg', components.$post-checkbox);
        border-color: tokens.get('checkbox', 'hover-stroke', components.$post-checkbox);
      }

      @include utility-mx.high-contrast-mode() {
        border-color: Highlight;
      }
    }
  }

  &-input {
    &:not([disabled]),
    &:not([disabled]) ~ .form-check-label {
      cursor: pointer;
    }

    @include utility-mx.focus-style-none();

    display: inline-flex;
    flex: 0 auto;
    appearance: none;
    background: transparent;

    &[type='radio'] {
      height: tokens.get('radio-button', 'icon-height-inner', components.$post-radio-button);
      width: tokens.get('radio-button', 'icon-width-inner', components.$post-radio-button);
      border: tokens.get('radio-button', 'icon-border-width', components.$post-radio-button) solid
        tokens.get('radio-button', 'enabled-stroke', components.$post-radio-button);
      padding-block: tokens.get(
        'radio-button',
        'icon-padding-block-inner',
        components.$post-radio-button
      );
      padding-inline: tokens.get(
        'radio-button',
        'icon-padding-inline-inner',
        components.$post-radio-button
      );
    }

    &[type='checkbox'] {
      height: tokens.get('checkbox', 'icon-height-inner', components.$post-checkbox);
      width: tokens.get('checkbox', 'icon-width-inner', components.$post-checkbox);
      border: tokens.get('checkbox', 'icon-border-width', components.$post-checkbox) solid
        tokens.get('checkbox', 'enabled-stroke', components.$post-checkbox);
      padding-block: tokens.get('checkbox', 'icon-padding-inline-inner', components.$post-checkbox);
      padding-inline: tokens.get('checkbox', 'icon-padding-block-inner', components.$post-checkbox);
    }

    @include utility-mx.high-contrast-mode {
      border-color: FieldText; // For blink-browser as otherwise the default color (which is not a full color) will be converted to Highlight
    }

    &::after {
      content: '';
      display: block;
      flex: 1;
    }

    &[type='checkbox'] {
      &:checked::after {
        @include icons-mx.icon(2105);
      }

      &:indeterminate::after {
        @include icons-mx.icon(2039);
      }

      &:checked,
      &:indeterminate {
        @include utility-mx.high-contrast-mode {
          background-color: SelectedItem !important;
          color: SelectedItemText !important; // Important is needed for card-control
        }
      }
    }

    &[type='radio'] {
      border-radius: tokens.get(
        'radio-button',
        'border-radius-round',
        components.$post-radio-button
      );

      &:checked::after {
        // TODO: Use tokens
        border: 3px solid tokens.get('radio-button', 'enabled-bg', components.$post-radio-button);
        background-color: tokens.get('radio-button', 'enabled-fg', components.$post-radio-button);
        border-radius: inherit;
        background-clip: padding-box;

        @include utility-mx.high-contrast-mode {
          background-color: SelectedItem;
          border-color: Canvas;
        }
      }

      &[disabled] {
        &[type='radio'] {
          background-color: tokens.get(
            'radio-button',
            'disabled-bg',
            components.$post-radio-button
          );
          border: tokens.get('radio-button', 'icon-border-width', components.$post-radio-button)
            dashed tokens.get('radio-button', 'disabled-stroke', components.$post-radio-button);

          @include color-mx.on-dark-background {
            border: tokens.get('radio-button', 'icon-border-width', components.$post-radio-button)
              dashed color.$white-alpha-80;
          }
          @include utility-mx.high-contrast-mode {
            border: tokens.get('radio-button', 'icon-border-width', components.$post-radio-button)
              dashed GrayText;
          }
        }

        &[type='checkbox'] {
          background-color: tokens.get('checkbox', 'disabled-bg', components.$post-checkbox);
          border: tokens.get('checkbox', 'icon-border-width', components.$post-checkbox) dashed
            tokens.get('checkbox', 'disabled-stroke', components.$post-checkbox);
          @include color-mx.on-dark-background {
            border: tokens.get('checkbox', 'icon-border-width', components.$post-checkbox) dashed
              color.$white-alpha-80;
          }
          @include utility-mx.high-contrast-mode {
            border: tokens.get('checkbox', 'icon-border-width', components.$post-checkbox) dashed
              GrayText;
          }
        }
      }
    }

    &[disabled] {
      &[type='checkbox'],
      &[type='radio'] {
        @include utility-mx.high-contrast-mode {
          border-color: GrayText !important;
        }
      }

      &[type='checkbox'] {
        &:checked,
        &:indeterminate {
          @include utility-mx.high-contrast-mode {
            background-color: Field !important;
            color: GrayText !important;
          }
        }
      }

      &[type='radio'] {
        &:checked::after {
          @include utility-mx.high-contrast-mode {
            background-color: GrayText;
          }
        }
      }

      // border: 0;
      // background-image: url('#{form-check.$form-check-input-disabled-background-url-light-lg}');

      // @include color-mx.on-dark-background {
      //   background-image: url('#{form-check.$form-check-input-disabled-background-url-dark-lg}');
      // }

      // @include utility-mx.high-contrast-mode {
      //   background-image: url('#{form-check.$form-check-input-disabled-background-url-hcm-lg}') !important;
      // }
    }

    &[disabled],
    &[disabled] ~ .form-check-label {
      &[type='radio'] {
        color: tokens.get('radio-button', 'disabled-fg', components.$post-radio-button);
        background-color: tokens.get('radio-button', 'disabled-bg', components.$post-radio-button);
      }

      &[type='checkbox'] {
        color: tokens.get('checkbox', 'disabled-fg', components.$post-checkbox);
        background-color: tokens.get('checkbox', 'disabled-bg', components.$post-checkbox);
      }

      @include color-mx.on-dark-background() {
        color: color.$white-alpha-80;
      }
    }
  }

  &-label {
    flex: 1;

    :not(.form-switch, .radio-button-card, .checkbox-button-card) > & {
      padding-inline-start: form-check.$form-check-column-gap;
    }
  }
}

.form-switch {
  .form-check-input {
    height: form-check.$form-switch-height;
    width: form-check.$form-switch-width;
    border: 0;
    border-radius: form-check.$form-switch-width;
    background-image: form-check.$form-switch-background-image;
    background-size: 2 * form-check.$form-switch-width;
    background-position-x: 0;
    transition:
      background-color animation.$transition-base-timing,
      background-position animation.$transition-base-timing;

    &::after {
      max-width: form-check.$form-switch-height;
      background-color: form-check.$form-switch-color;
      border: form-check.$form-check-input-border-width solid form-check.$form-switch-border-color;
      border-radius: 50%;
      transition: transform animation.$transition-base-timing;
    }

    &:checked {
      background-position-x: form-check.$form-switch-width;

      &::after {
        @include icons-mx.remove-icon;
        background-color: form-check.$form-switch-color;
        border-color: form-check.$form-switch-checked-border-color;
        transform: translateX(2rem);
      }
    }

    @include utility-mx.high-contrast-mode {
      transition: none;
      border: form-check.$form-check-input-border-width solid CanvasText;

      &:checked {
        background-color: SelectedItem !important;
      }

      &::after,
      &:checked::after {
        max-width: calc(
          form-check.$form-switch-height - (form-check.$form-check-input-border-width * 2)
        );
        border-color: Canvas;
        background-color: CanvasText;
      }
    }

    &[disabled] {
      background: form-check.$form-switch-disabled-bg;

      &::after {
        border-color: form-check.$form-switch-disabled-border-color;
      }

      @include utility-mx.high-contrast-mode {
        &::after {
          border-color: Field;
        }

        &:checked {
          background-color: GrayText !important;
        }
      }
    }
  }

  &:hover > .form-check-input:not([disabled]) {
    background-color: rgba(var(--post-contrast-color-rgb), 0.1);

    @include utility-mx.high-contrast-mode {
      border-color: Highlight;
    }
  }

  .form-check-label {
    padding-top: form-check.$form-switch-label-padding-top;

    &.order-first {
      flex: 0 auto;
      padding-inline-end: form-check.$form-switch-column-gap;
    }

    &:not(.order-first) {
      padding-inline-start: form-check.$form-switch-column-gap;
    }
  }
}
