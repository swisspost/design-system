@forward './../variables/options';

@use 'sass:map';
@use '../variables/color';
@use '../variables/commons';
@use '../variables/type';
@use '../variables/spacing';
@use '../variables/animation';
@use '../variables/components/form-check';
@use '../mixins/color' as color-mx;
@use '../mixins/icons' as icons-mx;
@use '../mixins/utilities' as utility-mx;
@use '../tokens/components' as components;
@use '../functions/tokens' as tokens;

tokens.$default-map: components.$post-switch;

.form-check {
  display: flex;
  flex-wrap: wrap;
  row-gap: form-check.$form-check-row-gap;
  margin-bottom: form-check.$form-check-margin-bottom;

  @include utility-mx.focus-style() {
    border-radius: commons.$border-radius;
  }

  &-inline {
    display: inline-flex;
  }

  &-inline:not(:last-of-type) {
    margin-right: form-check.$form-check-inline-margin-right;
  }

  &-input,
  &-label {
    color: rgba(var(--post-contrast-color-rgb), 0.8);
    transition: color animation.$transition-base-timing;

    @include utility-mx.high-contrast-mode {
      transition: none;
    }

    &:hover:not([disabled]),
    &:hover:not([disabled]) ~ &-label {
      color: var(--post-contrast-color);

      @include utility-mx.high-contrast-mode() {
        border-color: Highlight;
      }
    }
  }

  &-input {
    &:not([disabled]),
    &:not([disabled]) ~ .form-check-label {
      cursor: pointer;
    }

    @include utility-mx.focus-style-none();

    display: inline-flex;
    flex: 0 auto;
    appearance: none;
    background: transparent;
    height: form-check.$form-check-input-size;
    width: form-check.$form-check-input-size;
    border: form-check.$form-check-input-border-width solid currentColor;
    margin-top: 1px;

    @include utility-mx.high-contrast-mode {
      border-color: FieldText; // For blink-browser as otherwise the default color (which is not a full color) will be converted to Highlight
    }

    &::after {
      content: '';
      display: block;
      flex: 1;
    }

    &[type='checkbox'] {
      &:checked::after {
        @include icons-mx.icon(3035);
      }

      &:indeterminate::after {
        @include icons-mx.icon(2039);
      }

      &:checked,
      &:indeterminate {
        @include utility-mx.high-contrast-mode {
          background-color: SelectedItem !important;
          color: SelectedItemText !important; // Important is needed for card-control
        }
      }
    }

    &[type='radio'] {
      border-radius: 50%;

      &:checked::after {
        border: spacing.$size-micro solid transparent;
        background-color: currentColor;
        border-radius: inherit;
        background-clip: padding-box;

        @include utility-mx.high-contrast-mode {
          background-color: SelectedItem;
          border-color: Canvas;
        }
      }

      &[disabled] {
        padding: spacing.$size-line; // Used to mimic border width because it is used in combination with background-clip: padding-box; to size the selected shape
        background-image: url('#{form-check.$form-check-input-radio-disabled-background-url-light}');

        @include color-mx.on-dark-background {
          background-image: url('#{form-check.$form-check-input-radio-disabled-background-url-dark}');
        }

        @include utility-mx.high-contrast-mode {
          background-image: url('#{form-check.$form-check-input-radio-disabled-background-url-hcm}') !important;
        }
      }
    }

    &[disabled] {
      &[type='checkbox'],
      &[type='radio'] {
        @include utility-mx.high-contrast-mode {
          border-color: GrayText !important;
        }
      }

      &[type='checkbox'] {
        &:checked,
        &:indeterminate {
          @include utility-mx.high-contrast-mode {
            background-color: Field !important;
            color: GrayText !important;
          }
        }
      }

      &[type='radio'] {
        &:checked::after {
          @include utility-mx.high-contrast-mode {
            background-color: GrayText;
          }
        }
      }

      border: 0;
      // background-image: url('#{form-check.$form-check-input-disabled-background-url-light-lg}');

      @include color-mx.on-dark-background {
        // background-image: url('#{form-check.$form-check-input-disabled-background-url-dark-lg}');
      }

      @include utility-mx.high-contrast-mode {
        // background-image: url('#{form-check.$form-check-input-disabled-background-url-hcm-lg}') !important;
      }

      .form-check-sm &[type='checkbox'] {
        background-image: url('#{form-check.$form-check-input-disabled-background-url-light-sm}');

        @include color-mx.on-dark-background {
          background-image: url('#{form-check.$form-check-input-disabled-background-url-dark-sm}');
        }

        @include utility-mx.high-contrast-mode {
          background-image: url('#{form-check.$form-check-input-disabled-background-url-hcm-sm}') !important;
        }
      }
    }

    &[disabled],
    &[disabled] ~ .form-check-label {
      color: color.$black-alpha-60;

      @include color-mx.on-dark-background() {
        color: color.$white-alpha-80;
      }
    }

    .form-check-sm & {
      height: form-check.$form-check-input-size-sm;
      width: form-check.$form-check-input-size-sm;

      &[type='radio'] {
        &:checked::after {
          border-width: spacing.$size-line;
        }
      }
    }
  }

  &-label {
    flex: 1;

    :not(.form-switch, .radio-button-card, .checkbox-button-card) > & {
      padding-inline-start: form-check.$form-check-column-gap;
    }

    .form-check-sm & {
      font-size: type.$font-size-12;
    }
  }
}

$switch-handle-icon: url("data:image/svg+xml,<svg viewBox='0 0 32 32' xmlns='http://www.w3.org/2000/svg'><path d='m12.667 24.533-7.6-7.6 1.867-1.867 5.733 5.733 12.4-12.4 1.867 1.867z'/></svg>");
$switch-handle-icon-disabled: url("data:image/svg+xml,<svg viewBox='0 0 32 32' xmlns='http://www.w3.org/2000/svg'><path d='m12.667 23.6-7.2-7.067 1.067-1.067 6.133 6.267L25.467 8.8l1.067 1.067z'/></svg>");

.form-switch {
  display: flex;
  align-items: center;

  @include utility-mx.focus-style(
    $offset: tokens.get('switch', 'focus-outline-offset'),
    $width: tokens.get('switch', 'focus-border-width'),
    $color: tokens.get('switch', 'focus-stroke'),
    $style: tokens.get('switch', 'focus-border-style')
  ) {
    border-radius: tokens.get('switch', 'focus-border-radius');
  }

  .form-check-input {
    position: relative;
    display: flex;
    align-items: center;
    height: tokens.get('switch', 'element-height');
    width: tokens.get('switch', 'element-width');
    border: tokens.get('switch', 'border-width') tokens.get('switch', 'border-style-default')
      tokens.get('switch', 'element-enabled-stroke');
    border-radius: tokens.get('switch', 'border-radius-round');
    background-color: tokens.get('switch', 'element-enabled-bg');
    padding: tokens.get('switch', 'padding-block-text') 0 tokens.get('switch', 'padding-block-text')
      tokens.get('switch', 'padding-inline-handle');
    transition:
      background-color animation.$transition-base-timing,
      border-color animation.$transition-base-timing;

    &::before,
    &::after {
      position: absolute;
      display: block;
      width: tokens.get('switch', 'element-handle');
      height: tokens.get('switch', 'element-handle');
      background-color: tokens.get('switch', 'handle-enabled');
      border-radius: tokens.get('switch', 'border-radius-round');
      transition:
        transform animation.$transition-base-timing,
        background-color animation.$transition-base-timing;
    }

    &::before {
      content: '';
      mask-image: $switch-handle-icon;
      background-color: transparent;
      z-index: 1;
    }

    &::after {
      border: tokens.get('switch', 'border-width') tokens.get('switch', 'border-style-default')
        tokens.get('switch', 'handle-enabled-stroke');
    }

    &:checked {
      background-color: tokens.get('switch', 'element-selected-bg');
      border-color: tokens.get('switch', 'element-selected-stroke');

      &::before,
      &::after {
        transform: translateX(
          calc(tokens.get('switch', 'element-width') - tokens.get('switch', 'element-handle') * 1.5)
        );
      }

      &::before {
        background-color: tokens.get('switch', 'icon-success');
      }

      &::after {
        @include icons-mx.remove-icon;
        background-color: tokens.get('switch', 'handle-selected');
        border-color: tokens.get('switch', 'handle-selected-stroke');
      }

      & + .form-check-label {
        color: tokens.get('switch', 'text-selected-fg');
      }
    }

    @include utility-mx.high-contrast-mode {
      transition: none;
      border: form-check.$form-check-input-border-width tokens.get('switch', 'border-style-default')
        CanvasText;

      &:checked {
        background-color: SelectedItem !important;
      }

      &::after {
        max-width: tokens.get('switch', 'element-handle');
        border-color: Canvas;
        background-color: CanvasText;
      }

      &:checked::after {
        transform: translateX(
          calc(
            tokens.get('switch', 'element-width') - tokens.get('switch', 'element-handle') - tokens.get(
                'switch',
                'padding-inline-handle'
              ) * 2 - form-check.$form-check-input-border-width * 2
          )
        );
      }
    }

    &[disabled] {
      background-color: tokens.get('switch', 'element-disabled-bg');
      border: tokens.get('switch', 'border-width') tokens.get('switch', 'border-style-disabled')
        tokens.get('switch', 'element-disabled-stroke');

      @include color-mx.on-dark-background {
        border: tokens.get('switch', 'border-width') tokens.get('switch', 'border-style-disabled')
          color.$white-alpha-80;
      }

      @include utility-mx.high-contrast-mode {
        border: tokens.get('switch', 'border-width') tokens.get('switch', 'border-style-disabled')
          GrayText;
      }

      & + .form-check-label {
        color: tokens.get('switch', 'text-disabled-fg');
      }

      &::after {
        background-color: tokens.get('switch', 'handle-disabled');
        border: tokens.get('switch', 'border-width') tokens.get('switch', 'border-style-disabled')
          tokens.get('switch', 'handle-disabled-stroke');

        @include color-mx.on-dark-background {
          border: tokens.get('switch', 'border-width') tokens.get('switch', 'border-style-disabled')
            color.$white-alpha-80;
        }

        @include utility-mx.high-contrast-mode {
          border: tokens.get('switch', 'border-width') tokens.get('switch', 'border-style-disabled')
            GrayText;
        }
      }

      &:checked::before {
        background-color: tokens.get('switch', 'icon-disabled');
        mask-image: $switch-handle-icon-disabled;
      }

      @include utility-mx.high-contrast-mode {
        &::after {
          border-color: Field;
        }

        &:checked {
          background-color: GrayText !important;
        }
      }
    }
  }

  &:hover > .form-check-input:not([disabled]) {
    background-color: tokens.get('switch', 'element-hover-bg');
    border-color: tokens.get('switch', 'element-hover-stroke');

    &::after {
      background-color: tokens.get('switch', 'handle-hover');
      border-color: tokens.get('switch', 'handle-hover-stroke');
    }

    &::before {
      background-color: transparent;
    }

    @include utility-mx.high-contrast-mode {
      border-color: Highlight;
      &::after {
        background-color: CanvasText;
      }
    }
  }

  .form-check-label {
    color: tokens.get('switch', 'text-enabled-fg');

    &.order-first {
      flex: 0 auto;
      padding-inline-end: tokens.get('switch', 'gap-inline-text');
    }

    &:not(.order-first) {
      padding-inline-start: tokens.get('switch', 'gap-inline-text');
    }
  }
}
