@forward './../variables/options';

@use './../mixins/button' as button-mx;
@use './../mixins/color' as color-mx;
@use './../mixins/focus' as focus-mx;
@use './../mixins/icons' as icon-mx;
@use './../mixins/type' as type-mx;
@use './../mixins/utilities' as utility-mx;

@use './../functions/contrast';
@use './../variables/color';
@use './../variables/components/accordion';

.accordion-item {
  border-block: accordion.$accordion-border-width solid accordion.$accordion-border-color;

  & + & {
    border-block-start: 0;
  }

  // make the accordion gray
  @include color-mx.colored-background(color.$gray-background);

  // make the accordion white on background colors close to the gray above (making sure it remains gray on a white background)
  $accordion-contrast-on-white: contrast.contrast-ratio(color.$white, color.$gray-background);
  @each $name, $color in color.$background-colors {
    $accordion-contrast-on-color: contrast.contrast-ratio($color, color.$gray-background);
    @if ($accordion-contrast-on-color < $accordion-contrast-on-white) {
      .bg-#{$name} & {
        @include color-mx.colored-background(color.$white);
      }
    }
  }
}

.accordion-header {
  color: accordion.$accordion-header-color;
  font-size: accordion.$accordion-header-font-size;
  font-weight: accordion.$accordion-header-font-weight;
  line-height: accordion.$accordion-header-line-height;
  margin: 0;
}

.accordion-button {
  @include button-mx.reset-button;
  @include focus-mx.focus-ring;

  width: 100%;
  position: relative;
  padding-block: accordion.$accordion-button-padding;
  padding-inline-start: accordion.$accordion-button-padding;
  padding-inline-end: accordion.$accordion-button-padding + accordion.$accordion-icon-size +
    accordion.$accordion-gap;
  text-align: start;
  transition: accordion.$accordion-button-transition;

  &:hover {
    color: accordion.$accordion-button-hover-color;
    background-color: accordion.$accordion-button-hover-bg;
  }

  &:disabled {
    opacity: accordion.$accordion-button-disabled-opacity;
    pointer-events: none;
  }

  &::after {
    @include icon-mx.icon(accordion.$accordion-icon-name);
    content: '';
    display: block;
    height: accordion.$accordion-icon-size;
    width: accordion.$accordion-icon-size;

    // use absolute positioning instead of flex to allow easy title truncation
    position: absolute;
    inset-inline-end: accordion.$accordion-button-padding;
    inset-block-start: 50%;
    transform: translateY(-50%);
    transition: accordion.$accordion-icon-transition;
  }

  &.collapsed::after {
    transform: translateY(-50%) accordion.$accordion-icon-transform;
  }

  > .text-truncate {
    display: block;
  }

  @include utility-mx.high-contrast-mode() {
    &:hover,
    &:focus-visible {
      &:not(:disabled) {
        outline: accordion.$accordion-border-width solid Highlight;
      }
    }

    &:disabled {
      opacity: 1 !important;
    }
  }
}

.accordion-body {
  padding: accordion.$accordion-body-padding;
  font-weight: accordion.$accordion-body-font-weight;
}

.accordion-button > *,
.accordion-body > :first-child {
  margin-block-start: 0 !important;
}

.accordion-button > *,
.accordion-body > :last-child {
  margin-block-end: 0 !important;
}
