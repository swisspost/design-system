@use './../mixins/utilities';
@use './../mixins/chip' as chip-mx;
@use './../mixins/icons' as icons-mx;
@use '../tokens/components';
@use '../functions/tokens';

tokens.$default-map: components.$post-chip;

button.chip-dismissible {
  $button-size: tokens.get('close-size', components.$post-close);
  $icon-size: tokens.get('close-icon-size', components.$post-close);

  position: relative;
  padding-inline: tokens.get('chip-dismissible-padding-inline');
  gap: tokens.get('chip-dismissible-gap-inline');
  @include utilities.focus-style-none();
  @include chip-mx.chip-styles();

  &:disabled {
    @include chip-mx.chip-styles-disabled();

    &::after {
      @include utilities.high-contrast-mode() {
        background-color: GrayText;
      }
    }
  }

  // Close icon border on focus
  &::before {
    content: '';
    border-radius: 100%;
    height: $button-size;
    width: $button-size;
    position: absolute;
    right: calc(
      tokens.get('chip-dismissible-padding-inline') - ((#{$button-size} - #{$icon-size}) / 2)
    );
  }

  // Close icon
  &::after {
    content: '';
    margin-left: calc((#{$button-size} - #{$icon-size}) / 2);

    @include utilities.high-contrast-mode() {
      background-color: ButtonText;
    }
    @include icons-mx.post-icon-load($name: 'closex');
  }

  &:hover::after {
    color: tokens.get('chip-hovered-fg');
  }

  // set the focus ring on the close button only
  @include utilities.focus-style('::before');
  @include utilities.disabled-style();
}

// Filter / Selectable
.chip-selectable {
  display: inline-block;
  border-radius: tokens.get('chip-border-radius');
  @include utilities.focus-style();

  label {
    cursor: pointer;
    padding-inline: tokens.get('chip-selectable-padding-inline');
    @include chip-mx.chip-styles();

    .badge {
      box-sizing: border-box;
      color: tokens.get('chip-selectable-badge-enabled-fg');
      padding-inline: tokens.get('chip-selectable-badge-padding-inline');
      background-color: tokens.get('chip-selectable-badge-enabled-bg');
      margin-left: tokens.get('chip-selectable-gap-inline-badge');

      // HCM
      border: 1px solid transparent;
      height: calc(tokens.get('chip-selectable-badge-size') - 2px);
      min-width: calc(tokens.get('chip-selectable-badge-size') - 2px);
    }
  }

  input {
    @include utilities.visuallyhidden;

    &:checked {
      + label {
        color: tokens.get('chip-selectable-selected-enabled-fg');
        background-color: tokens.get('chip-selectable-selected-enabled-bg');
        border-color: tokens.get('chip-selectable-selected-enabled-stroke');
        padding-left: calc(
          tokens.get('chip-selectable-padding-inline') + tokens.get('chip-selectable-icon') +
            tokens.get('chip-selectable-gap-inline-selected-icon')
        );

        @include utilities.high-contrast-mode() {
          border-color: Highlight;
        }

        &::before {
          content: '';
          position: absolute;
          left: tokens.get('chip-selectable-padding-inline');
          
          @include utilities.high-contrast-mode() {
            background-color: Highlight;
          }
          @include icons-mx.post-icon-load(
            $name: 'checkmark',
            $width: tokens.get('chip-selectable-icon'),
            $height: tokens.get('chip-selectable-icon')
          );
        }

        .badge {
          color: tokens.get('chip-selectable-badge-selected-enabled-fg');
          background-color: tokens.get('chip-selectable-badge-selected-enabled-bg');
        }

        &:hover {
          color: tokens.get('chip-selectable-selected-hovered-fg');
          background-color: tokens.get('chip-selectable-selected-hovered-bg');
          border-color: tokens.get('chip-selectable-selected-hovered-stroke');

          .badge {
            color: tokens.get('chip-selectable-badge-selected-hovered-fg');
            background-color: tokens.get('chip-selectable-badge-selected-hovered-bg');
          }
        }
      }

      @include utilities.disabled-style('+ label') {
        color: tokens.get('chip-selectable-selected-disabled-fg');
        background-color: tokens.get('chip-selectable-selected-disabled-bg');
        border-color: tokens.get('chip-selectable-selected-disabled-stroke');

        .badge {
          color: tokens.get('chip-selectable-badge-selected-disabled-fg');
          background-color: tokens.get('chip-selectable-badge-selected-disabled-bg');
        }
      }
    }

    &:not(:checked) {
      + label:hover {
        color: tokens.get('chip-hovered-fg');
        background-color: tokens.get('chip-hovered-bg');
        border-color: tokens.get('chip-hovered-stroke');

        @include utilities.high-contrast-mode() {
          border-color: highlight;
        }

        .badge {
          color: tokens.get('chip-selectable-badge-hovered-fg');
          background-color: tokens.get('chip-selectable-badge-hovered-bg');
        }
      }

      @include utilities.disabled-style('+ label') {
        @include chip-mx.chip-styles-disabled();

        .badge {
          color: tokens.get('chip-selectable-badge-disabled-fg');
          background-color: tokens.get('chip-selectable-badge-disabled-bg');
        }
      }
    }

    &:checked:disabled + label,
    &:not(:checked):disabled + label {
      &::before {
        background-color: GrayText;
      }

      .badge {
        @include utilities.high-contrast-mode() {
          color: GrayText;
          border-color: GrayText;
        }
      }
    }
  }
}

.chip-dismissible-group,
.chip-selectable-group {
  display: flex;
  flex-wrap: wrap;
}

.chip-dismissible-group {
  gap: tokens.get('chip-dismissible-group-gap');
}

.chip-selectable-group {
  gap: tokens.get('filter-chips-group-selectable-gap', components.$post-filter);
}
