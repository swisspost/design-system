@forward './../variables/options';

@use 'sass:map';
@use './../themes/bootstrap/core' as *;
@use './../variables/spacing';
@use './../variables/breakpoints';
@use './../mixins/utilities';

// Post margins, paddings and sizes
@each $breakpoint in map-keys(breakpoints.$grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: if($breakpoint == 'xs', '', '-#{$breakpoint}');

    @each $prop,
      $abbrev
        in (
          margin: m,
          padding: p,
          line-height: lh,
          height: h,
          max-height: mh,
          width: w,
          max-width: mw,
          gap: gap
        )
    {
      @each $size, $length in spacing.$post-sizes {
        @if ($prop == margin or $prop == padding) {
          .#{$abbrev}t#{$infix}-#{$size},
          .#{$abbrev}y#{$infix}-#{$size} {
            #{$prop}-top: $length !important;
          }

          .#{$abbrev}e#{$infix}-#{$size},
          .#{$abbrev}x#{$infix}-#{$size} {
            #{$prop}-right: $length !important;
          }

          .#{$abbrev}b#{$infix}-#{$size},
          .#{$abbrev}y#{$infix}-#{$size} {
            #{$prop}-bottom: $length !important;
          }

          .#{$abbrev}s#{$infix}-#{$size},
          .#{$abbrev}x#{$infix}-#{$size} {
            #{$prop}-left: $length !important;
          }
        }

        .#{$abbrev}#{$infix}-#{$size} {
          #{$prop}: $length !important;
        }
      }
    }
  }
}

// Generate responsive spacing utility classes, a lot of them
$cache: ();

@each $breakpoint-key, $breakpoint-value in breakpoints.$grid-breakpoints {
  @if ($breakpoint-key == 'xs') {
    @each $curve-name, $curve-sizes in spacing.$size-curves {
      $value: map.get($curve-sizes, $breakpoint-key);

      @each $classname, $property in spacing.$responsive-spacing-properties {
        $cache: map.set($cache, $classname + $curve-name, $value);
        @include utilities.generate-utility-class($classname, $curve-name, $property, $value);
      }
    }
  } @else {
    // Media queries create a scope, upstream variables become read-only and updating the $cache
    // is impossible from within the media query. Therefore we first compile a stack of utility
    // classes to compile, and then compile them. With caching, we're able to skip 370 utility
    // classes from being written (765 vs. 2248 lines of code unminified)

    $stack: ();

    @each $curve-name, $curve-sizes in spacing.$size-curves {
      $value: map.get($curve-sizes, $breakpoint-key);

      @each $classname, $property in spacing.$responsive-spacing-properties {
        @if (map.get($cache, $classname + $curve-name) != $value) {
          $stack: map.set($stack, $classname, $curve-name, $property, $value);
          $cache: map.set($cache, $classname + $curve-name, $value);
        }
      }
    }

    // Render the stack
    @include media-breakpoint-up($breakpoint-key) {
      @each $classname, $class-map in $stack {
        @each $curve-name, $curve-map in $class-map {
          @each $property, $value in $curve-map {
            @include utilities.generate-utility-class($classname, $curve-name, $property, $value);
          }
        }
      }
    }
  }
}
