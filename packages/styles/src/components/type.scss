@forward './../variables/options';

@use 'sass:map';
@use 'sass:meta';

@use './../lic/bootstrap-license';
@use './../themes/bootstrap/core' as *;
@use './../themes/bootstrap/type' as bt;

@use './../variables/color';
@use './../variables/commons';
@use './../variables/type';
@use './../variables/spacing';
@use './../variables/components/paragraph';
@use './../layouts/portal/type' as portal;
@use './../placeholders/text';
@use './../mixins/type' as type-mx;
@use '../functions/tokens' as tokens;
@use '../tokens/elements' as elements;

tokens.$default-map: elements.$post-heading;

// Deprecated
@each $key, $curve in type.$font-curves {
  .font-curve-#{$key} {
    @include type-mx.font-curve($key);
  }
}

@each $key, $font-size in type.$font-size-map {
  .font-size-#{$key} {
    font-size: $font-size;

    // Font sizes bigger than 24px can have a reduced line height
    @if ($key >= 24) {
      line-height: type.$line-height-heading;
    }
  }
}

h1,
.h1,
h2,
.h2,
h3,
.h3,
h4,
.h4,
h5,
.h5,
h6,
.h6 {
  line-height: tokens.get('post-heading', 'line-height');
  font-weight: tokens.get('post-heading', 'font-weight');
}

h1,
.h1 {
  font-size: tokens.get('post-h1', 'font-size');
  margin-block-start: tokens.get('post-h1', 'margin-block-start');
  margin-block-end: tokens.get('post-h1', 'margin-block-end');
}

h2,
.h2 {
  font-size: tokens.get('post-h2', 'font-size');
  margin-block-start: tokens.get('post-h2', 'margin-block-start');
  margin-block-end: tokens.get('post-h2', 'margin-block-end');
}

h3,
.h3 {
  font-size: tokens.get('post-h3', 'font-size');
  margin-block-start: tokens.get('post-h3', 'margin-block-start');
  margin-block-end: tokens.get('post-h3', 'margin-block-end');
}
h4,
.h4 {
  font-size: tokens.get('post-h4', 'font-size');
  margin-block-start: tokens.get('post-h4', 'margin-block-start');
  margin-block-end: tokens.get('post-h4', 'margin-block-end');
}

h5,
.h5 {
  font-size: tokens.get('post-h5', 'font-size');
  margin-block-start: tokens.get('post-h5', 'margin-block-start');
  margin-block-end: tokens.get('post-h5', 'margin-block-end');
}

h6,
.h6 {
  font-size: tokens.get('post-h6', 'font-size');
  margin-block-start: tokens.get('post-h6', 'margin-block-start');
  margin-block-end: tokens.get('post-h6', 'margin-block-end');
}

fieldset {
  legend {
    font-size: type.$font-size-18;
    font-weight: type.$font-weight-bold;
  }
}

.blockquote {
  margin-top: type.$blockquote-margin-top;

  p {
    @extend %font-curve-regular;

    &::before {
      content: '\00ab';
    }

    &::after {
      content: '\00bb';
    }

    &:lang(en) {
      &::before {
        content: '\0022';
      }

      &::after {
        content: '\0022';
      }
    }
  }

  &,
  &-footer {
    padding-left: type.$blockquote-padding-left;
    border-left: type.$blockquote-border-left;
    font-weight: type.$blockquote-font-weight;

    @include media-breakpoint-up(md) {
      border-left-width: type.$blockquote-border-left-width-md;
    }

    @include media-breakpoint-up(xxl) {
      padding-left: type.$blockquote-padding-left-xxl;
    }
  }

  &-footer {
    color: var(--post-contrast-color);

    cite {
      @extend %font-curve-small;
      font-weight: type.$blockquote-cite-font-weight;
    }
  }
}

q {
  quotes: '\00ab' '\00bb' '\2039' '\203A';

  &:lang(en) {
    quotes: '\0022' '\0022' '\0027' '\0027';
  }
}

.text-body {
  @include portal.styles;
}

code {
  color: inherit;
  font-size: inherit;
}

hr {
  border-block-start-color: rgba(var(--post-contrast-color-rgb), 0.1);
}
