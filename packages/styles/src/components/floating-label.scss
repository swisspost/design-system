@use 'sass:color';
@use 'sass:math';

@forward './../variables/options';

@use './../mixins/forms' as forms-mx;
@use './../mixins/utilities' as utilities-mx;

@use './../functions/sizing';

@use './../variables/type';
@use './../variables/spacing';
@use './../variables/components/forms';
@use './../variables/components/form-validation';
@use './../variables/animation';
@use './../functions/tokens';
@use './../tokens/components';

tokens.$default-map: components.$post-text-input;

.form-floating {
  position: relative;

  > .form-control,
  > .form-select {
    height: tokens.get('input-sizing-height');
    min-height: tokens.get('input-sizing-height');
    line-height: tokens.get('input-sizing-line-height');
  }

  > label {
    position: absolute;
    z-index: 2;
    text-align: start;
    pointer-events: none;
    display: block;
    top: tokens.get('input-sizing-border-width');
    left: tokens.get('input-sizing-border-width');
    margin: 0;
    padding: tokens.get('input-spacing-padding-block-label-start')
      tokens.get('input-spacing-padding-inline-label-end')
      tokens.get('input-spacing-padding-block-label-end')
      tokens.get('input-spacing-padding-inline-label-start');
    border: 0;
    color: tokens.get('input-color-enabled-fg');
    font-size: tokens.get('input-sizing-label-enabled');
    width: auto;
    height: auto;
    max-width: calc(100% - (#{tokens.get('input-sizing-border-width') * 2}));
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    transform-origin: tokens.get('input-spacing-padding-inline-label-start') 0;
    transition: forms.$form-floating-transition;
  }

  > .form-control {
    &::placeholder {
      color: transparent;
    }

    &:focus,
    &:not(:placeholder-shown) {
      padding-top: tokens.get('input-spacing-padding-block-input-start');
      padding-bottom: tokens.get('input-spacing-padding-block-text2');

      ~ label {
        color: tokens.get('input-color-selected-fg');
        padding-top: tokens.get('input-spacing-padding-block-label-focus-start');
        max-width: calc(
          (100% * #{forms.$form-floating-label-upscale}) - #{forms.$form-floating-label-translate-x *
            forms.$form-floating-label-upscale * 2} - #{tokens.get('input-sizing-border-width') * forms.$form-floating-label-upscale *
            2}
        );
      }
    }

    // Duplicated because `:-webkit-autofill` invalidates other selectors when grouped
    &:-webkit-autofill {
      padding-top: tokens.get('input-spacing-padding-block-input-start');
      padding-bottom: tokens.get('input-spacing-padding-block-text2');
    }

    @include forms-mx.placeholder {
      opacity: 0;
    }

    &:focus {
      @include forms-mx.placeholder {
        color: tokens.get('input-color-helptext-fg');
        opacity: 1;
      }
    }

    &:disabled ~ label {
      color: tokens.get('input-color-disabled-fg');
    }

    &:hover ~ label {
      color: tokens.get('input-color-enabled-fg');
    }

    &[type='file'] {
      &:focus,
      &:not(:placeholder-shown) {
        padding-top: tokens.get('input-spacing-padding-block-input-start') * 1.33;
      }
    }
  }

  > .form-select {
    padding-top: tokens.get('input-spacing-padding-block-input-start');
    padding-bottom: tokens.get('input-spacing-padding-block-text2');

    ~ label {
      color: tokens.get('input-color-enabled-fg');
      padding-top: tokens.get('input-spacing-padding-block-label-focus-start');
      max-width: calc(
        (100% * #{forms.$form-floating-label-upscale}) - #{forms.$form-floating-label-translate-x *
          forms.$form-floating-label-upscale * 2} - #{tokens.get('input-sizing-border-width') * forms.$form-floating-label-upscale *
          2}
      );
      transition: forms.$form-floating-transition;
    }

    &:disabled {
      ~ label {
        color: tokens.get('input-color-disabled-fg');
      }
    }

    &:empty,
    &.form-select-empty {
      padding-top: tokens.get('input-spacing-padding-block-input-start');
      padding-bottom: tokens.get('input-spacing-padding-block-text2');

      ~ label {
        padding-top: tokens.get('input-spacing-padding-block-label-focus-start');
        max-width: calc(100% - (#{tokens.get('input-sizing-border-width') * 2}));
        transform: none;
      }
    }

    &[multiple] {
      padding-top: spacing.$size-big;
      padding-bottom: 0;
      height: auto;

      ~ label {
        padding-top: forms.$input-padding-y-lg * forms.$form-floating-label-scale;
        padding-bottom: 0;
        width: calc(
          (100% * #{forms.$form-floating-label-upscale}) - #{forms.$form-floating-label-translate-x *
            forms.$form-floating-label-upscale * 2} - #{tokens.get('input-sizing-border-width') * forms.$form-floating-label-upscale *
            2} - #{tokens.get('input-spacing-padding-inline-label-start') *
            forms.$form-floating-label-upscale}
        );
        height: auto;
        left: tokens.get('input-sizing-border-width') * 3;
      }

      &:not(:disabled) {
        ~ label {
          background: tokens.get('input-color-enabled-fg');
        }
      }

      &:empty {
        ~ label {
          padding-top: forms.$form-floating-padding-y;
          padding-bottom: forms.$form-floating-padding-y;
          width: calc(
            100% - (#{tokens.get('input-sizing-border-width') * 2}) - #{tokens.get(
                'input-spacing-padding-inline-label-start'
              )}
          );
        }
      }
    }
  }

  > .form-control:focus,
  > .form-control:not(:placeholder-shown),
  > .form-select {
    ~ label {
      color: tokens.get('input-color-selected-fg');
      transform: forms.$form-floating-label-transform;

      &::after {
        position: absolute;
        inset: forms.$form-floating-padding-y
          (tokens.get('input-spacing-padding-inline-label-start') * 0.5);
        z-index: -1;
        height: tokens.get('input-sizing-line-height');
        content: '';
        background-color: tokens.get('input-color-enabled-bg');
      }
    }
  }

  // Duplicated because `:-webkit-autofill` invalidates other selectors when grouped
  > .form-control:-webkit-autofill {
    ~ label {
      color: tokens.get('input-color-selected-fg');
      transform: forms.$form-floating-label-transform;
    }
  }

  > :disabled ~ label,
  > .form-control:disabled ~ label {
    // Required for `.form-control`s because of specificity
    color: tokens.get('input-color-disabled-fg');

    &::after {
      background-color: tokens.get('input-color-disabled-bg');
    }
  }

  > textarea.form-control {
    padding-top: forms.$form-floating-textarea-padding-t !important;
    padding-bottom: spacing.$size-mini;
    padding-right: spacing.$size-large;
    min-height: (forms.$form-floating-label-font-size * forms.$input-line-height-lg) +
      forms.$form-floating-textarea-padding-t + spacing.$size-mini +
      sizing.px-to-rem(tokens.get('input-sizing-border-width') * 2);
    height: auto;

    ~ label {
      padding-bottom: 0;
      width: calc(100% - (#{tokens.get('input-sizing-border-width') * 2}));
      max-width: none;
      height: unset;
      padding-top: spacing.$size-regular;
    }

    &:focus,
    &:not(:placeholder-shown) {
      padding-bottom: spacing.$size-mini;

      ~ label {
        padding-top: spacing.$size-mini;
        width: calc(
          (100% * #{forms.$form-floating-label-upscale}) - #{forms.$form-floating-label-translate-x *
            forms.$form-floating-label-upscale * 2} - #{tokens.get('input-sizing-border-width') * forms.$form-floating-label-upscale *
            2} - #{tokens.get('input-spacing-padding-inline-label-start') *
            forms.$form-floating-label-upscale}
        );
        max-width: none;
        background: tokens.get('input-color-enabled-fg');
      }
    }

    &:is(.is-valid, .is-invalid) {
      ~ label {
        width: calc(
          100% - (#{tokens.get('input-sizing-border-width') * 2}) - #{form-validation.$form-feedback-icon-offset} -
            #{tokens.get('input-sizing-height')}
        );
      }

      &:focus,
      &:not(:placeholder-shown) {
        ~ label {
          width: calc(
            (100% * #{forms.$form-floating-label-upscale}) - #{forms.$form-floating-label-translate-x *
              forms.$form-floating-label-upscale * 2} - #{tokens.get('input-sizing-border-width') * forms.$form-floating-label-upscale *
              2} - #{form-validation.$form-feedback-icon-offset * forms.$form-floating-label-upscale} -
              #{form-validation.$form-feedback-icon-size * forms.$form-floating-label-upscale}
          );
        }
      }
    }
  }

  @include utilities-mx.high-contrast-mode() {
    > input,
    > textarea {
      @include forms-mx.placeholder() {
        opacity: 0;
      }
    }
  }
}
