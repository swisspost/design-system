@use 'sass:map';
@use '../functions/tokens';
@use '../functions/icons';
@use './../mixins/icons' as icon-mixin;
@use '../tokens/components';

tokens.$default-map: components.$post-validation;

/*
Default feedback message classes
 */
.valid-feedback,
.invalid-feedback {
  display: none;
  align-items: flex-start;
  width: 100%;
  margin: 0;
  font-size: tokens.get('post-validation-font-size');
}

/*
 Valid input feedback
*/
.valid-feedback {
  color: tokens.get('post-validation-success');

  .was-validated :valid ~ &,
  .is-valid ~ & {
    display: flex;
  }
}

// Special for fieldset
.was-validated:has(:valid) ~ .valid-feedback,
:has(.is-valid) ~ .valid-feedback {
  display: flex;
}

// Special for fieldset
.was-validated:has(:invalid) ~ .invalid-feedback,
:has(.is-invalid) ~ .invalid-feedback {
  display: flex;
}

/*
 Invalid input feedback
*/
.invalid-feedback {
  color: tokens.get('post-validation-error');

  .was-validated :invalid ~ &,
  .is-invalid ~ & {
    display: flex;
  }
}

input:not([type='checkbox'], [type='radio']),
select,
textarea {
  ~ .invalid-feedback,
  ~ .valid-feedback {
    margin-block: tokens.get('assist-padding-block', components.$post-assist) !important;
    padding-inline: tokens.get('validation-input-padding-inline');
  }
}

/*
 Checkbox and Radio box specific classes
*/
input[type='checkbox'],
input[type='radio'],
:has(input[type='checkbox']),
:has(input[type='radio']) {
  ~ .invalid-feedback,
  ~ .valid-feedback {
    padding-inline-start: tokens.get('validation-group-padding-inline-start');

    &::before {
      height: tokens.get('validation-group-icon-size');
      width: tokens.get('validation-group-icon-size');
      margin-block-start: tokens.get('validation-group-icon-block-start');
      margin-block-end: tokens.get('validation-group-icon-block-end');
      margin-inline-end: tokens.get('validation-group-gap-inline');
      content: '';
      flex-shrink: 0;
      mask-size: contain;
      mask-position: center;
      mask-repeat: no-repeat;
    }
  }

  input[type='radio'],
  :has(input[type='radio']) {
    ~ .invalid-feedback,
    ~ .valid-feedback {
      margin-block-start: tokens.get('radio-button-gap-block-group', components.$post-radio-button);
      margin-block-end: tokens.get(
        'radio-button-padding-block-group',
        components.$post-radio-button
      );
    }
  }

  input[type='checkbox'],
  :has(input[type='checkbox']) {
    ~ .invalid-feedback,
    ~ .valid-feedback {
      margin-block-start: tokens.get('checkbox-gap-block-group', components.$post-checkbox);
      margin-block-end: tokens.get('checkbox-padding-block-group', components.$post-checkbox);
    }
  }

  ~ .invalid-feedback::before {
    @include icon-mixin.icon('warning');
  }

  ~ .valid-feedback::before {
    @include icon-mixin.icon('success');
  }
}
