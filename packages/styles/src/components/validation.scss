// post-validation-group-gap-inline
// post-validation-group-padDIng-block-text
// post-validation-group-icon-size
// post-validation-group-padding
// post-validation-error
// post-validation-success
// post-validation-input-padding-block
// post-validation-input-padding-inline
// post-validation-font-size#

@use 'sass:map';
@use '../tokens/elements';
@use '../functions/tokens';
@use '../functions/icons';
@use './../mixins/icons' as icon-mixin;
@use '../tokens/components';

tokens.$default-map: components.$post-validation;

/*
Default feedback message classes
 */
.valid-feedback,
.invalid-feedback {
  display: none;
  align-items: center;
  width: 100%;
  margin: 0;
  padding: tokens.get('post-validation-input-padding-block')
    tokens.get('post-validation-input-padding-inline');
  font-size: tokens.get('post-validation-font-size');
  line-height: tokens.get('post-validation-font-size');
}

/*
 Valid input feedback
*/
.was-validated :valid ~ .valid-feedback,
.is-valid ~ .valid-feedback {
  color: tokens.get('post-validation-success');
  display: flex;
}

/*
 Invalid input feedback
*/
.was-validated :invalid ~ .invalid-feedback,
.is-invalid ~ .invalid-feedback {
  color: tokens.get('post-validation-error');
  display: flex;
}

/*
 Checkbox and Radio box specific classes
*/
input[type='checkbox'],
input[type='radio'],
input[type='range'] {
  ~ .invalid-feedback,
  ~ .valid-feedback {
    padding: tokens.get('post-validation-group-padding-block-text');
    &::before {
      height: tokens.get('post-validation-group-icon-size');
      width: tokens.get('post-validation-group-icon-size');
      display: inline-block;
      margin-inline-end: tokens.get('post-validation-group-gap-inline');
      background-color: currentColor;
      content: '';
    }
  }

  ~ .invalid-feedback::before {
    @include icon-mixin.icon('val-error');
  }

  ~ .valid-feedback::before {
    @include icon-mixin.icon('val-success');
  }
}

/*
 Radio group with fieldset specific classes
*/

.was-validated fieldset:has(:valid),
.was-validated fieldset:has(:invalid),
fieldset:has(.is-valid),
fieldset:has(.is-invalid) {
  ~ .invalid-feedback,
  ~ .valid-feedback {
    &::before {
      height: tokens.get('post-validation-group-icon-size');
      width: tokens.get('post-validation-group-icon-size');
      display: inline-block;
      margin-inline-end: tokens.get('post-validation-group-gap-inline');
      background-color: currentColor;
      content: '';
    }
  }
}

.was-validated fieldset:has(:valid),
fieldset:has(.is-valid) {
  ~ .valid-feedback {
    color: tokens.get('post-validation-success');

    &::before {
      @include icon-mixin.icon('val-success');
    }
  }
}

.was-validated fieldset:has(:invalid),
fieldset:has(.is-invalid) {
  ~ .invalid-feedback {
    color: tokens.get('post-validation-error');

    &::before {
      @include icon-mixin.icon('val-error');
    }
  }
}
