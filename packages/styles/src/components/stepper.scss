@use 'sass:math';

@use './../mixins/icons' as icons-mx;
@use './../mixins/size' as size-mx;
@use './../mixins/utilities';

@use './../variables/color';
@use './../variables/commons';
@use './../variables/components/stepper';

@use './../themes/bootstrap/core' as *;

// for backward compatibility
.stepper-container {
  @include size-mx.responsive-size('big', 'margin-bottom');

  > .stepper-bar {
    display: none;
  }
}

.stepper {
  // start a counter for the step numbers
  counter-reset: step-index;

  @include utilities.reset-list;
  display: grid;
  position: relative;
  overflow: hidden;

  // the first column is half a step wide to make sure the separators are the same size even on small screens
  grid-template-columns: math.div(stepper.$stepper-indicator-size, 2);

  // all other columns are 1 fraction of the available space ase we don't know the number of steps
  grid-auto-columns: minmax(0, 1fr);

  // we use a padding and negative margin on the last step for the same reason we need the first column
  padding-inline-end: math.div(stepper.$stepper-indicator-size, 2);
}

.stepper-item {
  grid-row: 1;
  position: relative;

  &:not(:first-child) {
    padding-inline-start: math.div(stepper.$stepper-link-spacing, 2);
  }

  &:not(:last-child) {
    padding-inline-end: math.div(stepper.$stepper-link-spacing, 2);
    grid-column: span 2;
  }

  // progress bar
  &::before,
  &::after {
    content: '';
    display: block;
    position: absolute;
    inset-block-start: math.div((stepper.$stepper-indicator-size - stepper.$stepper-bar-height), 2);
    height: stepper.$stepper-bar-height;
    background-color: stepper.$stepper-bar-color;
    inset-inline: 0 0;
  }

  &:not(:first-child, :last-child) {
    &::before {
      inset-inline-end: 50%;
    }

    &::after {
      inset-inline-start: 50%;
    }
  }

  // current and completed steps are preceded by a yellow segment (except for the first step)
  &:not(&[aria-current='step'] ~ *, :first-child)::before,
  // completed steps are also followed by a yellow segment (except for the last step)
  &:not([aria-current='step']:not(:last-child), &[aria-current='step'] ~ *)::after {
    background-color: stepper.$stepper-bar-fill-color;
    z-index: 1;
  }
}

.stepper-link {
  // -webkit-box is needed for line-clamp: https://caniuse.com/css-line-clamp
  // stylelint-disable-next-line value-no-vendor-prefix
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 2;
  position: relative;
  z-index: 2;
  overflow: hidden;
  text-decoration: none;
  color: stepper.$stepper-link-color;
  width: fit-content;
  line-height: stepper.$stepper-link-line-height;

  // not adding ellipsis if the like doesn't have a title for accessibility reasons
  &:not([title]) {
    -webkit-line-clamp: initial;
  }

  .stepper-item:not(:first-child, :last-child) > & {
    margin-inline: auto;
    text-align: center;
  }

  .stepper-item:last-child > & {
    margin-inline-start: auto;
    margin-inline-end: -1 * math.div(stepper.$stepper-indicator-size, 2); // negative margin matching the container padding
    text-align: end;
  }

  .stepper-item[aria-current='step'] > & {
    color: stepper.$stepper-link-current-color;
    font-weight: stepper.$stepper-link-current-font-weight;
  }
}

// step indicator
.stepper-link::before {
  counter-increment: step-index;
  content: counter(step-index);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1;
  height: stepper.$stepper-indicator-size;
  width: stepper.$stepper-indicator-size;
  box-sizing: border-box;
  margin-block-end: stepper.$stepper-link-gap;
  color: stepper.$stepper-indicator-color;
  background-color: stepper.$stepper-indicator-bg;
  border: stepper.$stepper-indicator-border-width solid stepper.$stepper-indicator-border-color;
  border-radius: 50%;
  font-weight: stepper.$stepper-indicator-font-weight;
  text-indent: initial;
  transition: stepper.$stepper-indicator-transition;

  .stepper-item:not(:first-child, :last-child) > & {
    margin-inline: auto;
  }

  .stepper-item:last-child > & {
    margin-inline-start: auto;
  }

  .stepper-item:not([aria-current='step'], .stepper-item[aria-current='step'] ~ *) > & {
    color: transparent;
  }

  .stepper-item[aria-current='step'] ~ .stepper-item > & {
    color: stepper.$stepper-indicator-future-color;
    background-color: stepper.$stepper-indicator-future-bg;
  }
}

// check icon
.stepper-link::after {
  @include icons-mx.icon(2105);
  display: block;
  position: absolute;
  top: math.div((stepper.$stepper-indicator-size - stepper.$stepper-indicator-check-icon-size), 2);
  z-index: 1;
  height: stepper.$stepper-indicator-check-icon-size;
  width: stepper.$stepper-indicator-check-icon-size;
  transition: stepper.$stepper-indicator-transition;
  color: stepper.$stepper-indicator-color;

  .stepper-item:first-child > & {
    left: math.div(
      (stepper.$stepper-indicator-size - stepper.$stepper-indicator-check-icon-size),
      2
    );
  }

  .stepper-item:not(:first-child, :last-child) > & {
    left: calc(50% - #{math.div(stepper.$stepper-indicator-check-icon-size, 2)});
  }

  .stepper-item:last-child > & {
    right: math.div(
      (stepper.$stepper-indicator-size - stepper.$stepper-indicator-check-icon-size),
      2
    );
  }

  // show only for completed steps
  .stepper-item:not([aria-current='step'], .stepper-item[aria-current='step'] ~ *) > & {
    content: '';
  }
}

// hover/focus state
.stepper-link:is(a[href]) {
  @include utilities.focus-style {
    border-radius: commons.$border-radius;
  }

  @include utilities.focus-hover-style-custom() {
    color: stepper.$stepper-link-color;

    .stepper-item[aria-current='step'] > & {
      color: stepper.$stepper-link-current-color;
    }

    // step indicator
    &::before,
    .stepper-item[aria-current='step'] ~ .stepper-item > &::before {
      color: stepper.$stepper-indicator-hover-color;
      background-color: stepper.$stepper-indicator-hover-bg;
    }

    // check icon
    &::after {
      color: stepper.$stepper-indicator-hover-color;
    }
  }
}

// smaller screens
@include media-breakpoint-down(rg) {
  .stepper-item:first-child,
  .stepper-item:last-child {
    padding-inline: 0;
  }

  .stepper-item[aria-current='step'] {
    // using "display: contents" on the stepper-item and stepper-link so that label, indicator and progress bar can be directly placed in the grid
    display: contents;

    > .stepper-link {
      display: contents;
    }

    // progress bar
    &::before {
      grid-row: -1;
      margin-block-start: math.div(
        (stepper.$stepper-indicator-size - stepper.$stepper-bar-height),
        2
      );
      position: static;
    }

    &:not(:last-child) > .stepper-link::before {
      grid-row: -1;
    }

    &:not(:first-child, :last-child)::after {
      inset-inline-start: 0;
    }
  }

  .stepper-item:not([aria-current='step']) {
    grid-row: -1;
    justify-self: stretch;

    // hide completed and future step labels
    > .stepper-link {
      -webkit-line-clamp: initial;
      line-height: 0;
      text-indent: 100%;
    }
  }

  .stepper-link {
    white-space: nowrap;
    width: 100%;
  }

  // step indicator
  .stepper-link::before {
    .stepper-item[aria-current='step']:first-child > & {
      order: -1;
    }

    .stepper-item[aria-current='step']:not(:first-child, :last-child) > & {
      margin-inline-start: 0;
      transform: translateX(-50%);
    }

    .stepper-item[aria-current='step']:last-child > & {
      position: absolute;
      z-index: 2;
      inset-block-start: 0;
      inset-inline-end: 0;
    }
  }
}

@include utilities.high-contrast-mode {
  .stepper-item {
    &::before,
    &::after {
      background-color: CanvasText;
    }

    &:not(&[aria-current='step'] ~ &, :first-child)::before,
    &:not([aria-current='step']:not(:last-child), &[aria-current='step'] ~ *)::after {
      background-color: Highlight;
    }
  }

  .stepper-link {
    &::before {
      forced-color-adjust: none;
    }

    .stepper-item[aria-current='step'] > & {
      &::before {
        background-color: Canvas;
        color: CanvasText;
      }
    }

    .stepper-item[aria-current='step'] ~ .stepper-item > &,
    .stepper-item:not([aria-current='step']) > & {
      &::before {
        color: Canvas;
        border-color: Canvas;
        background-color: CanvasText;
      }
    }

    &::after {
      color: Canvas;
    }
  }

  .stepper-link:is(a[href]) {
    .stepper-item[aria-current='step'] > & {
      @include utilities.focus-hover-style-custom() {
        &::before {
          border-color: Highlight;
        }
      }
    }

    .stepper-item[aria-current='step'] ~ .stepper-item > & {
      &::before {
        color: Canvas;
      }

      @include utilities.focus-hover-style-custom() {
        &::before {
          background-color: Highlight;
          color: HighlightText;
        }
      }
    }

    .stepper-item:not([aria-current='step']) > & {
      &::before {
        background-color: LinkText;
      }

      @include utilities.focus-hover-style-custom() {
        &::before {
          background-color: Highlight;
        }

        &::after {
          color: HighlightText;
        }
      }
    }
  }
}
