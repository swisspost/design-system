@use './../mixins/utilities';
@use './../functions/tokens';
@use './../tokens/components';
@use './../mixins/forms';

tokens.$default-map: components.$post-select;

.form-select {
  position: relative;
  display: block;
  min-height: 64px; //TODO: Should be a token
  width: 100%;
  padding-block: tokens.get('select-unfilled-padding-block-section');
  padding-inline-start: tokens.get('select-padding-inline-section-start');
  padding-inline-end: tokens.get('select-padding-inline-section-end');
  appearance: none;
  background-color: tokens.get('select-enabled-bg');
  background-repeat: no-repeat;
  background-size: 24px; //TODO: Should be a token
  background-position: center right tokens.get('select-padding-inline-section-end');
  border-width: tokens.get('select-border-width');
  border-color: tokens.get('select-enabled-stroke');
  border-radius: tokens.get('select-border-radius');
  color: tokens.get('select-enabled-fg');
  @include forms.select-bg-image('enabled');

  &:disabled {
    color: tokens.get('select-disabled-fg');
    background-color: tokens.get('select-disabled-bg');
    border-color: tokens.get('select-disabled-stroke');
    border-style: tokens.get(
      'input-border-style-disabled',
      components.$post-text-input
    ); //TODO: Should be select token

    &:not([multiple]) {
      @include forms.select-bg-image('disabled');
    }
  }

  &:not(:disabled) {
    &:focus {
      background-color: tokens.get('select-selected-bg');
      color: tokens.get('select-selected-fg');
      border-color: tokens.get('select-selected-stroke');
      @include forms.select-bg-image('selected');

      @include utilities.focus-style;

      @include utilities.high-contrast-mode {
        border-color: FieldText;
      }
    }

    &:hover {
      background-color: tokens.get('select-hover-bg');
      color: tokens.get('select-enabled-fg');
      border-color: tokens.get('select-hover-stroke');

      &:not([multiple]) {
        @include forms.select-bg-image('hover');
      }

      @include utilities.high-contrast-mode {
        border-color: Highlight;
      }
    }
  }

  @include utilities.high-contrast-mode() {
    background-color: Field;
    border-color: FieldText;
    color: FieldText;

    &:focus-visible {
      color: FieldText;
    }
  }

  &.is-valid,
  &.is-invalid {
    &:not(:disabled) {
      background-position:
        center right
          tokens.get('input-validation-icon-position-inline-end', components.$post-text-input),
        center right 50px; //TODO: Should be calculated and be a token
    }
  }

  &.is-valid:not(:disabled) {
    @include forms.select-bg-image('enabled', 'valid');

    &:focus {
      @include forms.select-bg-image('selected', 'valid');
    }

    &:hover {
      &:not([multiple]) {
        @include forms.select-bg-image('hover', 'valid');
      }
    }
  }

  &.is-invalid:not(:disabled) {
    @include forms.select-bg-image('enabled', 'invalid');

    &:focus {
      @include forms.select-bg-image('selected', 'invalid');
    }

    &:hover {
      &:not([multiple]) {
        @include forms.select-bg-image('hover', 'invalid');
      }
    }
  }

  &[multiple],
  &[size]:not([size='1']) {
    background-image: none;

    &.is-valid:not(:disabled) {
      @include forms.select-bg-image($validation: 'valid');
    }

    &.is-invalid:not(:disabled) {
      @include forms.select-bg-image($validation: 'invalid');
    }
  }
}

.form-floating {
  > .form-select:not(:disabled):hover ~ label {
    color: tokens.get('select-hover-fg');
  }

  > .form-select:disabled ~ label {
    color: tokens.get('select-disabled-fg');
  }
}
