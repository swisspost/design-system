@use '../mixins/utilities' as utilities-mx;
@use '../variables/spacing';
@use '../variables/color';
@use '../variables/animation';
@use '../variables/elevation';

@use '../functions/tokens';
@use '../tokens/utilities';
@use '../mixins/media';

tokens.$default-map: utilities.$post-spacing;

dialog {
  box-shadow: elevation.$elevation-500;
  padding: 0;
  min-width: min(389px, 90vw);
  max-width: 590px;
  /* Constrain overall dialog size but don't make the entire dialog scrollable.
     Only the body should scroll so header/footer/close remain visible. */
  max-height: 90vh;
  overflow: visible;
  margin: revert;
  overscroll-behavior: contain;
  border: 2px solid color.$black; // Ensures good contrast when bg is dark against dark backdrop

  &::backdrop {
    background-color: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(0);
  }

  @include utilities-mx.high-contrast-mode {
    // Show the border in HCM
    border-width: 2px;

    // Mark the backdrop as inactive in HCM
    &::backdrop {
      background-image: linear-gradient(
        135deg,
        CanvasText 4.55%,
        transparent 4.55%,
        transparent 50%,
        CanvasText 50%,
        CanvasText 54.55%,
        transparent 54.55%,
        transparent 100%
      );
      background-size: 22px 22px;
      backdrop-filter: none;
      background-color: transparent;
      forced-color-adjust: none;
    }
  }

  // Sizes
  // [small, medium (default), large]
  &[data-size='small'] {
    min-width: 296px;
    max-width: 388px;
  }

  &[data-size='large'] {
    min-width: min(600px, 90vw);
    max-width: 792px;
  }

  // Positioning
  // [top, center (default), bottom]
  &[data-position='top'] {
    top: 2rem;
    bottom: auto;
  }

  &[data-position='bottom'] {
    top: auto;
    bottom: 2rem;
  }
}

dialog > .dialog-grid {
  padding: tokens.get('utility-gap-16') tokens.get('utility-gap-16') 0;
  display: grid;
  /* Layout as header / body / controls so the middle row can take remaining
     space and be scrollable when content is long. */
  grid-template-rows: auto 1fr auto;
  /* Ensure the grid doesn't grow beyond the dialog's constrained height. */
  max-height: 90vh;
  min-height: 0;
  column-gap: tokens.get('utility-gap-16');
  grid-template-columns: auto 1fr auto;
  grid-template-areas:
    'icon header close-button'
    'icon body body'
    'controls controls controls';

  // Propagate bg color to the controls
  background-color: inherit;

  &:not(:has(.dialog-controls)) {
    padding-bottom: tokens.get('utility-gap-16');
  }
}

:where(.dialog-icon, .dialog-header, .dialog-body, .dialog-controls, .dialog-close):empty {
  display: none;
}

.dialog-grid {
  > post-icon {
    grid-area: icon;
    display: block;

    width: tokens.get('utility-gap-32');
    height: tokens.get('utility-gap-32');

    // Larger icon for bigger notification dialogs
    dialog:not([size='small']) & {
      @include media.min(sm) {
        width: tokens.get('utility-gap-48');
        height: tokens.get('utility-gap-48');
      }
    }
  }

  .dialog-header {
    grid-area: header;
    margin-top: 0;
    /* Keep header visible when the body scrolls. */
    position: sticky;
    top: 0;
    z-index: 2;
    background-color: inherit;
  }

  .dialog-body {
    grid-area: body;
    margin-bottom: 0;

    /* Make only the body scrollable. The grid's 1fr row will take the
       available space and overflow here will create the scrollbar. */
    overflow: auto;
    min-height: 0;

    > *:last-child {
      margin-bottom: 0;
    }
  }

  > post-closebutton {
    position: sticky;
    top: 0;
    grid-area: close-button;
    width: tokens.get('utility-gap-24');
    height: tokens.get('utility-gap-24');
    min-height: 0;
  }

  &:not(:has(> post-icon)) {
    .dialog-header {
      grid-area: 1 / icon / 1 / header;
    }

    .dialog-body {
      grid-area: 2 / icon / 2 / body;
    }
  }

  &:not(:has(> post-closebutton)) {
    .dialog-header {
      grid-area: 1 / header / 1 / close-button;
    }
  }

  &:not(:has(> post-icon, > post-closebutton)) {
    .dialog-header {
      grid-area: 1 / icon / 1 / close-button;
    }
  }
}

.dialog-controls {
  grid-area: controls;
  position: sticky;
  bottom: 0;
  padding-top: tokens.get('utility-gap-16');
  padding-bottom: tokens.get('utility-gap-16');
  margin-block-end: 0;
  display: flex;
  flex-wrap: wrap;
  flex-direction: row-reverse;
  gap: tokens.get('utility-gap-16');
  background-color: inherit;

  button {
    @include media.max(sm) {
      width: 100%;
    }
  }
}

// Animations
// [slide-in, pop-in, none]
// Progressively enhanced with currently experimental @starting-style which allows to animate stuff appearing in the top layer
// https://developer.mozilla.org/en-US/docs/Web/CSS/@starting-style
dialog:not([data-animation='none']) {
  --_dialog-transition-duration: var(--dialog-transition-duration, 0.5s);

  transform: scale(0.8);
  opacity: 0;
  transition-property: transform, opacity, overlay, display;
  transition-behavior: allow-discrete;
  transition-duration: var(--_dialog-transition-duration);
  transition-timing-function: linear(
    0,
    0.007,
    0.029 2.2%,
    0.118 4.7%,
    0.625 14.4%,
    0.826 19%,
    0.902,
    0.962,
    1.008 26.1%,
    1.041 28.7%,
    1.064 32.1%,
    1.07 36%,
    1.061 40.5%,
    1.015 53.4%,
    0.999 61.6%,
    0.995 71.2%,
    1
  );

  &::backdrop {
    opacity: 0;
    transition:
      backdrop-filter var(--_dialog-transition-duration),
      opacity var(--_dialog-transition-duration),
      overlay var(--_dialog-transition-duration) allow-discrete,
      display var(--_dialog-transition-duration) allow-discrete;
  }

  &[open] {
    transform: scale(1);
    opacity: 1;

    @starting-style {
      opacity: 0;
      transform: scale(0.8);
    }

    &::backdrop {
      opacity: 1;
      backdrop-filter: blur(10px);

      @starting-style {
        opacity: 0;
        backdrop-filter: blur(0);
      }

      @media (forced-colors: active) {
        backdrop-filter: none;
      }
    }
  }

  &[data-animation='slide-in'] {
    transform: translateY(calc(var(--_dialog-slide-in-offset)));

    &[data-position='top'] {
      --_dialog-slide-in-offset: -3rem;
    }

    &[data-position='bottom'] {
      --_dialog-slide-in-offset: 3rem;
    }

    &[open] {
      transform: translateY(0);

      @starting-style {
        transform: translateY(calc(var(--_dialog-slide-in-offset)));
      }
    }
  }
}
