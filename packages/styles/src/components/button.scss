@forward './../variables/options';

@use 'sass:map';
@use 'sass:math';

@use './../variables/components/button';
@use './../variables/color';
@use './../variables/commons';
@use './../variables/type';
@use './../variables/spacing';
@use './../mixins/color' as color-mx;
@use './../mixins/icons' as icon-mx;
@use './../mixins/utilities';
@use './../mixins/forms';
@use './../mixins/button' as button-mx;
@use './../mixins/icon-button' as icon-button-mx;
@use './../functions/icons' as icon-fn;
@use './../functions/color' as color-fn;
@use './../placeholders/button' as button-ph;
@use '../functions/tokens';
@use '../tokens/components';

tokens.$default-map: components.$post-button;

.btn {
  // Resets
  display: inline-flex;
  position: relative;
  align-items: center;
  justify-content: center;
  max-width: 100%;
  overflow: hidden;
  transition: button.$btn-transition;
  border-width: tokens.get('button-border-width');
  border-style: solid;
  border-radius: tokens.get('button-border-radius-round');
  background-color: transparent;
  box-shadow: none;
  color: var(--post-gray-80);
  font-family: inherit;
  font-weight: tokens.get('button-label-font-weight');
  text-decoration: none !important; // For <a> tags, !important for hover
  white-space: nowrap; // Long content should never break in buttons

  @include button-mx.button-size();

  &:disabled {
    border-style: tokens.get('button-border-style-disabled');
  }

  @include utilities.focus-style(
    null,
    tokens.get('button-focus-outline-offset'),
    tokens.get('button-focus-border-width'),
    tokens.get('button-focus-stroke')
  ) {
  }

  @include color-mx.on-dark-background {
    @include utilities.focus-style(null, null, null, tokens.get('button-focus-stroke-inverted')) {
    }
  }

  // Styles  to improve accessibility in high contrast mode
  @include utilities.high-contrast-mode() {
    border-color: ButtonBorder;
    background-color: ButtonFace;

    &:not(:disabled, .disabled) {
      &:hover {
        border-color: highlight;
      }
    }

    &:disabled {
      border-color: GrayText !important;
    }

    .pi {
      filter: invert(1) !important;
    }
  }
}

// Type variants
@each $variant in button.$btn-variants {
  .btn-#{$variant} {
    $color: if($variant == 'default', 'secondary', if($variant == 'link', 'tertiary', $variant));

    @if ($variant != 'link' and $variant != 'tertiary') {
      box-shadow: tokens.get('button-elevation');
    }

    @include button-mx.button-variant-def('enabled', $color);

    &:disabled {
      @include button-mx.button-variant-def('disabled', $color);
    }

    @include utilities.not-disabled-hover() {
      @include button-mx.button-variant-def('hover', $color);
    }

    @include color-mx.on-dark-background {
      @include button-mx.button-variant-def('enabled', $color, true);

      &:disabled {
        @include button-mx.button-variant-def('disabled', $color, true);
      }

      @include utilities.not-disabled-hover() {
        @include button-mx.button-variant-def('hover', $color, true);
      }
    }
  }
}

// Primary
.btn-primary {
  .pi {
    filter: invert(1);
    forced-color-adjust: none;
  }

  @include color-mx.on-dark-background {
    .pi {
      filter: invert(0);
    }
  }
}

// Tertiary
.btn-link,
.btn-tertiary {
  // Styles  to improve accessibility in high contrast mode
  @include utilities.high-contrast-mode() {
    color: linktext;
    text-decoration: underline !important;
  }
}

// Tertiary with no padding
.btn-link {
  padding-inline-start: 0;
  padding-inline-end: 0;
}

// Animated
.btn-animated,
.btn-animated-start {
  &:not(.btn-link, .btn-tertiary) {
    &::after {
      @include icon-mx.icon(2111);
      content: '';
      display: block;
      height: 2em;
      width: 2em;
      position: absolute;
      transition:
        opacity 250ms,
        transform 250ms;
      opacity: 0;
    }

    > span {
      transition: transform 250ms;
    }

    @media (prefers-reduced-motion: no-preference) {
      @include utilities.not-disabled-focus-hover() {
        &::after {
          transform: translateX(0);
          opacity: 1;
        }
      }

      > span {
        // Initially transform to place text in the right rendering context for a smooth animation
        transform: translateX(0);
      }
    }
  }
}

.btn-animated:not(.btn-link, .btn-tertiary) {
  &::after {
    right: button.$btn-padding-x-md - button.$btn-animation-distance-md -
      (math.div(button.$btn-font-size-md * 2, 3));
    transform: translateX(button.$btn-border-width * -1);
  }

  @each $size in button.$btn-non-default-sizes {
    &.btn-#{$size}::after {
      right: map.get(button.$btn-padding-x-map, $size) - map.get(
          button.$btn-animation-distance-map,
          $size
        ) -
        (math.div(map.get(button.$btn-font-size-map, $size) * 2, 3));
    }
  }

  // Only animate when user prefers to see animations
  @media (prefers-reduced-motion: no-preference) {
    @include utilities.not-disabled-focus-hover() {
      > span {
        transform: translateX(map.get(button.$btn-animation-distance-map, md) * -1);
      }

      @each $size in button.$btn-non-default-sizes {
        &.btn-#{$size} > span {
          transform: translateX(map.get(button.$btn-animation-distance-map, $size) * -1);
        }
      }
    }
  }
}

.btn-animated-start:not(.btn-link, .btn-tertiary) {
  &::after {
    @include icon-mx.icon(2110);
    left: button.$btn-padding-x-md - button.$btn-animation-distance-md -
      (math.div(button.$btn-font-size-md * 2, 3));
    transform: translateX(button.$btn-border-width);
  }

  @each $size in button.$btn-non-default-sizes {
    &.btn-#{$size}::after {
      left: map.get(button.$btn-padding-x-map, $size) - map.get(
          button.$btn-animation-distance-map,
          $size
        ) -
        (math.div(map.get(button.$btn-font-size-map, $size) * 2, 3));
    }
  }

  // Only animate when user prefers to see animations
  @media (prefers-reduced-motion: no-preference) {
    @include utilities.not-disabled-focus-hover() {
      > span {
        transform: translateX(map.get(button.$btn-animation-distance-map, md));
      }

      @each $size in button.$btn-non-default-sizes {
        &.btn-#{$size} > span {
          transform: translateX(map.get(button.$btn-animation-distance-map, $size));
        }
      }
    }
  }
}

// Size variants, default is md
@each $size in button.$btn-non-default-sizes {
  .btn-#{$size} {
    @include button-mx.button-size($size);
  }
}
