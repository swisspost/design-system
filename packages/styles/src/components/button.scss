@forward './../variables/options';

@use 'sass:map';
@use 'sass:math';

@use './../variables/components/button';
@use './../variables/color';
@use './../variables/type';
@use './../variables/spacing';
@use './../mixins/color' as color-mx;
@use './../mixins/icons';
@use './../mixins/utilities';
@use './../mixins/forms';
@use './../mixins/button' as button-mx;
@use './../functions/icons' as icon-fn;
@use './../functions/color' as color-fn;
@use './../placeholders/button' as button-ph;

.btn {
  @include button-mx.button-size();
  @include forms.focus-outline();

  // Resets
  display: inline-flex;
  position: relative;
  align-items: center;
  justify-content: center;
  max-width: 100%;
  overflow: hidden;
  transition: button.$btn-transition;
  border-width: button.$btn-border-width;
  border-style: solid;
  border-radius: button.$btn-border-radius;
  background-color: transparent;
  box-shadow: none;
  color: var(--post-gray-80);
  font-family: inherit;
  font-weight: button.$btn-font-weight;
  text-decoration: none !important; // For <a> tags, !important for hover
  white-space: nowrap; // Long content should never break in buttons
}

// Primary
.btn-primary {
  border-color: transparent;
  background-color: var(--post-gray-80);
  color: var(--post-contrast-color-inverted);

  @include utilities.not-disabled-focus-hover() {
    background-color: var(--post-contrast-color);
    color: var(--post-contrast-color-inverted); // Override <a> color
  }

  @include color-mx.on-dark-background {
    background-color: var(--post-contrast-color);
    color: var(--post-gray-10); // Apply same color as secondary/tertiary button on dark theme

    @include utilities.not-disabled-focus-hover() {
      background-color: var(--post-gray-80);
    }

    &:disabled {
      color: var(--post-gray-80);
    }
  }

  @include color-mx.on-dark-background() {
    .pi {
      filter: invert(0);
    }
  }

  // Styles  to improve accessibility in high contrast mode
  @include utilities.high-contrast-mode() {
    border-color: var(--post-contrast-color);
    background-color: ButtonFace;

    &:not(:disabled, .disabled) {
      &:hover,
      &:focus-visible {
        border-color: highlight;
      }
    }

    .pi {
      filter: invert(1) !important;
    }
  }

  &:disabled {
    background-color: var(--post-gray-40);
  }

  .pi {
    filter: invert(1);
    forced-color-adjust: none;
  }
}

// Default / secondary
.btn-default,
.btn-secondary {
  @extend %btn-default;
  @extend %btn-transparent-background;
}

// Tertiary
.btn-link,
.btn-tertiary {
  @extend %btn-transparent-background;
  border: 0;
  padding-inline: spacing.$size-micro;

  &:disabled {
    color: var(--post-gray-60);
  }

  // Styles  to improve accessibility in high contrast mode
  @include utilities.high-contrast-mode() {
    color: linktext;
    text-decoration: underline !important;
  }
}

// Icon
.btn-icon {
  @include button-mx.icon-button();

  @each $size in button.$btn-non-default-sizes {
    &.btn-#{$size} {
      @include button-mx.icon-button($size);
    }
  }
}

// Animated
.btn-animated:not(.btn-link, .btn-tertiary) {
  &::after {
    content: '';
    position: absolute;
    right: button.$btn-padding-x-md - button.$btn-animation-distance-md;
    width: 0.625em;
    height: 0.625em;
    transform: rotateZ(315deg)
      translate(button.$btn-border-width * -1, button.$btn-border-width * -1);
    transform-origin: center center;
    transition:
      opacity 250ms,
      transform 250ms;
    border-right: button.$btn-border-width solid currentColor;
    border-bottom: button.$btn-border-width solid currentColor;
    opacity: 0;
  }

  @each $size in button.$btn-non-default-sizes {
    &.btn-#{$size}::after {
      right: map.get(button.$btn-padding-x-map, $size) - map.get(
          button.$btn-animation-distance-map,
          $size
        );
    }
  }

  > span {
    transition: transform 250ms;
  }

  // Only animate when user prefers to see animations
  @media (prefers-reduced-motion: no-preference) {
    @include utilities.not-disabled-focus-hover() {
      > span {
        transform: translateX(map.get(button.$btn-animation-distance-map, md) * -1);
      }

      @each $size in button.$btn-non-default-sizes {
        &.btn-#{$size} > span {
          transform: translateX(map.get(button.$btn-animation-distance-map, $size) * -1);
        }
      }

      &::after {
        transform: rotateZ(315deg) translate(0, 0);
        opacity: 1;
      }
    }

    > span {
      // Initially transform to place text in the right rendering context for a smooth animation
      transform: translateX(0);
    }
  }
}

// Size variants, default is rg
@each $size in button.$btn-non-default-sizes {
  .btn-#{$size} {
    @include button-mx.button-size($size);
  }
}

// Color variants
@each $name, $color in color.$accent-colors {
  @include button-mx.button-color-variant($name, $color);
}

// Intranet contextual buttons
@each $name, $color in color.$contextual-colors {
  @include button-mx.button-color-variant($name, $color);
}
