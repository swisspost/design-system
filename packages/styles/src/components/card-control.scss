@use '../variables/color';
@use '../variables/commons';
@use '../variables/spacing';
@use '../variables/components/forms';
@use '../variables/components/form-check';
@use '../mixins/utilities';

/*
* There are a whole bunch of !important statments in this file.
* They are necessary and should not be removed, because we need to override the .form-check styles here.
*/

fieldset {
  .radio-button-card,
  .checkbox-button-card {
    &:not(:last-child) {
      margin-bottom: spacing.$size-regular;
    }
  }
}

.radio-button-card,
.checkbox-button-card {
  --post-card-control-border-color: #{color.$gray-60};
  --post-card-control-bg: #{color.$white};
  --post-card-control-color: #{color.$gray-80};
  --post-card-control-input-border-color: #{color.$gray-80};
  --post-card-control-input-bg: #{color.$white};

  display: grid;
  grid-template: 'input label icon' 'input content icon' / min-content auto min-content;
  gap: 0 spacing.$size-mini;
  position: relative;
  padding: spacing.$size-regular;
  width: 100%;
  background-color: var(--post-card-control-bg);
  border: spacing.$size-line solid var(--post-card-control-border-color);
  border-radius: commons.$border-radius;
  color: var(--post-card-control-color);
  cursor: pointer;

  input.form-check-input[type] {
    grid-area: input;
    position: relative;
    z-index: 2;
    margin: spacing.$size-micro 0;
    background-color: var(--post-card-control-input-bg) !important;
    border-color: var(--post-card-control-input-border-color) !important;
    color: var(--post-card-control-input-border-color) !important;
    cursor: inherit;
    transition: none;

    &:focus,
    &:focus-visible {
      box-shadow: none;
    }

    ~ label.form-check-label {
      color: inherit !important;
    }
  }

  label.form-check-label {
    grid-area: label;
    margin: spacing.$size-micro 0;
    padding: 0;
    border-radius: inherit;
    transition: none;

    &::before {
      display: block;
      content: '';
      position: absolute;
      inset: spacing.$size-line * -1;
      border-radius: inherit;
    }

    > * {
      display: block;
      // Lift content above the :before element to make it selectable
      position: relative;
      z-index: 2;
    }
  }

  .card-control--content {
    grid-area: content;
  }

  post-icon {
    grid-area: icon;
    width: spacing.$size-big;
    height: spacing.$size-big;
    pointer-events: none;
  }

  &:where(:not(:has(input:disabled)), :not(.disabled)) {
    &:where(:has(input:checked), .checked) {
      --post-card-control-border-color: #{color.$black};
      --post-card-control-bg: #{color.$yellow};
    }

    &:where(:has(input:invalid), :has(input[aria-invalid]), :has(input.is-invalid), .is-invalid) {
      --post-card-control-border-color: #{color.$error};
      --post-card-control-color: #{color.$error};
      --post-card-control-input-border-color: #{color.$error};
    }

    &:where(:hover) {
      --post-card-control-border-color: #{color.$gray-80};
      --post-card-control-bg: #{color.$gray-60};
      --post-card-control-color: #{color.$white};
      --post-card-control-input-border-color: #{color.$black};
    }

    input:focus-visible ~ label::before {
      outline-offset: forms.$input-focus-outline-thickness;
      outline: forms.$input-focus-outline-thickness solid commons.$outline-color;
    }
  }

  &:where(:has(input:disabled), .disabled) {
    --post-card-control-border-color: #{color.$gray-60};
    --post-card-control-bg: transparent;
    --post-card-control-color: #{color.$gray-60};
    --post-card-control-input-border-color: #{color.$gray-60};
    --post-card-control-input-bg: transparent;

    border-style: dashed;
    text-decoration: line-through;
    cursor: default;

    input.form-check-input[type] {
      border: 0 none;
      padding: form-check.$form-check-input-border-width;
    }
  }

  @include utilities.high-contrast-mode() {
    --post-card-control-border-color: FieldText;
    --post-card-control-bg: Field;
    --post-card-control-color: FieldText;
    --post-card-control-input-border-color: FieldText;
    --post-card-control-input-bg: Field;

    outline: spacing.$size-line solid Field;
    outline-offset: spacing.$size-line * -2;

    input.form-check-input[type] {
      outline: spacing.$size-line solid Field;
      background-color: Field !important;

      &::after {
        border-color: Field !important;
      }
    }

    label.form-check-label,
    .card-control--content {
      background-color: var(--post-card-control-bg) !important;
    }

    &:where(:not(:has(input:disabled)), :not(.disabled)) {
      &:where(:has(input:checked), .checked) {
        --post-card-control-border-color: FieldText;
        --post-card-control-bg: SelectedItem;
        --post-card-control-color: SelectedItemText;
        --post-card-control-input-border-color: FieldText;

        input.form-check-input[type] {
          &::after {
            background-color: FieldText !important;
          }
        }
      }

      &:where(:hover) {
        --post-card-control-border-color: Highlight;
        --post-card-control-bg: Field;
        --post-card-control-color: FieldText;
        --post-card-control-input-border-color: Highlight;
      }
    }

    &:where(:has(input:disabled), .disabled) {
      --post-card-control-border-color: GrayText;
      --post-card-control-bg: Field;
      --post-card-control-color: FieldText;
      --post-card-control-input-border-color: GrayText;
      --post-card-control-input-bg: Field;

      &:where(:has(input:checked), .checked) {
        --post-card-control-bg: SelectedItem;
        --post-card-control-color: SelectedItemText;

        position: relative;
        background-color: Field;

        &::before {
          display: block;
          content: '';
          position: absolute;
          inset: spacing.$size-line;
          background-color: SelectedItem;
          z-index: 1;
        }

        > * {
          position: relative;
          z-index: 2;
        }

        input.form-check-input[type] {
          &::after {
            background-color: FieldText !important;
          }
        }
      }
    }
  }
}

@each $bg in color.$dark-backgrounds {
  #{$bg} {
    .radio-button-card,
    .checkbox-button-card {
      --post-card-control-border-color: #{color.$white};
      --post-card-control-bg: transparent;
      --post-card-control-color: #{color.$white};
      --post-card-control-input-border-color: #{color.$white};
      --post-card-control-input-bg: transparent;

      &:where(:not(:has(input:disabled)), :not(.disabled)) {
        &:where(:has(input:checked), .checked) {
          --post-card-control-border-color: #{color.$yellow};
          --post-card-control-bg: #{color.$yellow};
          --post-card-control-color: #{color.$gray-80};
          --post-card-control-input-border-color: #{color.$gray-80};
          --post-card-control-input-bg: #{color.$white};
        }

        &:where(
            :has(input:invalid),
            :has(input[aria-invalid]),
            :has(input.is-invalid),
            .is-invalid
          ) {
          --post-card-control-border-color: #{color.$error};
          --post-card-control-bg: #{color.$error-background};
          --post-card-control-color: #{color.$error};
          --post-card-control-input-border-color: #{color.$error};
          --post-card-control-input-bg: #{color.$white};

          &:where(:has(input:checked), .checked) {
            --post-card-control-bg: #{color.$yellow};
          }
        }

        &:where(:hover) {
          --post-card-control-border-color: #{color.$black};
          --post-card-control-bg: #{color.$gray-20};
          --post-card-control-color: #{color.$black};
          --post-card-control-input-border-color: #{color.$black};
          --post-card-control-input-bg: #{color.$white};
        }

        input:focus-visible ~ label::before {
          outline-color: color.$white;
        }
      }

      &:where(:has(input:disabled), .disabled) {
        --post-card-control-border-color: color.$white-alpha-80;
        --post-card-control-bg: transparent;
        --post-card-control-color: color.$white-alpha-80;
        --post-card-control-input-border-color: color.$white-alpha-80;
        --post-card-control-input-bg: transparent;
      }

      @include utilities.high-contrast-mode() {
        --post-card-control-border-color: FieldText;
        --post-card-control-bg: Field;
        --post-card-control-color: FieldText;
        --post-card-control-input-border-color: FieldText;
        --post-card-control-input-bg: Field;

        &:where(:not(:has(input:disabled)), :not(.disabled)) {
          &:where(:has(input:checked), .checked) {
            --post-card-control-border-color: FieldText;
            --post-card-control-bg: SelectedItem;
            --post-card-control-color: SelectedItemText;
            --post-card-control-input-border-color: FieldText;
          }

          &:where(:hover) {
            --post-card-control-border-color: Highlight;
            --post-card-control-bg: Field;
            --post-card-control-color: FieldText;
            --post-card-control-input-border-color: Highlight;
          }
        }

        &:where(:has(input:disabled), .disabled) {
          --post-card-control-border-color: GrayText;
          --post-card-control-bg: Field;
          --post-card-control-color: FieldText;
          --post-card-control-input-border-color: GrayText;
          --post-card-control-input-bg: Field;

          &:where(:has(input:checked), .checked) {
            --post-card-control-bg: SelectedItem;
            --post-card-control-color: SelectedItemText;
          }
        }
      }
    }
  }
}
