@use 'sass:map';

@use './../../functions/calc';
@use './../../mixins/utilities' as utility-mx;
@use './../../mixins/typo' as typo-mx;
@use './../../tokens/components' as tokens;
@use './../../variables/animation';

$border-width: 2px; // TODO: discuss non-tokenized variables

.text-input {
  position: relative;

  label {
    @include typo-mx.use(label-default);
    position: absolute;
    transition: animation.$transition-base; // TODO: discuss animations
    inset-inline-start: calc.add(
      $border-width,
      map.get(tokens.$post-text-input, post-input-spacing-padding-inline-text-start)
    );
    inset-inline-end: calc.add(
      $border-width,
      map.get(tokens.$post-text-input, post-input-spacing-padding-inline-text-end)
    );
    // TODO: discuss long variable names
    inset-block-start: calc.add(
      $border-width,
      map.get(tokens.$post-text-input, post-input-spacing-padding-block-text1),
      map.get(tokens.$post-text-input, post-input-spacing-padding-block-text5)
    );
  }

  input {
    @include typo-mx.use(label-default);

    width: 100%;
    transition: animation.$transition-base;
    border-radius: map.get(tokens.$post-text-input, post-input-border-radius-surface);
    padding-inline-start: map.get(
      tokens.$post-text-input,
      post-input-spacing-padding-inline-text-start
    );
    padding-inline-end: map.get(
      tokens.$post-text-input,
      post-input-spacing-padding-inline-text-end
    );
    padding-block: calc.add(
      map.get(tokens.$post-text-input, post-input-spacing-padding-block-text1),
      map.get(tokens.$post-text-input, post-input-spacing-padding-block-text5)
    );

    color: map.get(tokens.$post-text-input, post-input-color-primary-enabled-fg);
    border: $border-width solid
      map.get(tokens.$post-text-input, post-input-color-primary-enabled-stroke);
    background-color: map.get(tokens.$post-text-input, post-input-color-primary-enabled-bg);

    &:placeholder-shown:focus,
    &:not(:placeholder-shown) {
      padding-block-start: calc(
        #{map.get(tokens.$post-text-input, post-input-spacing-padding-block-text2)} + 21px
      );
      padding-block-end: map.get(tokens.$post-text-input, post-input-spacing-padding-block-text2);

      + label {
        @include typo-mx.use(label-smaller);
        inset-block-start: calc.add(
          $border-width,
          map.get(tokens.$post-text-input, post-input-spacing-padding-block-text2)
        );
      }
    }

    &:hover {
      border-color: map.get(tokens.$post-text-input, post-input-color-primary-hover-stroke);
      background-color: map.get(tokens.$post-text-input, post-input-color-primary-hover-bg);

      + label {
        color: map.get(tokens.$post-text-input, post-input-color-primary-hover-fg);
      }
    }

    &:disabled {
      color: map.get(tokens.$post-text-input, post-input-color-primary-disabled-fg);
      border-style: dashed;
      border-color: map.get(tokens.$post-text-input, post-input-color-primary-disabled-stroke);
      background-color: map.get(tokens.$post-text-input, post-input-color-primary-disabled-bg);

      + label {
        color: map.get(tokens.$post-text-input, post-input-color-primary-disabled-fg);
      }
    }

    @include utility-mx.focus-style {
      border-color: map.get(tokens.$post-text-input, post-input-color-primary-focus-stroke);
    }
  }
}
