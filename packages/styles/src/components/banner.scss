@forward './../variables/options';

@use 'sass:map';

@use './../themes/bootstrap/core' as *;

@use './../mixins/notification' as notification-mx;

@use './../variables/breakpoints';
@use './../variables/commons';
@use './../variables/grid';
@use './../variables/components/close';
@use './../variables/components/notification';
@use '../tokens/components';
@use '../functions/tokens';

tokens.$default-map: components.$post-banner;

.banner,
.alert {
  $default-variant: nth(notification.$notification-variants, 1);

  border-style: tokens.get('banner-border-style');
  border-width: tokens.get('banner-border-width');
  @include notification-mx.notification-size(alert);

  // Set the neutral banner as the default color
  @include notification-mx.notification-variant(
    nth($default-variant, 2),
    nth($default-variant, 3),
    nth($default-variant, 4),
    nth($default-variant, 5),
    nth($default-variant, 6)
  );

  &:not(.alert-action) {
    @include notification-mx.notification-body(alert);
  }
}

.banner-dismissible,
.alert-dismissible {
  @include notification-mx.notification-dismissible(alert);
}

.banner-buttons,
.alert-buttons {
  display: flex;
  align-items: center;
  justify-content: flex-end;
  margin-block-start: tokens.get('banner-actions-margin-top');
  gap: tokens.get('banner-actions-gap');
}

.banner-action,
.alert-action {
  > .banner-content,
  > .alert-content {
    @include notification-mx.notification-body(alert);
  }

  @include media-breakpoint-up(md) {
    &.alert-dismissible > .btn-close,
    &.banner-dismissible > .btn-close {
      inset-block-start: calc(50% - #{0.5 * close.$close-size});
    }
  }

  @include media-breakpoint-down(md) {
    flex-direction: column;
    align-items: stretch;

    > .banner-content,
    > .alert-content {
      padding-inline-start: tokens.get('banner-gap') + tokens.get('banner-icon-size');
      padding-inline-end: tokens.get('banner-gap') + close.$close-size;
    }

    &.no-icon > .banner-content,
    &.no-icon > .alert-content {
      padding-inline-start: 0;
    }

    > .banner-buttons,
    > .alert-buttons {
      display: flex;

      > .btn,
      > ::slotted(.btn) {
        flex: 1 0 0;
        width: 100%;
      }

      > .btn:first-child,
      > ::slotted(.btn:first-child) {
        margin-inline-start: 0;
      }
    }
  }
}

//TODO: Delete that?
.banner-fixed-bottom,
.alert-fixed-bottom {
  position: fixed;
  inset-block-end: 0;
  inset-inline-start: 0;
  inset-inline-end: 0;
  margin-bottom: 0;
  border-radius: 0;
  z-index: commons.$zindex-fixed;

  @include media-breakpoint-up(xxl) {
    //TODO: Tokens?
    $container-max-width: map.get(breakpoints.$grid-breakpoints, 'xxl') - 1;
    $container-padding-x: map.get(grid.$grid-container-padding, 'xxl');
    $alert-padding-x: tokens.get('banner-padding');
    $alert-icon-size: tokens.get('banner-icon-size');
    $fixed-alert-padding-x: '(100% - #{$container-max-width}) / 2 + #{$container-padding-x} + #{$alert-padding-x}';

    padding-inline-end: calc(#{$fixed-alert-padding-x});
    padding-inline-start: calc(
      #{$fixed-alert-padding-x} + #{$alert-icon-size} + #{tokens.get('banner-gap')}
    );

    // for alerts with .pi-* icons (deprecated)
    background-position-x: calc(#{$fixed-alert-padding-x} + (0.5 * #{$alert-icon-size}));

    // for alerts with mask-image icons
    &::before {
      left: calc(#{$fixed-alert-padding-x});
    }

    &.no-icon {
      padding-inline-start: calc(#{$fixed-alert-padding-x});
    }

    &.banner-dismissible,
    &.alert-dismissible {
      padding-inline-end: calc(
        #{$fixed-alert-padding-x} + #{tokens.get('banner-gap')} + #{close.$close-size}
      );

      > .btn-close {
        inset-inline-end: calc(#{$fixed-alert-padding-x});
      }
    }
  }
}

@each $name, $color, $icon, $border-color, $icon-color,
  $scheme in notification.$notification-variants
{
  .banner-#{$name},
  .alert-#{$name} {
    @include notification-mx.notification-variant(
      $color,
      $icon,
      $border-color,
      $icon-color,
      $scheme
    );
  }
}
