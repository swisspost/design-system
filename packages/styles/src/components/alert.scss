@forward './../variables/options';

@use 'sass:map';

@use './../lic/bootstrap-license';
@use './../themes/bootstrap/core' as *;

@use './../mixins/notification' as notification-mx;
@use './../placeholders/notification' as notification-ph;

@use './../variables/breakpoints';
@use './../variables/commons';
@use './../variables/grid';
@use './../variables/components/close';
@use './../variables/components/notification';

.alert {
  @include notification-mx.notification-size(alert);

  &:not(.alert-action) {
    @extend %notification-body;
  }
}

.alert-heading {
  @include notification-mx.notification-heading(alert);
}

.alert-dismissible {
  @include notification-mx.notification-dismissible(alert);
}

.alert-action {
  display: flex;
  flex-direction: row;
  align-items: center;
  gap: notification.$notification-gap;

  > .alert-content {
    flex: 1 1 auto;
    @extend %notification-body;
  }

  > .alert-buttons {
    flex: 0 0 auto;
    display: flex;
    align-items: center;

    > .btn {
      margin-inline-start: notification.$notification-buttons-margin-start;
    }
  }

  @include media-breakpoint-up(md) {
    &.alert-dismissible > .btn-close {
      inset-block-start: calc(50% - #{0.5 * close.$close-size});
    }
  }

  @include media-breakpoint-down(md) {
    flex-direction: column;
    align-items: stretch;
    padding-inline: map.get(notification.$notification-padding-x-map, alert);

    > .alert-content {
      $icon-size: map.get(notification.$notification-icon-size-map, alert);

      padding-inline-start: notification.$notification-gap + $icon-size;
      padding-inline-end: notification.$notification-gap + close.$close-size;
    }

    > .alert-buttons {
      display: flex;

      > .btn {
        flex: 1 0 0;
        width: 100%;

        &:first-child {
          margin-inline-start: 0;
        }
      }
    }
  }
}

.alert-fixed-bottom {
  position: fixed;
  inset-block-end: 0;
  inset-inline-start: 0;
  inset-inline-end: 0;
  margin-bottom: 0;
  border-radius: 0;
  z-index: commons.$zindex-fixed;

  @include media-breakpoint-up(xxl) {
    $container-max-width: map.get(breakpoints.$grid-breakpoints, 'xxl') - 1;
    $container-padding-x: map.get(grid.$grid-container-padding, 'xxl');
    $alert-padding-x: map.get(notification.$notification-padding-x-map, alert);
    $alert-icon-size: map.get(notification.$notification-icon-size-map, alert);
    $fixed-alert-padding-x: '(100% - #{$container-max-width}) / 2 + #{$container-padding-x} + #{$alert-padding-x}';

    padding-inline-end: calc(#{$fixed-alert-padding-x});
    padding-inline-start: calc(
      #{$fixed-alert-padding-x} + #{$alert-icon-size} + #{notification.$notification-gap}
    );

    // for alerts with .pi-* icons (deprecated)
    background-position-x: calc(#{$fixed-alert-padding-x} + #{0.5 * $alert-icon-size});

    // for alerts with mask-image icons
    &::before {
      left: calc(#{$fixed-alert-padding-x});
    }

    &.no-icon {
      padding-inline-start: calc(#{$fixed-alert-padding-x});
    }

    &.alert-dismissible {
      padding-inline-end: calc(
        #{$fixed-alert-padding-x} + #{notification.$notification-gap} + #{close.$close-size}
      );

      > .btn-close {
        inset-inline-end: calc(#{$fixed-alert-padding-x});
      }
    }
  }
}

@each $name, $color, $icon in notification.$notification-variants {
  .alert-#{$name} {
    @include notification-mx.notification-variant($color, $icon);
  }
}
