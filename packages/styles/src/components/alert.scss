@forward './../variables/options';

@use 'sass:map';

@use './../lic/bootstrap-license';
@use './../themes/bootstrap/core' as *;

@use './../variables/color';
@use './../variables/commons';
@use './../variables/type';
@use './../variables/spacing';
@use './../variables/grid';
@use './../variables/breakpoints';
@use './../variables/components/alert';
@use './../variables/options';
@use './../functions/color' as color-fn;
@use './../functions/contrast' as contrast-fn;
@use './../placeholders/color' as color-ph;
@use './../placeholders/notifications';

.alert-container {
  @extend %notification-container;
}

.alert {
  $effective-line-height: (alert.$alert-line-height * alert.$alert-font-size);

  @extend %notification;

  min-height: 2 * alert.$alert-padding-y + alert.$alert-icon-size;

  padding: alert.$alert-padding-y alert.$alert-padding-x;
  padding-left: (alert.$alert-padding-x * 2 + alert.$alert-icon-size);

  background-position: alert.$alert-padding-x center;
  background-size: alert.$alert-icon-size;

  font-size: alert.$alert-font-size;

  > *:only-child {
    font-weight: type.$font-weight-bold;
  }

  &:not(.alert-fixed-bottom) {
    max-width: map.get(breakpoints.$grid-breakpoints, 'xxl');
  }

  &.no-icon {
    padding-left: alert.$alert-padding-x;
  }

  &.alert-dismissible {
    padding-right: alert.$alert-close-icon-size + alert.$alert-padding-x * 2;
  }

  // Adjust close link position
  .btn-close {
    @extend %notification-close;

    padding: alert.$alert-padding-y alert.$alert-padding-x;
  }
}

.alert-heading {
  @extend %notification-title;

  font-size: alert.$alert-font-size;
}

@each $name, $color, $icon in alert.$alert-list {
  .alert-#{$name} {
    --post-bg-rgb: #{color-fn.rgb-values($color)};
    @extend %notification-#{$name};

    @if (contrast-fn.light-or-dark($color) == 'dark') {
      @extend %color-background-dark-variables;
    } @else {
      @extend %color-background-light-variables;
    }

    .btn-close {
      @extend %notification-#{$name}-close;
    }
  }
}

.alert-fixed-bottom,
%alert-fixed {
  position: fixed;
  z-index: commons.$zindex-alert;
  bottom: 0;
  left: 0;
  width: 100%;
  max-height: 100%;
  overflow: auto;
  margin-bottom: 0;
  border-radius: 0;

  // Let the icon scroll with the content
  background-attachment: local;

  @include media-breakpoint-up(xxl) {
    $container-padding: map.get(grid.$grid-container-padding, 'xxl');
    padding: alert.$alert-padding-y
      calc(
        (100vw - #{map.get(breakpoints.$grid-breakpoints, 'xxl')}) / 2 + #{alert.$alert-padding-x *
          2 + alert.$alert-icon-size} + #{$container-padding} - 0.5rem
      );

    background-position: calc(
        (100vw - #{map.get(breakpoints.$grid-breakpoints, 'xxl')}) / 2 + #{alert.$alert-padding-x} +
          #{$container-padding} - 0.5rem
      )
      center;

    &.alert-dismissible {
      padding-right: calc(
        (100vw - #{map.get(breakpoints.$grid-breakpoints, 'xxl')}) / 2 + #{alert.$alert-close-icon-size +
          alert.$alert-padding-x * 2} + #{$container-padding} - 0.5rem
      );

      .btn-close {
        right: calc(
          (100vw - #{map.get(breakpoints.$grid-breakpoints, 'xxl')}) / 2 + #{$container-padding} - 0.5rem
        );
      }
    }
  }
}

.alert-action {
  @extend %alert-fixed;

  flex-direction: row;
  flex-wrap: nowrap;
  align-items: center;
  justify-content: space-between;
  gap: spacing.$size-regular;

  @include media-breakpoint-down(lg) {
    flex-direction: column;
    align-items: flex-start;
    justify-content: flex-end;

    .alert-buttons {
      align-self: flex-end;
    }
  }

  @include media-breakpoint-down(sm) {
    align-items: center;
  }

  @include media-breakpoint-up(xxl) {
    $container-padding: map.get(grid.$grid-container-padding, 'xxl');
    padding-right: calc(
      (100vw - #{map.get(breakpoints.$grid-breakpoints, 'xxl')}) / 2 + #{alert.$alert-padding-x} + #{$container-padding} -
        0.5rem
    );
  }

  .alert-content {
    display: flex;
    flex: 2 1 auto;
    flex-flow: column nowrap;

    > *:last-child {
      margin-bottom: 0;
    }
  }

  .alert-buttons {
    display: flex;
    gap: spacing.$size-regular;
    justify-self: flex-end;
    flex: 1 1 auto;
    flex-direction: row-reverse;

    @include media-breakpoint-down(rg) {
      flex-direction: column;
      align-self: stretch;

      .btn {
        flex: 1 0 100%;
      }
    }
  }
}

@include media-breakpoint-down(sm) {
  .alert {
    padding-top: alert.$alert-padding-y * 2 + alert.$alert-icon-size;
    padding-left: alert.$alert-padding-x;
    background-position: center alert.$alert-padding-y;
    font-size: alert.$alert-font-size-small;
    text-align: center;

    &.alert-dismissible {
      padding-right: alert.$alert-padding-x;
    }

    &.no-icon {
      padding-top: alert.$alert-padding-y;
    }

    .btn-close {
      bottom: auto;
      padding: spacing.$spacer * 0.5;
    }

    .alert-heading {
      font-size: alert.$alert-font-size-small;
    }
  }
}
