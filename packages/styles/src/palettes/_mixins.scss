@use '../functions/contrast';
@use '../functions/tokens';
@use '../placeholders/schemes';
@use '../tokens/elements';
@use '../tokens/helpers';

@use './functions' as *;
@use './variables' as *;

@mixin generate-palette-class($name, $theme) {
  .palette-#{$name} {
    &,
    &:is([data-color-scheme='light'], [data-color-scheme='light'] *) {
      @include palette-styles($name, $theme, 'light', $redefine-tokens: true);
    }

    &:is([data-color-scheme='dark'], [data-color-scheme='dark'] *) {
      @include palette-styles($name, $theme, 'dark', $redefine-tokens: true);
    }
  }
}

@mixin default-palette-styles($theme) {
  &:not([data-color-scheme='dark']) {
    @include palette-styles($default-palette, $theme, 'light');
  }

  &[data-color-scheme='dark'] {
    @include palette-styles($default-palette, $theme, 'dark');
  }
}

@mixin palette-styles($name, $theme, $scheme, $redefine-tokens: false) {
  --post-palette-fg: #{tokens.get('helper-palette-#{$name}-fg', helpers.$post-palette)};
  background-color: tokens.get('helper-palette-#{$name}-bg', helpers.$post-palette) !important;

  @if ($redefine-tokens == true) {
    // redefining the body color is required so that the new color scheme is taken into account
    color: tokens.get('body-color', elements.$post-body);

    $bg-scheme: value('post-palette-#{$name}-bg-scheme', $theme, $scheme);
    @if ($bg-scheme == 'light') {
      @extend %color-scheme-light;
    } @else {
      @extend %color-scheme-dark;
    }
  }
}
