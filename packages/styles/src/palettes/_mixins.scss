@use 'sass:map';
@use 'sass:meta';

@use '../functions/contrast';
@use '../placeholders/schemes';

@use '../functions/tokens';
@use '../tokens/elements';
@use '../tokens/palettes';

@use './variables' as *;

@mixin generate-palette-class($name, $theme) {
  .palette-#{$name} {
    &,
    &:is([data-color-scheme='light'], [data-color-scheme='light'] *) {
      @include palette-styles($name, $theme, 'light', $redefine-tokens: true);
    }

    &:is([data-color-scheme='dark'], [data-color-scheme='dark'] *) {
      @include palette-styles($name, $theme, 'dark', $redefine-tokens: true);
    }
  }
}

@mixin default-palette-styles($theme) {
  &:not([data-color-scheme='dark']) {
    @include palette-styles($default-palette, $theme, 'light');
  }

  &[data-color-scheme='dark'] {
    @include palette-styles($default-palette, $theme, 'dark');
  }
}

@mixin palette-styles($name, $theme, $scheme, $redefine-tokens: false) {
  $palette: map.get(meta.module-variables(palettes), '#{$theme}-#{$scheme}');

  @if ($palette) {
    --post-palette-fg: #{tokens.get('helper-color-#{$name}-fg', palettes.$post-palette)};
    --post-palette-bg: #{tokens.get('helper-color-#{$name}-bg', palettes.$post-palette)};
    background-color: var(--post-palette-bg) !important;

    @if ($redefine-tokens == true) {
      // redefining the body color is required so that the new color scheme is taken into account
      color: tokens.get('body-color', elements.$post-body);

      $bg-scheme: tokens.get('helper-color-#{$name}-bg-scheme', $palette);
      @if ($bg-scheme == 'light') {
        @extend %color-scheme-light;
      } @else {
        @extend %color-scheme-dark;
      }
    }
  }
}
