@use 'sass:map';
@use 'sass:meta';

@use '../functions/tokens';
@use '../placeholders/schemes';
@use '../tokens/elements';
@use '../tokens/palettes';

@use './variables' as *;

@forward './utilities';

@mixin palettes($theme) {
  body {
    background-color: var(--post-current-palette-bg) !important;

    &:not([data-color-scheme='dark']) {
      @include palette-tokens($default-palette, $theme, 'light');
    }

    &[data-color-scheme='dark'] {
      @include palette-tokens($default-palette, $theme, 'dark');
    }
  }

  @each $palette in $palettes {
    .palette-#{$palette} {
      // Redefining the body color is necessary to ensure that the new color scheme is applied correctly.
      // Known limitation: body color may be incorrect with nested parent with different `data-color-scheme` values.
      color: tokens.get('body-color', elements.$post-body);
      background-color: var(--post-current-palette-bg) !important;

      // Light scheme explicitly set on the palette:
      &[data-color-scheme='light'],

      // No scheme explicitly set on the palette, but parent has a light scheme:
      &:where([data-color-scheme='light'] :not([data-color-scheme='dark'])),

      // No scheme explicitly set on the palette, and no scheme on the parent either:
      &:not([data-color-scheme='dark']):not([data-color-scheme='dark'] *) {
        @include palette-tokens($palette, $theme, 'light', $override-scheme: true);
      }

      // Dark scheme explicitly set on the palette:
      &[data-color-scheme='dark'],

      // No scheme explicitly set on the palette, but parent has a dark scheme:
      &:where([data-color-scheme='dark'] :not([data-color-scheme='dark'])) {
        @include palette-tokens($palette, $theme, 'dark', $override-scheme: true);
      }
    }
  }
}

@mixin palette-tokens($name, $theme, $scheme, $override-scheme: false) {
  $palette: map.get(meta.module-variables(palettes), '#{$theme}-#{$scheme}');

  @if (not $palette) {
    @error 'Palette #{$theme}-#{$scheme} not found.';
  }

  --post-current-palette-fg: #{tokens.get('palettes-color-#{$name}-fg', $palette)};
  --post-current-palette-bg: #{tokens.get('palettes-color-#{$name}-bg', $palette)};

  @if ($override-scheme == true) {
    $bg-scheme: tokens.get('palettes-color-#{$name}-bg-scheme', $palette);

    @if ($bg-scheme == 'light') {
      @extend %color-scheme-light;
    } @else {
      @extend %color-scheme-dark;
    }
  }
}
