@use 'sass:map';
@use 'sass:meta';
@use 'sass:list';

@use './../variables/type';
@use './../variables/color';
@use './../variables/components/button';
@use './../functions/icons' as icon-fn;
@use './../mixins/utilities';
@use './../utilities/env-variables' as icon-version;

@mixin mask-image($name) {
  mask-image: var(--post-icon-#{$name});
  background-color: currentColor;
  color: currentColor; // Required in this case with usage of forced-color-adjust: preserve-parent-color
  forced-color-adjust: preserve-parent-color;
}

@mixin custom-property($names, $path: '../icons/temp') {
  // Convert single string to list
  @if type-of($names) == 'string' {
    $names: ($names,);
  }
  
  @each $name in $names {
    @at-root {
      @include meta.load-css('#{$path}/#{$name}');
    }
  }
}

@mixin icon($name, $color: inherit, $width: 1em, $height: 1em) {
  display: inline-block;
  width: $width;
  height: $height;
  vertical-align: -0.15em;
  background-color: currentColor;
  color: $color;
  mask-image: var(--post-icon-#{$name});
  mask-position: center center;
  mask-repeat: no-repeat;
  mask-size: 100%;
}

@mixin remove-icon() {
  mask-image: none;
}
