@use 'sass:map';
@use 'sass:meta';
@use 'sass:list';

@use './../variables/type';
@use './../variables/color';
@use './../variables/components/button';
@use './../functions/icons' as icon-fn;
@use './../mixins/utilities';
@use './../utilities/env-variables' as icon-version;

@mixin mask-image($name) {
  mask-image: var(--post-icon-#{$name});
  background-color: currentColor;
  color: currentColor; // Required in this case with usage of forced-color-adjust: preserve-parent-color
  forced-color-adjust: preserve-parent-color;
}


$loaded-icons: () !default;

@mixin custom-property($name, $path: '../icons/temp') {
  @if list.index($loaded-icons, $name) == null {
    $loaded-icons: list.append($loaded-icons, $name) !global;
    @at-root {
      @include meta.load-css('#{$path}/#{$name}');
    }
  }
}

@mixin remove-icon() {
  mask-image: none;
}
