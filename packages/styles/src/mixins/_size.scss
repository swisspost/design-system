@use 'sass:map';
@use 'sass:string';

@use '../themes/bootstrap/overrides' as *;

@use '../variables/spacing';
@use '../functions/utilities';

@mixin bezel-small() {
  padding: map.get(spacing.$post-sizes, 'mini') map.get(spacing.$post-sizes, 'regular');
}

@mixin bezel-small-regular() {
  padding: map.get(spacing.$post-sizes, 'small-regular') map.get(spacing.$post-sizes, 'regular');
}

@mixin bezel-regular() {
  padding: map.get(spacing.$post-sizes, 'regular');
}

@mixin bezel-bigger-regular() {
  padding: map.get(spacing.$post-sizes, 'small-large');
}

@mixin bezel-medium() {
  padding: map.get(spacing.$post-sizes, 'small-large') map.get(spacing.$post-sizes, 'large');
}

@mixin bezel-large() {
  padding: map.get(spacing.$post-sizes, 'big');
}

@mixin bezel-big() {
  padding: map.get(spacing.$post-sizes, 'bigger-big');
}

/**
 * Generate responsive size properties for things like height, width, margin, padding, etc.
 * @param $curve-size One of the curve sizes predefined at https://www.experience-hub.ch/document/2307#/grundlagen-web/abstaende
 * @param $property Property key (height, width, padding, margin, top, etc.)
 * @param $template Value template string used for shorthand declarations like padding ("$value auto" = padding: 1rem auto)
 */
@mixin responsive-size($curve-size: 'regular', $property-key: 'padding', $template: '$value') {
  $curve: map.get(spacing.$size-curves, $curve-size);

  @if ($curve) {
    $cache: '';

    @each $key, $value in $curve {
      @if ($key == 'xs') {
        #{$property-key}: string.unquote(utilities.replace($template, '$value', $value));
      } @else {
        // Don't write unnecessary media queries
        @if ($cache != $value) {
          @include media-breakpoint-up($key) {
            #{$property-key}: string.unquote(utilities.replace($template, '$value', $value));
          }
        }
      }
      $cache: $value;
    }
  } @else {
    @warn "@mixin responsive-size: Can't find $curve-size: " + $curve-size;
  }
}
