@use 'sass:map';
@use './../variables/components/forms';
@use './../mixins/utilities';
@use './../functions/icons';

// Placeholder in input fields
@mixin placeholder() {
  &::placeholder {
    @content;
  }

  // For very old Edge
  /* stylelint-disable */
  &::input-placeholder {
    @content;
  }
  /* stylelint-enable */
}

/* Deprecated use the one in utilities.scss */
@mixin focus-outline {
  outline: none;
  outline-offset: forms.$input-focus-outline-thickness;

  /* Compatibility with button-group */
  &:is(:focus-visible, :focus-within, .pretend-focus) {
    outline: forms.$input-focus-outline-thickness solid var(--post-contrast-color);
    @content;
  }
}

@mixin select-bg-image($state: null, $validation: null, $mode: 'light') {
  // Hardcoded colors because CSS variables cannot be used as fill color of background-image
  $arrow-color-map: (
    'enabled-light': #050400,
    'enabled-dark': #fff,
    'hover-light': #504f4b,
    'hover-dark': #fff,
    'selected-light': #050400,
    'selected-dark': #fff,
    'disabled-light': #696864,
    'disabled-dark': #fff,
  );

  @if ($validation == 'valid') {
    $validation: forms.$valid-icon;
  } @else if ($validation == 'invalid') {
    $validation: forms.$invalid-icon;
  }

  @if ($state) {
    $state: url('#{icons.get-colored-svg-url('2052', map.get($arrow-color-map, '#{$state}-#{$mode}'))}');
  }
  background-image: $state, $validation;
}
