@use 'sass:map';

@use './../variables/components/button';
@use './../variables/type';
@use './../variables/color';
@use './../placeholders/color' as color-ph;
@use './../functions/contrast' as contrast-fn;
@use 'utilities';

@mixin reset-button {
  padding: 0;
  overflow: visible;
  border: 0;
  background: none;
  color: inherit;
  font: inherit;
  user-select: none;
  appearance: button; // for input
}

@mixin button-size($size: md) {
  min-height: map.get(button.$btn-height-map, $size);
  padding: 0 map.get(button.$btn-padding-x-map, $size);
  font-size: map.get(button.$btn-font-size-map, $size);
  gap: map.get(button.$btn-padding-x-map, $size) * 0.5;

  > .pi,
  > post-icon {
    width: map.get(button.$btn-icon-size-map, $size);
    height: map.get(button.$btn-icon-size-map, $size);
  }
}

@mixin icon-button($size: md) {
  // Padding for icon buttons is (button-height - font-size) / 2
  $icon-size: map.get(button.$btn-icon-size-map, $size);
  $button-height: map.get(button.$btn-height-map, $size);
  $padding-y: ($button-height - $icon-size) * 0.5 - button.$input-btn-focus-width;
  min-width: $button-height;
  padding-right: $padding-y;
  padding-left: $padding-y;
}

@mixin button-color-variant($name, $color) {
  .btn-#{$name} {
    border-color: transparent;
    background-color: $color;

    @if (contrast-fn.light-or-dark($color) == 'dark') {
      color: color.$white;
    } @else {
      color: color.$black;
    }

    @include utilities.not-disabled-focus-hover() {
      $darkened-color: darken($color, 10%);
      background-color: $darkened-color;

      @if (contrast-fn.light-or-dark($darkened-color) == 'dark') {
        color: color.$white;
      } @else {
        color: color.$black;
      }
    }
  }
}
