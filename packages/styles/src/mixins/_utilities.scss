@use './../themes/bootstrap/core' as *;
@use '../variables/spacing';
@use '../variables/commons';
@use '../variables/breakpoints';

@mixin reset-list() {
  margin: 0;
  padding: 0;
  list-style: none;
}

@mixin visuallyhidden() {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0 0 0 0);
  border: 0;
}

@mixin visuallyhidden-reset() {
  position: static;
  width: auto;
  height: auto;
  margin: 0;
  overflow: visible;
  clip: auto;
}

@mixin visuallyhidden-focusable() {
  @include visuallyhidden;

  &:focus,
  &:active {
    @include visuallyhidden-reset;
  }
}

@mixin replace-text() {
  display: block;
  overflow: hidden;
  text-indent: 100%;
  white-space: nowrap;
}

// will truncate text needs a fixed width
// http://css-tricks.com/snippets/css/truncate-string-with-ellipsis/
@mixin truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin full-width-underscore($color, $height) {
  content: '';
  display: block;
  position: absolute;
  right: 0;
  bottom: 0;
  left: 0;
  height: $height;
  background-color: $color;
  pointer-events: none;
}

@mixin generate-utility-class($classname, $size, $property, $value) {
  .#{$classname}-#{$size}-r {
    #{$property}: $value !important;
  }
}

@mixin high-contrast-mode() {
  @media (forced-colors: active), (-ms-high-contrast: active), (-ms-high-contrast: white-on-black) {
    @content;
  }
}

@mixin not-disabled-focus-hover {
  &:focus,
  &:not(:disabled):hover,
  &.pretend-hover {
    @content;
  }
}

@mixin not-disabled-hover {
  &:not(:disabled):hover,
  &.pretend-hover {
    @content;
  }
}

@mixin focus-style-none {
  outline: none;
}

@mixin focus-style(
  $additional-selector: '',
  $offset: spacing.$size-line,
  $width: spacing.$size-line,
  $color: var(--post-focus-color),
  $style: solid
) {
  &#{$additional-selector} {
    outline-style: none !important; // !important is needed to override bootstrap .form-control:focus
    outline-offset: $offset !important;
    outline-width: $width !important;
    outline-color: $color !important;
  }

  // :has(:focus-visible) mimic a focus-visible-within pseudo-class
  &:is(:focus-visible, :has(:focus-visible), .pretend-focus)#{$additional-selector} {
    outline-style: $style !important;
    // In case rules need to be slightly adjusted
    @content;

    @include high-contrast-mode() {
      outline-color: Highlight !important;
    }
  }

  // When a browser doesn't support :has, use focus-within as a fallback. This means that focus state is displayed on focus and not on focus-visible only (except some browsers like Safari).
  @supports not selector(:has(:focus-visible)) {
    &:is(:focus-visible, :focus-within, .pretend-focus)#{$additional-selector} {
      outline-style: $style !important;
      // In case rules need to be slightly adjusted
      @content;

      @include high-contrast-mode() {
        outline-color: Highlight !important;
      }
    }
  }
}

@mixin focus-style-custom($additional-selector: '') {
  // :has(:focus-visible) mimic a focus-visible-within pseudo-class
  &:is(:focus-visible, :has(:focus-visible), .pretend-focus)#{$additional-selector} {
    @content;
  }

  // When a browser doesn't support :has, use focus-within as a fallback. This means that focus state is displayed on focus and not on focus-visible only (except some browsers like Safari).
  @supports not selector(:has(:focus-visible)) {
    &:is(:focus-visible, :focus-within, .pretend-focus)#{$additional-selector} {
      @content;
    }
  }
}

@mixin focus-hover-style-custom($additional-selector: '') {
  @include focus-style-custom($additional-selector) {
    @content;
  }

  &:hover#{$additional-selector} {
    @content;
  }
}

@mixin disabled-style($additional-selector: '') {
  &:disabled#{$additional-selector} {
    pointer-events: none;
    color: var(--post-gray-60);
    border-color: var(--post-gray-40);
    border-style: dashed;
    background-clip: padding-box;
    text-decoration: line-through;
    // In case rules need to be slightly adjusted
    @content;

    @include high-contrast-mode() {
      color: GrayText;
      border-color: GrayText;
    }
  }
}

@mixin responsive-actions {
  display: flex;
  flex-direction: column;
  justify-content: space-between;

  @include media-breakpoint-up(md) {
    flex-direction: row-reverse;

    > .btn {
      margin-right: auto;
    }
  }

  &-primary-actions {
    display: flex;
    flex-direction: column;

    @include media-breakpoint-up(md) {
      flex-direction: row-reverse;
      margin-left: auto;
    }
  }
}
