@use './../themes/bootstrap/core' as *;

@use '../functions/tokens';
@use '../tokens/helpers';
@use '../tokens/components';

@use '../variables/spacing';
@use '../variables/commons';
@use '../variables/breakpoints';

@mixin reset-list() {
  margin-block: 0;
  padding-inline-start: 0;
  list-style: none;
}

@mixin visuallyhidden() {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0 0 0 0);
  border: 0;
}

@mixin visuallyhidden-reset() {
  position: static;
  width: auto;
  height: auto;
  margin: 0;
  overflow: visible;
  clip: auto;
}

@mixin visuallyhidden-focusable() {
  @include visuallyhidden;

  &:focus,
  &:active {
    @include visuallyhidden-reset;
  }
}

@mixin replace-text() {
  display: block;
  overflow: hidden;
  text-indent: 100%;
  white-space: nowrap;
}

// will truncate text needs a fixed width
// http://css-tricks.com/snippets/css/truncate-string-with-ellipsis/
@mixin truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin full-width-underscore($color, $height) {
  content: '';
  display: block;
  position: absolute;
  right: 0;
  bottom: 0;
  left: 0;
  height: $height;
  background-color: $color;
  pointer-events: none;
}

@mixin generate-utility-class($classname, $size, $property, $value) {
  .#{$classname}-#{$size}-r {
    #{$property}: $value !important;
  }
}

@mixin high-contrast-mode() {
  @media (forced-colors: active), (-ms-high-contrast: active), (-ms-high-contrast: white-on-black) {
    @content;
  }
}

@mixin not-disabled-focus-hover {
  &:focus,
  &:not(:disabled):hover,
  &.pretend-hover {
    @content;
  }
}

@mixin not-disabled-hover {
  &:not(:disabled):hover,
  &.pretend-hover {
    @content;
  }
}

@mixin focus-style-none {
  outline: none;
}

@mixin focus-style($additional-selector: '') {
  &#{$additional-selector} {
    outline-offset: tokens.get('focus-outline-offset', helpers.$post-focus) !important;
    outline: tokens.get('focus-outline-color', helpers.$post-focus) none
      tokens.get('focus-outline-width', helpers.$post-focus) !important;
  }

  // :has(:focus-visible) mimic a focus-visible-within pseudo-class
  &:is(:focus-visible, :has(:focus-visible), .pretend-focus)#{$additional-selector} {
    outline-style: tokens.get('focus-border-style', helpers.$post-focus) !important;
    // In case rules need to be slightly adjusted
    @content;

    @include high-contrast-mode() {
      outline-color: Highlight !important;
    }
  }

  // When a browser doesn't support :has, use focus-within as a fallback. This means that focus state is displayed on focus and not on focus-visible only (except some browsers like Safari).
  @supports not selector(:has(:focus-visible)) {
    &:is(:focus-visible, :focus-within, .pretend-focus)#{$additional-selector} {
      outline-style: tokens.get('focus-border-style', helpers.$post-focus) !important;
      // In case rules need to be slightly adjusted
      @content;

      @include high-contrast-mode() {
        outline-color: Highlight !important;
      }
    }
  }
}

@mixin focus-style-custom($additional-selector: '') {
  // :has(:focus-visible) mimic a focus-visible-within pseudo-class
  &:is(:focus-visible, :has(:focus-visible), .pretend-focus)#{$additional-selector} {
    @content;
  }

  // When a browser doesn't support :has, use focus-within as a fallback. This means that focus state is displayed on focus and not on focus-visible only (except some browsers like Safari).
  @supports not selector(:has(:focus-visible)) {
    &:is(:focus-visible, :focus-within, .pretend-focus)#{$additional-selector} {
      @content;
    }
  }
}

@mixin focus-hover-style-custom($additional-selector: '') {
  @include focus-style-custom($additional-selector) {
    @content;
  }

  &:hover#{$additional-selector} {
    @content;
  }
}

@mixin disabled-style($additional-selector: '') {
  &:disabled#{$additional-selector} {
    pointer-events: none;
    color: tokens.get('input-color-disabled-fg', components.$post-text-input);
    border-color: tokens.get('input-color-disabled-border', components.$post-text-input);
    border-style: tokens.get('input-border-style-disabled', components.$post-text-input);
    background-clip: padding-box;
    // In case rules need to be slightly adjusted
    @content;

    @include high-contrast-mode() {
      color: GrayText;
      border-color: GrayText;
    }
  }
}
