@use 'sass:map';
@use 'sass:list';

@use './color' as color-mx;
@use './icons' as icons-mx;
@use './utilities' as utilities-mx;
@use './../functions/contrast' as contrast-fn;

@use './../variables/spacing';
@use './../variables/components/close';
@use './../variables/components/notification';
@use '../tokens/components';
@use '../tokens/elements';
@use '../functions/tokens';

tokens.$default-map: components.$post-banner;

@mixin notification-size($size) {
  $default-var: list.nth(notification.$notification-variants, 1);
  $icon-size: map.get(notification.$notification-icon-size-map, $size);
  $padding-x: map.get(notification.$notification-padding-x-map, $size);
  $padding-y: map.get(notification.$notification-padding-y-map, $size);
  $elevation: map.get(notification.$notification-elevation-map, $size);
  $gap: map.get(notification.$notification-gap-map, $size);
  min-height: calc(#{$icon-size} + (2 * #{$padding-y}));
  box-sizing: border-box;

  box-shadow: $elevation;
  border-radius: tokens.get('banner-border-radius');

  padding: $padding-y $padding-x;
  padding-inline-start: calc(#{$padding-x} + #{$icon-size} + #{$gap});
  font-weight: notification.$notification-font-weight;
  border-style: tokens.get('banner-border-style');
  border-width: tokens.get('banner-border-width');
  position: relative;
  color: tokens.get('body-color', elements.$post-body);

  // Set the neutral notification as the default color
  @include notification-variant(
    list.nth($default-var, 2),
    list.nth($default-var, 3),
    list.nth($default-var, 4),
    list.nth($default-var, 5),
    list.nth($default-var, 6)
  );

  &::before {
    content: '';
    display: block;
  }

  &::before,
  > post-icon {
    position: absolute;
    height: $icon-size;
    width: $icon-size;
    left: $padding-x;
    top: $padding-y;
  }

  &.no-icon {
    min-height: calc(2 * #{$padding-y} + close.$close-size);
    padding-inline-start: $padding-x;

    &::before {
      content: unset;
    }

    > post-icon {
      display: none;
    }
  }

  @include utilities-mx.high-contrast-mode {
    filter: none !important;
    border: 2px solid CanvasText;
  }
}

@mixin notification-body($size) {
  $hr-margin-block: map.get(notification.$notification-hr-margin-block-map, $size);

  /* stylelint-disable-next-line scss/selector-no-redundant-nesting-selector */
  & {
    display: flex;
    flex-direction: column;
    justify-content: center;
    gap: notification.$notification-body-gap;
  }

  a {
    font-weight: notification.$notification-link-font-weight;
  }

  hr {
    margin-block: $hr-margin-block !important;
  }

  > * {
    margin: 0;
  }
}

@mixin notification-variant($color, $icon, $border-color, $icon-color, $scheme) {
  background-color: $color;
  border-color: $border-color;
  color-scheme: $scheme;

  // default icon (mask-image)
  &:not(.no-icon)::before {
    @include icons-mx.icon($icon);
    color: $icon-color;
  }

  // Prevent flashing when using post-icon
  &:has(> post-icon)::before {
    content: none;
  }

  // icon override (post-icon), needed when :has is not supported
  > post-icon {
    background-color: $color;
    color: $icon-color;
  }
}

@mixin notification-dismissible($size, $close: 'btn-close') {
  $padding-x: map.get(notification.$notification-padding-x-map, $size);
  $gap: map.get(notification.$notification-gap-map, $size);

  /* stylelint-disable-next-line scss/selector-no-redundant-nesting-selector */
  & {
    pointer-events: auto;
    position: relative;
  }

  &:not(.banner-action):not(.alert-action) {
    padding-inline-end: calc(#{$padding-x} + #{$gap} + #{close.$close-size});
  }

  > .#{$close} {
    position: absolute;
    inset-block-start: spacing.$spacer;
    inset-inline-end: $padding-x;
  }
}
