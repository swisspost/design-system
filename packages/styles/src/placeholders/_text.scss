@use 'sass:map';
@use '../themes/bootstrap/overrides' as *;
@use '../variables/spacing';
@use '../variables/type';
@use '../variables/color';
@use '../mixins';
@use '../mixins/type' as type-mx;
@use '../variables/components/paragraph';

%list-adjustment {
  ul {
    position: relative;
    margin-top: paragraph.$text-bottom-space;
    margin-bottom: paragraph.$text-bottom-space;
    padding-left: map.get(spacing.$post-sizes, 'big');
    list-style: none;
    text-align: left;

    li {
      margin-bottom: paragraph.$text-bottom-space * 0.5;
      font-weight: type.$font-weight-light;

      &::before {
        content: '\2013';
        display: inline-block;
        position: absolute;
        left: 0;
      }

      &:last-child {
        margin-bottom: 0;
      }
    }
  }
}

@each $key, $value in type.$font-curves {
  %font-curve-#{$key} {
    @include type-mx.font-curve($key);
  }
}

%text-bottom-spacer {
  margin-bottom: paragraph.$text-bottom-space; // 0.8 times the size of the current font (20px) = 16px
}

// Removes margin-top from first and margin-bottom from last child
%module-container {
  > :first-child {
    margin-top: 0;
  }

  > :last-child {
    margin-bottom: 0;
  }
}

%default-module-spacer {
  margin-top: map.get(spacing.$post-sizes, 'huge'); // 56px
  margin-bottom: map.get(spacing.$post-sizes, 'huge'); // 56px

  @include media-breakpoint-up(md) {
    margin-top: map.get(spacing.$post-sizes, 'giant'); // 80px
    margin-bottom: map.get(spacing.$post-sizes, 'giant'); // 80px
  }
}

%text-container {
  @extend %module-container;

  ul {
    position: relative;
    margin-top: paragraph.$text-bottom-space;
    margin-bottom: paragraph.$text-bottom-space;
    padding-left: map.get(spacing.$post-sizes, 'big');
    list-style: none;

    li {
      @extend %font-curve-regular;
      @extend %text-bottom-spacer;
      font-weight: type.$font-weight-light;

      &::before {
        content: '\2013';
        display: inline-block;
        position: absolute;
        left: 0;
      }

      &:last-child {
        margin-bottom: 0;
      }
    }

    &.bulletpoints {
      padding-left: map.get(spacing.$post-sizes, 'big');

      @include media-breakpoint-up(md) {
        padding-left: map.get(spacing.$post-sizes, 'bigger-big');
      }

      li {
        position: relative;

        // stylelint-disable-next-line max-nesting-depth
        &::before {
          content: '';
          position: absolute;
          top: 2px;
          left: -(map.get(spacing.$post-sizes, 'big'));
          width: map.get(spacing.$post-sizes, 'small-large');
          height: map.get(spacing.$post-sizes, 'small-large');
          border-radius: 50%;

          @include media-breakpoint-up(md) {
            left: -(map.get(spacing.$post-sizes, 'bigger-big'));
            width: map.get(spacing.$post-sizes, 'large');
            height: map.get(spacing.$post-sizes, 'large');
          }
        }
      }
    }
  }

  ol {
    position: relative;
    margin-top: paragraph.$text-bottom-space;
    margin-bottom: paragraph.$text-bottom-space;
    padding-left: map.get(spacing.$post-sizes, 'big');
    list-style: none;
    counter-reset: li-counter;

    li {
      font-weight: type.$font-weight-light;
      counter-increment: li-counter;

      &::before {
        content: counter(li-counter) '.';
        position: absolute;
        left: 0;
      }
    }
  }

  .h-highlighted {
    @extend %font-curve-regular;
    @extend %text-bottom-spacer;
    @include mixins.bezel-regular;
    background-color: rgba(map.get(color.$background-colors, 'nightblue-bright'), 0.1);

    @include media-breakpoint-up(lg) {
      @include mixins.bezel-medium;
    }
    @include media-breakpoint-up(xxl) {
      @include mixins.bezel-large;
    }
  }
}
