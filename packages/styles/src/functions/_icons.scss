@use 'sass:map';

@use './color';
@use './utilities';
@use './../variables/icons';

@function add-fill-color($svg, $color) {
  $opacity: alpha($color);
  $color: color.get-hex-string($color);
  $clean-color: utilities.replace('#{$color}', '#', '%23');

  @return set-svg-properties(
    $svg,
    (
      'fill': $clean-color,
      'opacity': $opacity,
    )
  );
}

@function add-stroke-color($svg, $color, $stroke-width: null) {
  $color: color.get-hex-string($color);
  $clean-color: utilities.replace('#{$color}', '#', '%23');

  @return set-svg-properties(
    $svg,
    (
      'stroke': $clean-color,
      'stroke-width': $stroke-width,
    )
  );
}

@function set-svg-properties($svg, $properties) {
  @each $shape in rect, circle, ellipse, line, polyline, polygon, path {
    $lookup: '%3C#{$shape}';

    @each $property, $value in $properties {
      @if $value {
        $replacement: "#{$lookup} #{$property}='#{$value}'";
        $svg: utilities.replace($svg, $lookup, $replacement);
      }
    }
  }

  @return $svg;
}

@function get-svg-url($icon-name) {
  $svg-url: '';

  @if (map.has-key(icons.$svg-icon-map, #{$icon-name})) {
    $svg-url: map.get(icons.$svg-icon-map, #{$icon-name});
  } @else if(map.has-key(icons.$svg-unofficial-icon-map, #{$icon-name})) {
    $svg-url: icons.$svg-pre-path +
      map.get(icons.$svg-unofficial-icon-map, #{$icon-name}) +
      icons.$svg-post-path;
  } @else {
    @error "Icon '#{$icon-name}' does not exist.";
  }

  @return $svg-url;
}

@function get-colored-svg-url($icon-name, $color) {
  @return add-fill-color(get-svg-url($icon-name), $color);
}

@function get-pre-colored-svg-url($icon-name) {
  $path-definition: map.get(icons.$svg-pre-colored-icon-map, #{$icon-name});

  @if (not map.has-key(icons.$svg-pre-colored-icon-map, #{$icon-name})) {
    @error "Icon '#{$icon-name}' does not exist.";
  }

  $svg-url: icons.$svg-pre-path + $path-definition + icons.$svg-post-path;

  @return $svg-url;
}
