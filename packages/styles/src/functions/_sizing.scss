@use 'sass:math';

@use './utilities';
@use './list';

// stylelint-disable order/order

@function strip-unit($value) {
  @return math.div($value, $value * 0 + 1);
}

@function px-to-em($px, $ref: 16px) {
  @return to-em(math.div(to-px($px), to-px($ref)));
}

@function px-to-rem($px) {
  @return to-rem(math.div(strip-unit($px), strip-unit(16px)));
}

@function to-em($val) {
  /* stylelint-disable-next-line length-zero-no-unit */
  @return (strip-unit($val) + 0em);
}

@function to-rem($val) {
  /* stylelint-disable-next-line length-zero-no-unit */
  @return (strip-unit($val) + 0rem);
}

@function to-px($val) {
  /* stylelint-disable-next-line length-zero-no-unit */
  @return (strip-unit($val) + 0px);
}

// Hardcoded numbers come directly from design (new CI/CD)
// line-height always depends on font-size
@function line-height-calc($val) {
  @if $val < px-to-rem(17) {
    @return 1.5;
  } @else if $val < px-to-rem(21) {
    @return 1.4;
  } @else if $val < px-to-rem(25) {
    @return 1.3;
  } @else if $val < px-to-rem(33) {
    @return 1.2;
  } @else if $val < px-to-rem(49) {
    @return 1.1;
  } @else {
    @return 1;
  }
}

@function calculate-inner-height(
  $font-size,
  $line-height,
  $padding-top,
  $padding-bottom: $padding-top
) {
  @return ($line-height * $font-size) + $padding-top + $padding-bottom;
}

@function calculate-single-box-shadow-size($box-shadow) {
  $len: length($box-shadow);
  $multiplier: 1;
  $box-shadow-size: 0;

  @if ($len > 6 or $len < 2) {
    @error "The function 'calculate-single-box-shadow-size($box-shadow)' is not for calculating the combined size of multiple box-shadows. Failed value: '#{$box-shadow}'.";
  }

  @if (nth($box-shadow, 1) == 'inset') {
    $multiplier: -1;
    $box-shadow: list.remove-nth($box-shadow, 1);
  }

  @if (utilities.starts-with-any(nth($box-shadow, -1), 'hsl', 'rgb', '#')) {
    $box-shadow: list.remove-nth($box-shadow, -1);
  }

  $len: length($box-shadow);

  @if ($len > 4) {
    @error "The function 'calculate-single-box-shadow-size($box-shadow)' is not for calculating the combined size of multiple box-shadows. Failed value: '#{$box-shadow}'.";
  }

  @if (abs(nth($box-shadow, 1)) >= abs(nth($box-shadow, 2))) {
    $box-shadow-size: $box-shadow-size + abs(nth($box-shadow, 1));
  } @else {
    $box-shadow-size: $box-shadow-size + abs(nth($box-shadow, 2));
  }

  @if ($len >= 3) {
    $box-shadow-size: $box-shadow-size + (abs(nth($box-shadow, 3)) * 0.7);
  }

  @if ($len == 4) {
    $box-shadow-size: $box-shadow-size + nth($box-shadow, 4);
  }

  @if (unit($box-shadow-size) == 'px') {
    $box-shadow-size: ceil($box-shadow-size);
  }

  @return $box-shadow-size;
}
